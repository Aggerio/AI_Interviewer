/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Emitter, Event } from '../../../base/common/event.js';
import { Iterable } from '../../../base/common/iterator.js';
import { Disposable } from '../../../base/common/lifecycle.js';
import { createDecorator } from '../../instantiation/common/instantiation.js';
export const IPolicyService = createDecorator('policy');
export class AbstractPolicyService extends Disposable {
    constructor() {
        super(...arguments);
        this.policyDefinitions = {};
        this.policies = new Map();
        this._onDidChange = this._register(new Emitter());
        this.onDidChange = this._onDidChange.event;
    }
    updatePolicyDefinitions(policyDefinitions) {
        return __awaiter(this, void 0, void 0, function* () {
            const size = Object.keys(this.policyDefinitions).length;
            this.policyDefinitions = Object.assign(Object.assign({}, policyDefinitions), this.policyDefinitions);
            if (size !== Object.keys(this.policyDefinitions).length) {
                yield this._updatePolicyDefinitions(policyDefinitions);
            }
            return Iterable.reduce(this.policies.entries(), (r, [name, value]) => (Object.assign(Object.assign({}, r), { [name]: value })), {});
        });
    }
    getPolicyValue(name) {
        return this.policies.get(name);
    }
    serialize() {
        return Iterable.reduce(Object.entries(this.policyDefinitions), (r, [name, definition]) => (Object.assign(Object.assign({}, r), { [name]: { definition, value: this.policies.get(name) } })), {});
    }
}
export class NullPolicyService {
    constructor() {
        this.onDidChange = Event.None;
    }
    updatePolicyDefinitions() {
        return __awaiter(this, void 0, void 0, function* () { return {}; });
    }
    getPolicyValue() { return undefined; }
    serialize() { return undefined; }
}
