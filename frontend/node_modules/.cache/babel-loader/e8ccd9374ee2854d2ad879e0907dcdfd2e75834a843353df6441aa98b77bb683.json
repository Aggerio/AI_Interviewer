{"ast":null,"code":"var _jsxFileName = \"/home/aggerio/code_playground/ai_interviewer/frontend/src/components/SpeechToText.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect } from 'react';\n// import { createSpeechlySpeechRecognition } from '@speechly/speech-recognition-polyfill';\n// import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\n\n// // const appId = '67912827-d6a0-4329-ace1-99eb1f1052ac';\n// const appId = process.env.REACT_APP_SPEECHLY_ID;\n// const SpeechlySpeechRecognition = createSpeechlySpeechRecognition(appId);\n// SpeechRecognition.applyPolyfill(SpeechlySpeechRecognition);\n\n// const SpeechToText = () => {\n//   const {\n//     transcript,\n//     listening,\n//     browserSupportsSpeechRecognition\n//   } = useSpeechRecognition();\n//   const startListening = () => SpeechRecognition.startListening({ continuous: true });\n\n//   useEffect(() => {\n//     startListening();\n//     return () => {\n//       SpeechRecognition.stopListening();\n//     }\n//   }, []);\n\n//   if (!browserSupportsSpeechRecognition) {\n//     return <span>Browser doesn't support speech recognition.</span>;\n//   }\n//   else {\n\n//     return (\n//       <div className=\"w-[800px] h-[200px] bg-red-300\">\n//         {/* <p>Microphone: {listening ? 'on' : 'off'}</p> */}\n//         {/* <button */}\n//         {/*   onTouchStart={startListening} */}\n//         {/*   onMouseDown={startListening} */}\n//         {/*   onTouchEnd={SpeechRecognition.stopListening} */}\n//         {/*   onMouseUp={SpeechRecognition.stopListening} */}\n//         {/* >Hold to talk</button> */}\n//         <p>{transcript}</p>\n//       </div>\n//     );\n//   };\n// }\n// export default SpeechToText;\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport * as io from \"socket.io-client\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sampleRate = 16000;\nconst getMediaStream = () => navigator.mediaDevices.getUserMedia({\n  audio: {\n    deviceId: \"default\",\n    sampleRate: sampleRate,\n    sampleSize: 16,\n    channelCount: 1\n  },\n  video: false\n});\nconst SpeechToText = () => {\n  _s();\n  const [connection, setConnection] = useState();\n  const [currentRecognition, setCurrentRecognition] = useState();\n  const [recognitionHistory, setRecognitionHistory] = useState([]);\n  const [isRecording, setIsRecording] = useState(false);\n  const [recorder, setRecorder] = useState();\n  const processorRef = useRef();\n  const audioContextRef = useRef();\n  const audioInputRef = useRef();\n  const speechRecognized = data => {\n    if (data.isFinal) {\n      setCurrentRecognition(\"...\");\n      // setRecognitionHistory((old) => [data.text, ...old]);\n      setRecognitionHistory(old => [...old, data.text]);\n    } else setCurrentRecognition(data.text + \"...\");\n  };\n  useEffect(() => {\n    console.log(\"\\n\\nrecognitionHistory\", recognitionHistory);\n  }, [recognitionHistory]);\n  const connect = () => {\n    console.log(\"Starting connection\");\n    connection === null || connection === void 0 ? void 0 : connection.disconnect();\n    const socket = io.connect(\"http://localhost:8081\");\n    socket.on(\"connect\", () => {\n      console.log(\"connected\", socket.id);\n      setConnection(socket);\n    });\n    socket.emit(\"send_message\", \"hello world\");\n    socket.emit(\"startGoogleCloudStream\");\n    socket.on(\"receive_message\", data => {\n      console.log(\"received message\", data);\n    });\n    socket.on(\"receive_audio_text\", data => {\n      speechRecognized(data);\n      console.log(\"received audio text\", data);\n    });\n    socket.on(\"disconnect\", () => {\n      console.log(\"disconnected\", socket.id);\n    });\n  };\n  const disconnect = () => {\n    var _processorRef$current, _audioInputRef$curren, _audioContextRef$curr;\n    if (!connection) return;\n    connection === null || connection === void 0 ? void 0 : connection.emit(\"endGoogleCloudStream\");\n    connection === null || connection === void 0 ? void 0 : connection.disconnect();\n    (_processorRef$current = processorRef.current) === null || _processorRef$current === void 0 ? void 0 : _processorRef$current.disconnect();\n    (_audioInputRef$curren = audioInputRef.current) === null || _audioInputRef$curren === void 0 ? void 0 : _audioInputRef$curren.disconnect();\n    (_audioContextRef$curr = audioContextRef.current) === null || _audioContextRef$curr === void 0 ? void 0 : _audioContextRef$curr.close();\n    setConnection(undefined);\n    setRecorder(undefined);\n    setIsRecording(false);\n\n    //Send the transcript to the chatgpt interview response server \n    // and reset the conversation history\n    axios.post('http://localhost:5002/response', {\n      'transcript': recognitionHistory\n    });\n    setCurrentRecognition(\"\");\n    setRecognitionHistory([]);\n  };\n  useEffect(() => {\n    (async () => {\n      if (connection) {\n        if (isRecording) {\n          return;\n        }\n        const stream = await getMediaStream();\n        audioContextRef.current = new window.AudioContext();\n        await audioContextRef.current.audioWorklet.addModule(\"/src/worklets/recorderWorkletProcessor.js\");\n        audioContextRef.current.resume();\n        audioInputRef.current = audioContextRef.current.createMediaStreamSource(stream);\n        processorRef.current = new AudioWorkletNode(audioContextRef.current, \"recorder.worklet\");\n        processorRef.current.connect(audioContextRef.current.destination);\n        audioContextRef.current.resume();\n        audioInputRef.current.connect(processorRef.current);\n        processorRef.current.port.onmessage = event => {\n          const audioData = event.data;\n          connection.emit(\"send_audio_data\", {\n            audio: audioData\n          });\n        };\n        setIsRecording(true);\n      } else {\n        console.error(\"No connection\");\n      }\n    })();\n    return () => {\n      if (isRecording) {\n        var _processorRef$current2, _audioInputRef$curren2, _audioContextRef$curr2;\n        (_processorRef$current2 = processorRef.current) === null || _processorRef$current2 === void 0 ? void 0 : _processorRef$current2.disconnect();\n        (_audioInputRef$curren2 = audioInputRef.current) === null || _audioInputRef$curren2 === void 0 ? void 0 : _audioInputRef$curren2.disconnect();\n        if (((_audioContextRef$curr2 = audioContextRef.current) === null || _audioContextRef$curr2 === void 0 ? void 0 : _audioContextRef$curr2.state) !== \"closed\") {\n          var _audioContextRef$curr3;\n          (_audioContextRef$curr3 = audioContextRef.current) === null || _audioContextRef$curr3 === void 0 ? void 0 : _audioContextRef$curr3.close();\n        }\n      }\n    };\n  }, [connection, isRecording, recorder]);\n\n  //   return (\n  //     <React.Fragment>\n  //       <Container className=\"py-5 text-center\">\n  //         <Container fluid className=\"py-5 bg-primary text-light text-center \">\n  //           <Container>\n  //             <Button\n  //               className={isRecording ? \"btn-danger\" : \"btn-outline-light\"}\n  //               onClick={connect}\n  //               disabled={isRecording}\n  //             >\n  //               Start\n  //             </Button>\n  //             <Button\n  //               className=\"btn-outline-light\"\n  //               onClick={disconnect}\n  //               disabled={!isRecording}\n  //             >\n  //               Stop\n  //             </Button>\n  //           </Container>\n  //         </Container>\n  //         <Container className=\"py-5 text-center\">\n  //           {recognitionHistory.map((tx, idx) => (\n  //             <p key={idx}>{tx}</p>\n  //           ))}\n  //           <p>{currentRecognition}</p>\n  //         </Container>\n  //       </Container>\n  //     </React.Fragment>\n  //   );\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"py-5 text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"py-5 bg-primary text-light text-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"space-x-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `${isRecording ? \"bg-red-500\" : \"bg-white text-primary border border-light\"} px-4 py-2 rounded`,\n          onClick: connect,\n          disabled: isRecording,\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `bg-white text-primary border border-light px-4 py-2 rounded`,\n          onClick: disconnect,\n          disabled: !isRecording,\n          children: \"Stop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"py-5 text-center text-white\",\n      children: [recognitionHistory.map((tx, idx) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: tx\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentRecognition\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 217,\n    columnNumber: 5\n  }, this);\n};\n_s(SpeechToText, \"ONOj++HxDqkMKHSkHlVQQE2LIWM=\");\n_c = SpeechToText;\nexport default SpeechToText;\nvar _c;\n$RefreshReg$(_c, \"SpeechToText\");","map":{"version":3,"names":["React","useEffect","useState","useRef","io","axios","jsxDEV","_jsxDEV","sampleRate","getMediaStream","navigator","mediaDevices","getUserMedia","audio","deviceId","sampleSize","channelCount","video","SpeechToText","_s","connection","setConnection","currentRecognition","setCurrentRecognition","recognitionHistory","setRecognitionHistory","isRecording","setIsRecording","recorder","setRecorder","processorRef","audioContextRef","audioInputRef","speechRecognized","data","isFinal","old","text","console","log","connect","disconnect","socket","on","id","emit","_processorRef$current","_audioInputRef$curren","_audioContextRef$curr","current","close","undefined","post","stream","window","AudioContext","audioWorklet","addModule","resume","createMediaStreamSource","AudioWorkletNode","destination","port","onmessage","event","audioData","error","_processorRef$current2","_audioInputRef$curren2","_audioContextRef$curr2","state","_audioContextRef$curr3","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","map","tx","idx","_c","$RefreshReg$"],"sources":["/home/aggerio/code_playground/ai_interviewer/frontend/src/components/SpeechToText.jsx"],"sourcesContent":["// import React, { useEffect } from 'react';\n// import { createSpeechlySpeechRecognition } from '@speechly/speech-recognition-polyfill';\n// import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\n\n\n// // const appId = '67912827-d6a0-4329-ace1-99eb1f1052ac';\n// const appId = process.env.REACT_APP_SPEECHLY_ID;\n// const SpeechlySpeechRecognition = createSpeechlySpeechRecognition(appId);\n// SpeechRecognition.applyPolyfill(SpeechlySpeechRecognition);\n\n// const SpeechToText = () => {\n//   const {\n//     transcript,\n//     listening,\n//     browserSupportsSpeechRecognition\n//   } = useSpeechRecognition();\n//   const startListening = () => SpeechRecognition.startListening({ continuous: true });\n\n//   useEffect(() => {\n//     startListening();\n//     return () => {\n//       SpeechRecognition.stopListening();\n//     }\n//   }, []);\n\n//   if (!browserSupportsSpeechRecognition) {\n//     return <span>Browser doesn't support speech recognition.</span>;\n//   }\n//   else {\n\n//     return (\n//       <div className=\"w-[800px] h-[200px] bg-red-300\">\n//         {/* <p>Microphone: {listening ? 'on' : 'off'}</p> */}\n//         {/* <button */}\n//         {/*   onTouchStart={startListening} */}\n//         {/*   onMouseDown={startListening} */}\n//         {/*   onTouchEnd={SpeechRecognition.stopListening} */}\n//         {/*   onMouseUp={SpeechRecognition.stopListening} */}\n//         {/* >Hold to talk</button> */}\n//         <p>{transcript}</p>\n//       </div>\n//     );\n//   };\n// }\n// export default SpeechToText;\n\n\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport * as io from \"socket.io-client\";\nimport axios from \"axios\";\n\nconst sampleRate = 16000;\n\nconst getMediaStream = () =>\n  navigator.mediaDevices.getUserMedia({\n    audio: {\n      deviceId: \"default\",\n      sampleRate: sampleRate,\n      sampleSize: 16,\n      channelCount: 1,\n    },\n    video: false,\n  });\n\nconst SpeechToText = () => {\n  const [connection, setConnection] = useState();\n  const [currentRecognition, setCurrentRecognition] = useState();\n  const [recognitionHistory, setRecognitionHistory] = useState([]);\n  const [isRecording, setIsRecording] = useState(false);\n  const [recorder, setRecorder] = useState();\n  const processorRef = useRef();\n  const audioContextRef = useRef();\n  const audioInputRef = useRef();\n\n  const speechRecognized = (data) => {\n    if (data.isFinal) {\n      setCurrentRecognition(\"...\");\n      // setRecognitionHistory((old) => [data.text, ...old]);\n      setRecognitionHistory((old) => [...old, data.text]);\n    } else setCurrentRecognition(data.text + \"...\");\n  };\n\n  useEffect(() => {\n    console.log(\"\\n\\nrecognitionHistory\", recognitionHistory);\n  }, [recognitionHistory]);\n\n  const connect = () => {\n    console.log(\"Starting connection\");\n    connection?.disconnect();\n    const socket = io.connect(\"http://localhost:8081\");\n    socket.on(\"connect\", () => {\n      console.log(\"connected\", socket.id);\n      setConnection(socket);\n    });\n\n    socket.emit(\"send_message\", \"hello world\");\n\n    socket.emit(\"startGoogleCloudStream\");\n\n    socket.on(\"receive_message\", (data) => {\n      console.log(\"received message\", data);\n    });\n\n    socket.on(\"receive_audio_text\", (data) => {\n      speechRecognized(data);\n      console.log(\"received audio text\", data);\n    });\n\n    socket.on(\"disconnect\", () => {\n      console.log(\"disconnected\", socket.id);\n    });\n  };\n\n  const disconnect = () => {\n    if (!connection) return;\n    connection?.emit(\"endGoogleCloudStream\");\n    connection?.disconnect();\n    processorRef.current?.disconnect();\n    audioInputRef.current?.disconnect();\n    audioContextRef.current?.close();\n    setConnection(undefined);\n    setRecorder(undefined);\n    setIsRecording(false);\n\n    //Send the transcript to the chatgpt interview response server \n    // and reset the conversation history\n    axios.post('http://localhost:5002/response', { 'transcript': recognitionHistory });\n    setCurrentRecognition(\"\");\n    setRecognitionHistory([]);\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (connection) {\n        if (isRecording) {\n          return;\n        }\n\n        const stream = await getMediaStream();\n\n        audioContextRef.current = new window.AudioContext();\n\n        await audioContextRef.current.audioWorklet.addModule(\n          \"/src/worklets/recorderWorkletProcessor.js\"\n        );\n\n        audioContextRef.current.resume();\n\n        audioInputRef.current =\n          audioContextRef.current.createMediaStreamSource(stream);\n\n        processorRef.current = new AudioWorkletNode(\n          audioContextRef.current,\n          \"recorder.worklet\"\n        );\n\n        processorRef.current.connect(audioContextRef.current.destination);\n        audioContextRef.current.resume();\n\n        audioInputRef.current.connect(processorRef.current);\n\n        processorRef.current.port.onmessage = (event) => {\n          const audioData = event.data;\n          connection.emit(\"send_audio_data\", { audio: audioData });\n        };\n        setIsRecording(true);\n      } else {\n        console.error(\"No connection\");\n      }\n    })();\n    return () => {\n      if (isRecording) {\n        processorRef.current?.disconnect();\n        audioInputRef.current?.disconnect();\n        if (audioContextRef.current?.state !== \"closed\") {\n          audioContextRef.current?.close();\n        }\n      }\n    };\n  }, [connection, isRecording, recorder]);\n\n  //   return (\n  //     <React.Fragment>\n  //       <Container className=\"py-5 text-center\">\n  //         <Container fluid className=\"py-5 bg-primary text-light text-center \">\n  //           <Container>\n  //             <Button\n  //               className={isRecording ? \"btn-danger\" : \"btn-outline-light\"}\n  //               onClick={connect}\n  //               disabled={isRecording}\n  //             >\n  //               Start\n  //             </Button>\n  //             <Button\n  //               className=\"btn-outline-light\"\n  //               onClick={disconnect}\n  //               disabled={!isRecording}\n  //             >\n  //               Stop\n  //             </Button>\n  //           </Container>\n  //         </Container>\n  //         <Container className=\"py-5 text-center\">\n  //           {recognitionHistory.map((tx, idx) => (\n  //             <p key={idx}>{tx}</p>\n  //           ))}\n  //           <p>{currentRecognition}</p>\n  //         </Container>\n  //       </Container>\n  //     </React.Fragment>\n  //   );\n  // };\n\n\n  return (\n    <div className=\"py-5 text-center\">\n      <div className=\"py-5 bg-primary text-light text-center\">\n        <div className=\"space-x-4\">\n          <button\n            className={`${isRecording ? \"bg-red-500\" : \"bg-white text-primary border border-light\"\n              } px-4 py-2 rounded`}\n            onClick={connect}\n            disabled={isRecording}\n          >\n            Start\n          </button>\n          <button\n            className={`bg-white text-primary border border-light px-4 py-2 rounded`}\n            onClick={disconnect}\n            disabled={!isRecording}\n          >\n            Stop\n          </button>\n        </div>\n      </div>\n      <div className=\"py-5 text-center text-white\">\n        {recognitionHistory.map((tx, idx) => (\n          <p key={idx}>{tx}</p>\n        ))}\n        <p>{currentRecognition}</p>\n      </div>\n    </div>\n  );\n}\nexport default SpeechToText;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}