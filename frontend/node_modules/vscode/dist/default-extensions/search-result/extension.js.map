{"version":3,"file":"extension.js","mappings":";;;;;;;AAAA;;;;;;ACAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,uCAAuC,8BAA8B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA,MAAM;AACN;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA,oBAAoB,sBAAsB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,WAAW,yBAAyB;AACpC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,qBAAqB;AAChC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,YAAY;AACZ;AACA,sCAAsC;AACtC;AACA;AACA,UAAU;AACV;AACA;AACA,iDAAiD;AACjD;AACA,YAAY;AACZ;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,4CAA4C,cAAc;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,QAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gDAAgD;AAChD;AACA,MAAM;AACN,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,QAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;A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","sources":["webpack://search-result/external commonjs \"vscode\"","webpack://search-result/../../node_modules/path-browserify/index.js","webpack://search-result/webpack/bootstrap","webpack://search-result/./src/extension.ts"],"sourcesContent":["module.exports = require(\"vscode\");","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as vscode from 'vscode';\nimport * as pathUtils from 'path';\n\nconst FILE_LINE_REGEX = /^(\\S.*):$/;\nconst RESULT_LINE_REGEX = /^(\\s+)(\\d+)(: |  )(\\s*)(.*)$/;\nconst ELISION_REGEX = /⟪ ([0-9]+) characters skipped ⟫/g;\nconst SEARCH_RESULT_SELECTOR = { language: 'search-result', exclusive: true };\nconst DIRECTIVES = ['# Query:', '# Flags:', '# Including:', '# Excluding:', '# ContextLines:'];\nconst FLAGS = ['RegExp', 'CaseSensitive', 'IgnoreExcludeSettings', 'WordMatch'];\n\nlet cachedLastParse: { version: number; parse: ParsedSearchResults; uri: vscode.Uri } | undefined;\nlet documentChangeListener: vscode.Disposable | undefined;\n\n\nexport function activate(context: vscode.ExtensionContext) {\n\n\tconst contextLineDecorations = vscode.window.createTextEditorDecorationType({ opacity: '0.7' });\n\tconst matchLineDecorations = vscode.window.createTextEditorDecorationType({ fontWeight: 'bold' });\n\n\tconst decorate = (editor: vscode.TextEditor) => {\n\t\tconst parsed = parseSearchResults(editor.document).filter(isResultLine);\n\t\tconst contextRanges = parsed.filter(line => line.isContext).map(line => line.prefixRange);\n\t\tconst matchRanges = parsed.filter(line => !line.isContext).map(line => line.prefixRange);\n\t\teditor.setDecorations(contextLineDecorations, contextRanges);\n\t\teditor.setDecorations(matchLineDecorations, matchRanges);\n\t};\n\n\tif (vscode.window.activeTextEditor && vscode.window.activeTextEditor.document.languageId === 'search-result') {\n\t\tdecorate(vscode.window.activeTextEditor);\n\t}\n\n\tcontext.subscriptions.push(\n\n\t\tvscode.languages.registerDocumentSymbolProvider(SEARCH_RESULT_SELECTOR, {\n\t\t\tprovideDocumentSymbols(document: vscode.TextDocument, token: vscode.CancellationToken): vscode.DocumentSymbol[] {\n\t\t\t\tconst results = parseSearchResults(document, token)\n\t\t\t\t\t.filter(isFileLine)\n\t\t\t\t\t.map(line => new vscode.DocumentSymbol(\n\t\t\t\t\t\tline.path,\n\t\t\t\t\t\t'',\n\t\t\t\t\t\tvscode.SymbolKind.File,\n\t\t\t\t\t\tline.allLocations.map(({ originSelectionRange }) => originSelectionRange!).reduce((p, c) => p.union(c), line.location.originSelectionRange!),\n\t\t\t\t\t\tline.location.originSelectionRange!,\n\t\t\t\t\t));\n\n\t\t\t\treturn results;\n\t\t\t}\n\t\t}),\n\n\t\tvscode.languages.registerCompletionItemProvider(SEARCH_RESULT_SELECTOR, {\n\t\t\tprovideCompletionItems(document: vscode.TextDocument, position: vscode.Position): vscode.CompletionItem[] {\n\n\t\t\t\tconst line = document.lineAt(position.line);\n\t\t\t\tif (position.line > 3) { return []; }\n\t\t\t\tif (position.character === 0 || (position.character === 1 && line.text === '#')) {\n\t\t\t\t\tconst header = Array.from({ length: DIRECTIVES.length }).map((_, i) => document.lineAt(i).text);\n\n\t\t\t\t\treturn DIRECTIVES\n\t\t\t\t\t\t.filter(suggestion => header.every(line => line.indexOf(suggestion) === -1))\n\t\t\t\t\t\t.map(flag => ({ label: flag, insertText: (flag.slice(position.character)) + ' ' }));\n\t\t\t\t}\n\n\t\t\t\tif (line.text.indexOf('# Flags:') === -1) { return []; }\n\n\t\t\t\treturn FLAGS\n\t\t\t\t\t.filter(flag => line.text.indexOf(flag) === -1)\n\t\t\t\t\t.map(flag => ({ label: flag, insertText: flag + ' ' }));\n\t\t\t}\n\t\t}, '#'),\n\n\t\tvscode.languages.registerDefinitionProvider(SEARCH_RESULT_SELECTOR, {\n\t\t\tprovideDefinition(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken): vscode.DefinitionLink[] {\n\t\t\t\tconst lineResult = parseSearchResults(document, token)[position.line];\n\t\t\t\tif (!lineResult) { return []; }\n\t\t\t\tif (lineResult.type === 'file') {\n\t\t\t\t\treturn lineResult.allLocations.map(l => ({ ...l, originSelectionRange: lineResult.location.originSelectionRange }));\n\t\t\t\t}\n\n\t\t\t\tconst location = lineResult.locations.find(l => l.originSelectionRange.contains(position));\n\t\t\t\tif (!location) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\n\t\t\t\tconst targetPos = new vscode.Position(\n\t\t\t\t\tlocation.targetSelectionRange.start.line,\n\t\t\t\t\tlocation.targetSelectionRange.start.character + (position.character - location.originSelectionRange.start.character)\n\t\t\t\t);\n\t\t\t\treturn [{\n\t\t\t\t\t...location,\n\t\t\t\t\ttargetSelectionRange: new vscode.Range(targetPos, targetPos),\n\t\t\t\t}];\n\t\t\t}\n\t\t}),\n\n\t\tvscode.languages.registerDocumentLinkProvider(SEARCH_RESULT_SELECTOR, {\n\t\t\tasync provideDocumentLinks(document: vscode.TextDocument, token: vscode.CancellationToken): Promise<vscode.DocumentLink[]> {\n\t\t\t\treturn parseSearchResults(document, token)\n\t\t\t\t\t.filter(isFileLine)\n\t\t\t\t\t.map(({ location }) => ({ range: location.originSelectionRange!, target: location.targetUri }));\n\t\t\t}\n\t\t}),\n\n\t\tvscode.window.onDidChangeActiveTextEditor(editor => {\n\t\t\tif (editor?.document.languageId === 'search-result') {\n\t\t\t\t// Clear the parse whenever we open a new editor.\n\t\t\t\t// Conservative because things like the URI might remain constant even if the contents change, and re-parsing even large files is relatively fast.\n\t\t\t\tcachedLastParse = undefined;\n\n\t\t\t\tdocumentChangeListener?.dispose();\n\t\t\t\tdocumentChangeListener = vscode.workspace.onDidChangeTextDocument(doc => {\n\t\t\t\t\tif (doc.document.uri === editor.document.uri) {\n\t\t\t\t\t\tdecorate(editor);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tdecorate(editor);\n\t\t\t}\n\t\t}),\n\n\t\t{ dispose() { cachedLastParse = undefined; documentChangeListener?.dispose(); } }\n\t);\n}\n\n\nfunction relativePathToUri(path: string, resultsUri: vscode.Uri): vscode.Uri | undefined {\n\n\tconst userDataPrefix = '(Settings) ';\n\tif (path.startsWith(userDataPrefix)) {\n\t\treturn vscode.Uri.file(path.slice(userDataPrefix.length)).with({ scheme: 'vscode-userdata' });\n\t}\n\n\tif (pathUtils.isAbsolute(path)) {\n\t\tif (/^[\\\\\\/]Untitled-\\d*$/.test(path)) {\n\t\t\treturn vscode.Uri.file(path.slice(1)).with({ scheme: 'untitled', path: path.slice(1) });\n\t\t}\n\t\treturn vscode.Uri.file(path);\n\t}\n\n\tif (path.indexOf('~/') === 0) {\n\t\tconst homePath = process.env.HOME || process.env.HOMEPATH || '';\n\t\treturn vscode.Uri.file(pathUtils.join(homePath, path.slice(2)));\n\t}\n\n\tconst uriFromFolderWithPath = (folder: vscode.WorkspaceFolder, path: string): vscode.Uri =>\n\t\tvscode.Uri.joinPath(folder.uri, path);\n\n\tif (vscode.workspace.workspaceFolders) {\n\t\tconst multiRootFormattedPath = /^(.*) • (.*)$/.exec(path);\n\t\tif (multiRootFormattedPath) {\n\t\t\tconst [, workspaceName, workspacePath] = multiRootFormattedPath;\n\t\t\tconst folder = vscode.workspace.workspaceFolders.filter(wf => wf.name === workspaceName)[0];\n\t\t\tif (folder) {\n\t\t\t\treturn uriFromFolderWithPath(folder, workspacePath);\n\t\t\t}\n\t\t}\n\t\telse if (vscode.workspace.workspaceFolders.length === 1) {\n\t\t\treturn uriFromFolderWithPath(vscode.workspace.workspaceFolders[0], path);\n\t\t} else if (resultsUri.scheme !== 'untitled') {\n\t\t\t// We're in a multi-root workspace, but the path is not multi-root formatted\n\t\t\t// Possibly a saved search from a single root session. Try checking if the search result document's URI is in a current workspace folder.\n\t\t\tconst prefixMatch = vscode.workspace.workspaceFolders.filter(wf => resultsUri.toString().startsWith(wf.uri.toString()))[0];\n\t\t\tif (prefixMatch) {\n\t\t\t\treturn uriFromFolderWithPath(prefixMatch, path);\n\t\t\t}\n\t\t}\n\t}\n\n\tconsole.error(`Unable to resolve path ${path}`);\n\treturn undefined;\n}\n\ntype ParsedSearchFileLine = { type: 'file'; location: vscode.LocationLink; allLocations: vscode.LocationLink[]; path: string };\ntype ParsedSearchResultLine = { type: 'result'; locations: Required<vscode.LocationLink>[]; isContext: boolean; prefixRange: vscode.Range };\ntype ParsedSearchResults = Array<ParsedSearchFileLine | ParsedSearchResultLine>;\nconst isFileLine = (line: ParsedSearchResultLine | ParsedSearchFileLine): line is ParsedSearchFileLine => line.type === 'file';\nconst isResultLine = (line: ParsedSearchResultLine | ParsedSearchFileLine): line is ParsedSearchResultLine => line.type === 'result';\n\n\nfunction parseSearchResults(document: vscode.TextDocument, token?: vscode.CancellationToken): ParsedSearchResults {\n\n\tif (cachedLastParse && cachedLastParse.uri === document.uri && cachedLastParse.version === document.version) {\n\t\treturn cachedLastParse.parse;\n\t}\n\n\tconst lines = document.getText().split(/\\r?\\n/);\n\tconst links: ParsedSearchResults = [];\n\n\tlet currentTarget: vscode.Uri | undefined = undefined;\n\tlet currentTargetLocations: vscode.LocationLink[] | undefined = undefined;\n\n\tfor (let i = 0; i < lines.length; i++) {\n\t\t// TODO: This is probably always false, given we're pegging the thread...\n\t\tif (token?.isCancellationRequested) { return []; }\n\t\tconst line = lines[i];\n\n\t\tconst fileLine = FILE_LINE_REGEX.exec(line);\n\t\tif (fileLine) {\n\t\t\tconst [, path] = fileLine;\n\n\t\t\tcurrentTarget = relativePathToUri(path, document.uri);\n\t\t\tif (!currentTarget) { continue; }\n\t\t\tcurrentTargetLocations = [];\n\n\t\t\tconst location: vscode.LocationLink = {\n\t\t\t\ttargetRange: new vscode.Range(0, 0, 0, 1),\n\t\t\t\ttargetUri: currentTarget,\n\t\t\t\toriginSelectionRange: new vscode.Range(i, 0, i, line.length),\n\t\t\t};\n\n\n\t\t\tlinks[i] = { type: 'file', location, allLocations: currentTargetLocations, path };\n\t\t}\n\n\t\tif (!currentTarget) { continue; }\n\n\t\tconst resultLine = RESULT_LINE_REGEX.exec(line);\n\t\tif (resultLine) {\n\t\t\tconst [, indentation, _lineNumber, separator] = resultLine;\n\t\t\tconst lineNumber = +_lineNumber - 1;\n\t\t\tconst metadataOffset = (indentation + _lineNumber + separator).length;\n\t\t\tconst targetRange = new vscode.Range(Math.max(lineNumber - 3, 0), 0, lineNumber + 3, line.length);\n\n\t\t\tconst locations: Required<vscode.LocationLink>[] = [];\n\n\t\t\tlet lastEnd = metadataOffset;\n\t\t\tlet offset = 0;\n\t\t\tELISION_REGEX.lastIndex = metadataOffset;\n\t\t\tfor (let match: RegExpExecArray | null; (match = ELISION_REGEX.exec(line));) {\n\t\t\t\tlocations.push({\n\t\t\t\t\ttargetRange,\n\t\t\t\t\ttargetSelectionRange: new vscode.Range(lineNumber, offset, lineNumber, offset),\n\t\t\t\t\ttargetUri: currentTarget,\n\t\t\t\t\toriginSelectionRange: new vscode.Range(i, lastEnd, i, ELISION_REGEX.lastIndex - match[0].length),\n\t\t\t\t});\n\n\t\t\t\toffset += (ELISION_REGEX.lastIndex - lastEnd - match[0].length) + Number(match[1]);\n\t\t\t\tlastEnd = ELISION_REGEX.lastIndex;\n\t\t\t}\n\n\t\t\tif (lastEnd < line.length) {\n\t\t\t\tlocations.push({\n\t\t\t\t\ttargetRange,\n\t\t\t\t\ttargetSelectionRange: new vscode.Range(lineNumber, offset, lineNumber, offset),\n\t\t\t\t\ttargetUri: currentTarget,\n\t\t\t\t\toriginSelectionRange: new vscode.Range(i, lastEnd, i, line.length),\n\t\t\t\t});\n\t\t\t}\n\t\t\t// only show result lines in file-level peek\n\t\t\tif (separator.includes(':')) {\n\t\t\t\tcurrentTargetLocations?.push(...locations);\n\t\t\t}\n\n\t\t\t// Allow line number, indentation, etc to take you to definition as well.\n\t\t\tconst convenienceLocation: Required<vscode.LocationLink> = {\n\t\t\t\ttargetRange,\n\t\t\t\ttargetSelectionRange: new vscode.Range(lineNumber, 0, lineNumber, 1),\n\t\t\t\ttargetUri: currentTarget,\n\t\t\t\toriginSelectionRange: new vscode.Range(i, 0, i, metadataOffset - 1),\n\t\t\t};\n\t\t\tlocations.push(convenienceLocation);\n\t\t\tlinks[i] = { type: 'result', locations, isContext: separator === ' ', prefixRange: new vscode.Range(i, 0, i, metadataOffset) };\n\t\t}\n\t}\n\n\tcachedLastParse = {\n\t\tversion: document.version,\n\t\tparse: links,\n\t\turi: document.uri\n\t};\n\n\treturn links;\n}\n"],"names":[],"sourceRoot":""}