import { registerExtension } from '../extensions.js';

var manifest = {name:"emmet",displayName:"Emmet",description:"Emmet support for VS Code",version:"1.0.0",publisher:"vscode",license:"MIT",engines:{vscode:"^1.13.0"},icon:"images/icon.png",categories:["Other"],repository:{type:"git",url:"https://github.com/microsoft/vscode.git"},activationEvents:["onCommand:emmet.expandAbbreviation","onLanguage"],main:"./out/node/emmetNodeMain",browser:"./dist/browser/emmetBrowserMain",contributes:{configuration:{type:"object",title:"Emmet",properties:{"emmet.showExpandedAbbreviation":{type:["string"],"enum":["never","always","inMarkupAndStylesheetFilesOnly"],"default":"always",markdownDescription:"Shows expanded Emmet abbreviations as suggestions.\nThe option `\"inMarkupAndStylesheetFilesOnly\"` applies to html, haml, jade, slim, xml, xsl, css, scss, sass, less and stylus.\nThe option `\"always\"` applies to all parts of the file regardless of markup/css."},"emmet.showAbbreviationSuggestions":{type:"boolean","default":true,scope:"language-overridable",markdownDescription:"Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to `\"never\"`."},"emmet.includeLanguages":{type:"object",additionalProperties:{type:"string"},"default":{},markdownDescription:"Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and Emmet supported language.\n For example: `{\"vue-html\": \"html\", \"javascript\": \"javascriptreact\"}`"},"emmet.variables":{type:"object",properties:{lang:{type:"string","default":"en"},charset:{type:"string","default":"UTF-8"}},additionalProperties:{type:"string"},"default":{},markdownDescription:"Variables to be used in Emmet snippets."},"emmet.syntaxProfiles":{type:"object","default":{},markdownDescription:"Define profile for specified syntax or use your own profile with specific rules."},"emmet.excludeLanguages":{type:"array",items:{type:"string"},"default":["markdown"],markdownDescription:"An array of languages where Emmet abbreviations should not be expanded."},"emmet.extensionsPath":{type:"array",items:{type:"string",markdownDescription:"A path containing Emmet syntaxProfiles and/or snippets."},"default":[],scope:"machine-overridable",markdownDescription:"An array of paths, where each path can contain Emmet syntaxProfiles and/or snippet files.\nIn case of conflicts, the profiles/snippets of later paths will override those of earlier paths.\nSee https://code.visualstudio.com/docs/editor/emmet for more information and an example snippet file."},"emmet.triggerExpansionOnTab":{type:"boolean","default":false,scope:"language-overridable",markdownDescription:"When enabled, Emmet abbreviations are expanded when pressing TAB, even when completions do not show up. When disabled, completions that show up can still be accepted by pressing TAB."},"emmet.useInlineCompletions":{type:"boolean","default":false,markdownDescription:"If `true`, Emmet will use inline completions to suggest expansions. To prevent the non-inline completion item provider from showing up as often while this setting is `true`, turn `#editor.quickSuggestions#` to `inline` or `off` for the `other` item."},"emmet.preferences":{type:"object","default":{},markdownDescription:"Preferences used to modify behavior of some actions and resolvers of Emmet.",properties:{"css.intUnit":{type:"string","default":"px",markdownDescription:"Default unit for integer values."},"css.floatUnit":{type:"string","default":"em",markdownDescription:"Default unit for float values."},"css.propertyEnd":{type:"string","default":";",markdownDescription:"Symbol to be placed at the end of CSS property when expanding CSS abbreviations."},"sass.propertyEnd":{type:"string","default":"",markdownDescription:"Symbol to be placed at the end of CSS property when expanding CSS abbreviations in Sass files."},"stylus.propertyEnd":{type:"string","default":"",markdownDescription:"Symbol to be placed at the end of CSS property when expanding CSS abbreviations in Stylus files."},"css.valueSeparator":{type:"string","default":": ",markdownDescription:"Symbol to be placed at the between CSS property and value when expanding CSS abbreviations."},"sass.valueSeparator":{type:"string","default":": ",markdownDescription:"Symbol to be placed at the between CSS property and value when expanding CSS abbreviations in Sass files."},"stylus.valueSeparator":{type:"string","default":" ",markdownDescription:"Symbol to be placed at the between CSS property and value when expanding CSS abbreviations in Stylus files."},"bem.elementSeparator":{type:"string","default":"__",markdownDescription:"Element separator used for classes when using the BEM filter."},"bem.modifierSeparator":{type:"string","default":"_",markdownDescription:"Modifier separator used for classes when using the BEM filter."},"filter.commentBefore":{type:"string","default":"",markdownDescription:"A definition of comment that should be placed before matched element when comment filter is applied."},"filter.commentAfter":{type:"string","default":"\n<!-- /[#ID][.CLASS] -->",markdownDescription:"A definition of comment that should be placed after matched element when comment filter is applied."},"filter.commentTrigger":{type:"array","default":["id","class"],markdownDescription:"A comma-separated list of attribute names that should exist in the abbreviation for the comment filter to be applied."},"format.noIndentTags":{type:"array","default":["html"],markdownDescription:"An array of tag names that should never get inner indentation."},"format.forceIndentationForTags":{type:"array","default":["body"],markdownDescription:"An array of tag names that should always get inner indentation."},"profile.allowCompactBoolean":{type:"boolean","default":false,markdownDescription:"If `true`, compact notation of boolean attributes are produced."},"css.webkitProperties":{type:"string","default":null,markdownDescription:"Comma separated CSS properties that get the 'webkit' vendor prefix when used in Emmet abbreviation that starts with `-`. Set to empty string to always avoid the 'webkit' prefix."},"css.mozProperties":{type:"string","default":null,markdownDescription:"Comma separated CSS properties that get the 'moz' vendor prefix when used in Emmet abbreviation that starts with `-`. Set to empty string to always avoid the 'moz' prefix."},"css.oProperties":{type:"string","default":null,markdownDescription:"Comma separated CSS properties that get the 'o' vendor prefix when used in Emmet abbreviation that starts with `-`. Set to empty string to always avoid the 'o' prefix."},"css.msProperties":{type:"string","default":null,markdownDescription:"Comma separated CSS properties that get the 'ms' vendor prefix when used in Emmet abbreviation that starts with `-`. Set to empty string to always avoid the 'ms' prefix."},"css.fuzzySearchMinScore":{type:"number","default":0.3,markdownDescription:"The minimum score (from 0 to 1) that fuzzy-matched abbreviation should achieve. Lower values may produce many false-positive matches, higher values may reduce possible matches."},"output.inlineBreak":{type:"number","default":0,markdownDescription:"The number of sibling inline elements needed for line breaks to be placed between those elements. If `0`, inline elements are always expanded onto a single line."},"output.reverseAttributes":{type:"boolean","default":false,markdownDescription:"If `true`, reverses attribute merging directions when resolving snippets."},"output.selfClosingStyle":{type:"string","enum":["html","xhtml","xml"],"default":"html",markdownDescription:"Style of self-closing tags: html (`<br>`), xml (`<br/>`) or xhtml (`<br />`)."},"css.color.short":{type:"boolean","default":true,markdownDescription:"If `true`, color values like `#f` will be expanded to `#fff` instead of `#ffffff`."}}},"emmet.showSuggestionsAsSnippets":{type:"boolean","default":false,markdownDescription:"If `true`, then Emmet suggestions will show up as snippets allowing you to order them as per `#editor.snippetSuggestions#` setting."},"emmet.optimizeStylesheetParsing":{type:"boolean","default":true,markdownDescription:"When set to `false`, the whole file is parsed to determine if current position is valid for expanding Emmet abbreviations. When set to `true`, only the content around the current position in CSS/SCSS/Less files is parsed."}}},commands:[{command:"editor.emmet.action.wrapWithAbbreviation",title:"Wrap with Abbreviation",category:"Emmet"},{command:"editor.emmet.action.removeTag",title:"Remove Tag",category:"Emmet"},{command:"editor.emmet.action.updateTag",title:"Update Tag",category:"Emmet"},{command:"editor.emmet.action.matchTag",title:"Go to Matching Pair",category:"Emmet"},{command:"editor.emmet.action.balanceIn",title:"Balance (inward)",category:"Emmet"},{command:"editor.emmet.action.balanceOut",title:"Balance (outward)",category:"Emmet"},{command:"editor.emmet.action.prevEditPoint",title:"Go to Previous Edit Point",category:"Emmet"},{command:"editor.emmet.action.nextEditPoint",title:"Go to Next Edit Point",category:"Emmet"},{command:"editor.emmet.action.mergeLines",title:"Merge Lines",category:"Emmet"},{command:"editor.emmet.action.selectPrevItem",title:"Select Previous Item",category:"Emmet"},{command:"editor.emmet.action.selectNextItem",title:"Select Next Item",category:"Emmet"},{command:"editor.emmet.action.splitJoinTag",title:"Split/Join Tag",category:"Emmet"},{command:"editor.emmet.action.toggleComment",title:"Toggle Comment",category:"Emmet"},{command:"editor.emmet.action.evaluateMathExpression",title:"Evaluate Math Expression",category:"Emmet"},{command:"editor.emmet.action.updateImageSize",title:"Update Image Size",category:"Emmet"},{command:"editor.emmet.action.incrementNumberByOneTenth",title:"Increment by 0.1",category:"Emmet"},{command:"editor.emmet.action.incrementNumberByOne",title:"Increment by 1",category:"Emmet"},{command:"editor.emmet.action.incrementNumberByTen",title:"Increment by 10",category:"Emmet"},{command:"editor.emmet.action.decrementNumberByOneTenth",title:"Decrement by 0.1",category:"Emmet"},{command:"editor.emmet.action.decrementNumberByOne",title:"Decrement by 1",category:"Emmet"},{command:"editor.emmet.action.decrementNumberByTen",title:"Decrement by 10",category:"Emmet"},{command:"editor.emmet.action.reflectCSSValue",title:"Reflect CSS Value",category:"Emmet"},{command:"workbench.action.showEmmetCommands",title:"Show Emmet Commands",category:""}],menus:{commandPalette:[{command:"editor.emmet.action.wrapWithAbbreviation",when:"!activeEditorIsReadonly"},{command:"editor.emmet.action.removeTag",when:"!activeEditorIsReadonly"},{command:"editor.emmet.action.updateTag",when:"!activeEditorIsReadonly"},{command:"editor.emmet.action.matchTag",when:"!activeEditorIsReadonly"},{command:"editor.emmet.action.balanceIn",when:"!activeEditorIsReadonly"},{command:"editor.emmet.action.balanceOut",when:"!activeEditorIsReadonly"},{command:"editor.emmet.action.prevEditPoint",when:"!activeEditorIsReadonly"},{command:"editor.emmet.action.nextEditPoint",when:"!activeEditorIsReadonly"},{command:"editor.emmet.action.mergeLines",when:"!activeEditorIsReadonly"},{command:"editor.emmet.action.selectPrevItem",when:"!activeEditorIsReadonly"},{command:"editor.emmet.action.selectNextItem",when:"!activeEditorIsReadonly"},{command:"editor.emmet.action.splitJoinTag",when:"!activeEditorIsReadonly"},{command:"editor.emmet.action.toggleComment",when:"!activeEditorIsReadonly"},{command:"editor.emmet.action.evaluateMathExpression",when:"!activeEditorIsReadonly"},{command:"editor.emmet.action.updateImageSize",when:"!activeEditorIsReadonly"},{command:"editor.emmet.action.incrementNumberByOneTenth",when:"!activeEditorIsReadonly"},{command:"editor.emmet.action.incrementNumberByOne",when:"!activeEditorIsReadonly"},{command:"editor.emmet.action.incrementNumberByTen",when:"!activeEditorIsReadonly"},{command:"editor.emmet.action.decrementNumberByOneTenth",when:"!activeEditorIsReadonly"},{command:"editor.emmet.action.decrementNumberByOne",when:"!activeEditorIsReadonly"},{command:"editor.emmet.action.decrementNumberByTen",when:"!activeEditorIsReadonly"},{command:"editor.emmet.action.reflectCSSValue",when:"!activeEditorIsReadonly"}]}},scripts:{watch:"gulp watch-extension:emmet",compile:"gulp compile-extension:emmet",deps:"yarn add @vscode/emmet-helper"},devDependencies:{"@types/node":"16.x"},dependencies:{"@emmetio/css-parser":"ramya-rao-a/css-parser#vscode","@emmetio/html-matcher":"^0.3.3","@emmetio/math-expression":"^1.0.5","@vscode/emmet-helper":"^2.8.8","image-size":"~1.0.0","vscode-languageserver-textdocument":"^1.0.1"},capabilities:{virtualWorkspaces:true,untrustedWorkspaces:{supported:true}}};

const { registerFileUrl } = registerExtension(manifest);

registerFileUrl('./dist/browser/emmetBrowserMain.js', new URL('./emmet/emmetBrowserMain.js', import.meta.url).toString(), 'text/javascript');

registerFileUrl('dist/browser/emmetBrowserMain.js.map', new URL('./emmet/emmetBrowserMain.js.map', import.meta.url).toString(), 'application/json');
