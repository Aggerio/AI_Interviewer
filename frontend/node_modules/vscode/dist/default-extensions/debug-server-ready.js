import { registerExtension } from '../extensions.js';

var manifest = {name:"debug-server-ready",displayName:"Server Ready Action",description:"Open URI in browser if server under debugging is ready.",version:"1.0.0",publisher:"vscode",license:"MIT",engines:{vscode:"^1.32.0"},icon:"media/icon.png",activationEvents:["onDebugResolve"],capabilities:{virtualWorkspaces:false,untrustedWorkspaces:{supported:true}},enabledApiProposals:["terminalDataWriteEvent"],main:"./out/extension",scripts:{compile:"gulp compile-extension:debug-server-ready",watch:"gulp watch-extension:debug-server-ready"},contributes:{debuggers:[{type:"*",configurationAttributes:{launch:{properties:{serverReadyAction:{oneOf:[{type:"object",additionalProperties:false,markdownDescription:"Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)","default":{action:"openExternally",killOnServerStop:false},properties:{action:{type:"string","enum":["openExternally"],enumDescriptions:["Open URI externally with the default application."],markdownDescription:"What to do with the URI when the server is ready.","default":"openExternally"},pattern:{type:"string",markdownDescription:"Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.","default":"listening on port ([0-9]+)"},uriFormat:{type:"string",markdownDescription:"A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.","default":"http://localhost:%s"},killOnServerStop:{type:"boolean",markdownDescription:"Stop the child session when the parent session stopped.","default":false}}},{type:"object",additionalProperties:false,markdownDescription:"Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)","default":{action:"debugWithEdge",pattern:"listening on port ([0-9]+)",uriFormat:"http://localhost:%s",webRoot:"${workspaceFolder}",killOnServerStop:false},properties:{action:{type:"string","enum":["debugWithChrome","debugWithEdge"],enumDescriptions:["Start debugging with the 'Debugger for Chrome'."],markdownDescription:"What to do with the URI when the server is ready.","default":"debugWithEdge"},pattern:{type:"string",markdownDescription:"Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.","default":"listening on port ([0-9]+)"},uriFormat:{type:"string",markdownDescription:"A format string used when constructing the URI from a port number. The first '%s' is substituted with the port number.","default":"http://localhost:%s"},webRoot:{type:"string",markdownDescription:"Value passed to the debug configuration for the 'Debugger for Chrome'.","default":"${workspaceFolder}"},killOnServerStop:{type:"boolean",markdownDescription:"Stop the child session when the parent session stopped.","default":false}}},{type:"object",additionalProperties:false,markdownDescription:"Act upon a URI when a server program under debugging is ready (indicated by sending output of the form 'listening on port 3000' or 'Now listening on: https://localhost:5001' to the debug console.)","default":{action:"startDebugging",name:"<launch browser config name>",killOnServerStop:false},required:["name"],properties:{action:{type:"string","enum":["startDebugging"],enumDescriptions:["Run another launch configuration."],markdownDescription:"What to do with the URI when the server is ready.","default":"startDebugging"},pattern:{type:"string",markdownDescription:"Server is ready if this pattern appears on the debug console. The first capture group must include a URI or a port number.","default":"listening on port ([0-9]+)"},name:{type:"string",markdownDescription:"Name of the launch configuration to run.","default":"Launch Browser"},killOnServerStop:{type:"boolean",markdownDescription:"Stop the child session when the parent session stopped.","default":false}}}]}}}}}]},devDependencies:{"@types/node":"16.x"},repository:{type:"git",url:"https://github.com/microsoft/vscode.git"}};

registerExtension(manifest);
