import { registerExtension } from '../extensions.js';

var manifest = {name:"git",displayName:"Git",description:"Git SCM Integration",publisher:"vscode",license:"MIT",version:"1.0.0",engines:{vscode:"^1.5.0"},aiKey:"0c6ae279ed8443289764825290e4f9e2-1a736e7c-1324-4338-be46-fc2a58ae4d14-7255",enabledApiProposals:["diffCommand","contribEditorContentMenu","contribEditSessions","canonicalUriProvider","contribViewsWelcome","editSessionIdentityProvider","quickDiffProvider","scmActionButton","scmSelectedProvider","scmValidation","tabInputTextMerge","timeline","contribMergeEditorMenus"],categories:["Other"],activationEvents:["*","onEditSession:file","onFileSystem:git","onFileSystem:git-show"],extensionDependencies:["vscode.git-base"],main:"./out/main",icon:"resources/icons/git.png",scripts:{compile:"gulp compile-extension:git",watch:"gulp watch-extension:git","update-emoji":"node ./build/update-emoji.js",test:"node ../../node_modules/mocha/bin/mocha"},capabilities:{virtualWorkspaces:true,untrustedWorkspaces:{supported:false}},contributes:{commands:[{command:"git.continueInLocalClone",title:"Clone Repository Locally and Open on Desktop...",category:"Git",icon:"$(repo-clone)",enablement:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && remoteName"},{command:"git.clone",title:"Clone",category:"Git",enablement:"!operationInProgress"},{command:"git.cloneRecursive",title:"Clone (Recursive)",category:"Git",enablement:"!operationInProgress"},{command:"git.init",title:"Initialize Repository",category:"Git",icon:"$(add)",enablement:"!operationInProgress"},{command:"git.openRepository",title:"Open Repository",category:"Git",enablement:"!operationInProgress"},{command:"git.reopenClosedRepositories",title:"Reopen Closed Repositories...",category:"Git",enablement:"!operationInProgress && git.closedRepositoryCount != 0"},{command:"git.close",title:"Close Repository",category:"Git",enablement:"!operationInProgress"},{command:"git.refresh",title:"Refresh",category:"Git",icon:"$(refresh)",enablement:"!operationInProgress"},{command:"git.openChange",title:"Open Changes",category:"Git",icon:"$(compare-changes)"},{command:"git.openAllChanges",title:"Open All Changes",category:"Git"},{command:"git.openFile",title:"Open File",category:"Git",icon:"$(go-to-file)"},{command:"git.openFile2",title:"Open File",category:"Git",icon:"$(go-to-file)"},{command:"git.openHEADFile",title:"Open File (HEAD)",category:"Git"},{command:"git.stage",title:"Stage Changes",category:"Git",icon:"$(add)",enablement:"!operationInProgress"},{command:"git.stageAll",title:"Stage All Changes",category:"Git",icon:"$(add)",enablement:"!operationInProgress"},{command:"git.stageAllTracked",title:"Stage All Tracked Changes",category:"Git",icon:"$(add)",enablement:"!operationInProgress"},{command:"git.stageAllUntracked",title:"Stage All Untracked Changes",category:"Git",icon:"$(add)",enablement:"!operationInProgress"},{command:"git.stageAllMerge",title:"Stage All Merge Changes",category:"Git",icon:"$(add)",enablement:"!operationInProgress"},{command:"git.stageSelectedRanges",title:"Stage Selected Ranges",category:"Git",enablement:"!operationInProgress"},{command:"git.revertSelectedRanges",title:"Revert Selected Ranges",category:"Git",enablement:"!operationInProgress"},{command:"git.stageChange",title:"Stage Change",category:"Git",icon:"$(add)",enablement:"!operationInProgress"},{command:"git.revertChange",title:"Revert Change",category:"Git",icon:"$(discard)",enablement:"!operationInProgress"},{command:"git.unstage",title:"Unstage Changes",category:"Git",icon:"$(remove)",enablement:"!operationInProgress"},{command:"git.unstageAll",title:"Unstage All Changes",category:"Git",icon:"$(remove)",enablement:"!operationInProgress"},{command:"git.unstageSelectedRanges",title:"Unstage Selected Ranges",category:"Git",enablement:"!operationInProgress"},{command:"git.clean",title:"Discard Changes",category:"Git",icon:"$(discard)",enablement:"!operationInProgress"},{command:"git.cleanAll",title:"Discard All Changes",category:"Git",icon:"$(discard)",enablement:"!operationInProgress"},{command:"git.cleanAllTracked",title:"Discard All Tracked Changes",category:"Git",icon:"$(discard)",enablement:"!operationInProgress"},{command:"git.cleanAllUntracked",title:"Discard All Untracked Changes",category:"Git",icon:"$(discard)",enablement:"!operationInProgress"},{command:"git.rename",title:"Rename",category:"Git",icon:"$(discard)",enablement:"!operationInProgress"},{command:"git.commit",title:"Commit",category:"Git",icon:"$(check)",enablement:"!operationInProgress"},{command:"git.commitAmend",title:"Commit (Amend)",category:"Git",icon:"$(check)",enablement:"!operationInProgress"},{command:"git.commitSigned",title:"Commit (Signed Off)",category:"Git",icon:"$(check)",enablement:"!operationInProgress"},{command:"git.commitStaged",title:"Commit Staged",category:"Git",enablement:"!operationInProgress"},{command:"git.commitEmpty",title:"Commit Empty",category:"Git",enablement:"!operationInProgress"},{command:"git.commitStagedSigned",title:"Commit Staged (Signed Off)",category:"Git",enablement:"!operationInProgress"},{command:"git.commitStagedAmend",title:"Commit Staged (Amend)",category:"Git",enablement:"!operationInProgress"},{command:"git.commitAll",title:"Commit All",category:"Git",enablement:"!operationInProgress"},{command:"git.commitAllSigned",title:"Commit All (Signed Off)",category:"Git",enablement:"!operationInProgress"},{command:"git.commitAllAmend",title:"Commit All (Amend)",category:"Git",enablement:"!operationInProgress"},{command:"git.commitNoVerify",title:"Commit (No Verify)",category:"Git",icon:"$(check)",enablement:"!operationInProgress"},{command:"git.commitStagedNoVerify",title:"Commit Staged (No Verify)",category:"Git",enablement:"!operationInProgress"},{command:"git.commitEmptyNoVerify",title:"Commit Empty (No Verify)",category:"Git",enablement:"!operationInProgress"},{command:"git.commitStagedSignedNoVerify",title:"Commit Staged (Signed Off, No Verify)",category:"Git",enablement:"!operationInProgress"},{command:"git.commitAmendNoVerify",title:"Commit (Amend, No Verify)",category:"Git",enablement:"!operationInProgress"},{command:"git.commitSignedNoVerify",title:"Commit (Signed Off, No Verify)",category:"Git",enablement:"!operationInProgress"},{command:"git.commitStagedAmendNoVerify",title:"Commit Staged (Amend, No Verify)",category:"Git",enablement:"!operationInProgress"},{command:"git.commitAllNoVerify",title:"Commit All (No Verify)",category:"Git",enablement:"!operationInProgress"},{command:"git.commitAllSignedNoVerify",title:"Commit All (Signed Off, No Verify)",category:"Git",enablement:"!operationInProgress"},{command:"git.commitAllAmendNoVerify",title:"Commit All (Amend, No Verify)",category:"Git",enablement:"!operationInProgress"},{command:"git.commitMessageAccept",title:"Accept Commit Message",icon:"$(check)",category:"Git"},{command:"git.commitMessageDiscard",title:"Discard Commit Message",icon:"$(discard)",category:"Git"},{command:"git.restoreCommitTemplate",title:"Restore Commit Template",category:"Git",enablement:"!operationInProgress"},{command:"git.undoCommit",title:"Undo Last Commit",category:"Git",enablement:"!operationInProgress"},{command:"git.checkout",title:"Checkout to...",category:"Git",enablement:"!operationInProgress"},{command:"git.checkoutDetached",title:"Checkout to (Detached)...",category:"Git",enablement:"!operationInProgress"},{command:"git.branch",title:"Create Branch...",category:"Git",enablement:"!operationInProgress"},{command:"git.branchFrom",title:"Create Branch From...",category:"Git",enablement:"!operationInProgress"},{command:"git.deleteBranch",title:"Delete Branch...",category:"Git",enablement:"!operationInProgress"},{command:"git.renameBranch",title:"Rename Branch...",category:"Git",enablement:"!operationInProgress"},{command:"git.merge",title:"Merge Branch...",category:"Git",enablement:"!operationInProgress"},{command:"git.mergeAbort",title:"Abort Merge",category:"Git",enablement:"gitMergeInProgress"},{command:"git.rebase",title:"Rebase Branch...",category:"Git",enablement:"!operationInProgress"},{command:"git.createTag",title:"Create Tag",category:"Git",enablement:"!operationInProgress"},{command:"git.deleteTag",title:"Delete Tag",category:"Git",enablement:"!operationInProgress"},{command:"git.deleteRemoteTag",title:"Delete Remote Tag",category:"Git",enablement:"!operationInProgress"},{command:"git.fetch",title:"Fetch",category:"Git",enablement:"!operationInProgress"},{command:"git.fetchPrune",title:"Fetch (Prune)",category:"Git",enablement:"!operationInProgress"},{command:"git.fetchAll",title:"Fetch From All Remotes",category:"Git",enablement:"!operationInProgress"},{command:"git.pull",title:"Pull",category:"Git",enablement:"!operationInProgress"},{command:"git.pullRebase",title:"Pull (Rebase)",category:"Git",enablement:"!operationInProgress"},{command:"git.pullFrom",title:"Pull from...",category:"Git",enablement:"!operationInProgress"},{command:"git.push",title:"Push",category:"Git",enablement:"!operationInProgress"},{command:"git.pushForce",title:"Push (Force)",category:"Git",enablement:"!operationInProgress"},{command:"git.pushTo",title:"Push to...",category:"Git",enablement:"!operationInProgress"},{command:"git.pushToForce",title:"Push to... (Force)",category:"Git",enablement:"!operationInProgress"},{command:"git.pushTags",title:"Push Tags",category:"Git",enablement:"!operationInProgress"},{command:"git.pushWithTags",title:"Push (Follow Tags)",category:"Git",enablement:"!operationInProgress"},{command:"git.pushWithTagsForce",title:"Push (Follow Tags, Force)",category:"Git",enablement:"!operationInProgress"},{command:"git.cherryPick",title:"Cherry Pick...",category:"Git",enablement:"!operationInProgress"},{command:"git.addRemote",title:"Add Remote...",category:"Git",enablement:"!operationInProgress"},{command:"git.removeRemote",title:"Remove Remote",category:"Git",enablement:"!operationInProgress"},{command:"git.sync",title:"Sync",category:"Git",enablement:"!operationInProgress"},{command:"git.syncRebase",title:"Sync (Rebase)",category:"Git",enablement:"!operationInProgress"},{command:"git.publish",title:"Publish Branch...",category:"Git",enablement:"!operationInProgress"},{command:"git.showOutput",title:"Show Git Output",category:"Git"},{command:"git.ignore",title:"Add to .gitignore",category:"Git",enablement:"!operationInProgress"},{command:"git.revealInExplorer",title:"Reveal in Explorer View",category:"Git"},{command:"git.revealFileInOS.linux",title:"Open Containing Folder",category:"Git"},{command:"git.revealFileInOS.mac",title:"Reveal in Finder",category:"Git"},{command:"git.revealFileInOS.windows",title:"Reveal in File Explorer",category:"Git"},{command:"git.stashIncludeUntracked",title:"Stash (Include Untracked)",category:"Git",enablement:"!operationInProgress"},{command:"git.stash",title:"Stash",category:"Git",enablement:"!operationInProgress"},{command:"git.stashStaged",title:"Stash Staged",category:"Git",enablement:"!operationInProgress && gitVersion2.35"},{command:"git.stashPop",title:"Pop Stash...",category:"Git",enablement:"!operationInProgress"},{command:"git.stashPopLatest",title:"Pop Latest Stash",category:"Git",enablement:"!operationInProgress"},{command:"git.stashApply",title:"Apply Stash...",category:"Git",enablement:"!operationInProgress"},{command:"git.stashApplyLatest",title:"Apply Latest Stash",category:"Git",enablement:"!operationInProgress"},{command:"git.stashDrop",title:"Drop Stash...",category:"Git",enablement:"!operationInProgress"},{command:"git.stashDropAll",title:"Drop All Stashes...",category:"Git",enablement:"!operationInProgress"},{command:"git.timeline.openDiff",title:"Open Changes",icon:"$(compare-changes)",category:"Git"},{command:"git.timeline.copyCommitId",title:"Copy Commit ID",category:"Git"},{command:"git.timeline.copyCommitMessage",title:"Copy Commit Message",category:"Git"},{command:"git.timeline.selectForCompare",title:"Select for Compare",category:"Git"},{command:"git.timeline.compareWithSelected",title:"Compare with Selected",category:"Git"},{command:"git.rebaseAbort",title:"Abort Rebase",category:"Git",enablement:"gitRebaseInProgress"},{command:"git.closeAllDiffEditors",title:"Close All Diff Editors",category:"Git",enablement:"!operationInProgress"},{command:"git.api.getRepositories",title:"Get Repositories",category:"Git API"},{command:"git.api.getRepositoryState",title:"Get Repository State",category:"Git API"},{command:"git.api.getRemoteSources",title:"Get Remote Sources",category:"Git API"},{command:"git.acceptMerge",title:"Complete Merge",category:"Git",enablement:"isMergeEditor && mergeEditorResultUri in git.mergeChanges"},{command:"git.openMergeEditor",title:"Resolve in Merge Editor",category:"Git"},{command:"git.runGitMerge",title:"Compute Conflicts With Git",category:"Git",enablement:"isMergeEditor"},{command:"git.runGitMergeDiff3",title:"Compute Conflicts With Git (Diff3)",category:"Git",enablement:"isMergeEditor"},{command:"git.manageUnsafeRepositories",title:"Manage Unsafe Repositories",category:"Git"},{command:"git.openRepositoriesInParentFolders",title:"Open Repositories In Parent Folders",category:"Git"}],continueEditSession:[{command:"git.continueInLocalClone",qualifiedName:"Continue Working in New Local Clone",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && remoteName",remoteGroup:"remote_42_git_0_local@0"}],keybindings:[{command:"git.stageSelectedRanges",key:"ctrl+k ctrl+alt+s",mac:"cmd+k cmd+alt+s",when:"isInDiffEditor"},{command:"git.unstageSelectedRanges",key:"ctrl+k ctrl+n",mac:"cmd+k cmd+n",when:"isInDiffEditor"},{command:"git.revertSelectedRanges",key:"ctrl+k ctrl+r",mac:"cmd+k cmd+r",when:"isInDiffEditor"}],menus:{commandPalette:[{command:"git.continueInLocalClone",when:"false"},{command:"git.clone",when:"config.git.enabled && !git.missing"},{command:"git.cloneRecursive",when:"config.git.enabled && !git.missing"},{command:"git.init",when:"config.git.enabled && !git.missing && remoteName != 'codespaces'"},{command:"git.openRepository",when:"config.git.enabled && !git.missing"},{command:"git.close",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.refresh",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.openFile",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && resourceScheme == file && scmActiveResourceHasChanges"},{command:"git.openHEADFile",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && resourceScheme == file && scmActiveResourceHasChanges"},{command:"git.openChange",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.stage",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.stageAll",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.stageAllTracked",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.stageAllUntracked",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.stageAllMerge",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.stageSelectedRanges",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && resourceScheme =~ /^git$|^file$/"},{command:"git.stageChange",when:"false"},{command:"git.revertSelectedRanges",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && resourceScheme =~ /^git$|^file$/"},{command:"git.revertChange",when:"false"},{command:"git.openFile2",when:"false"},{command:"git.unstage",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.unstageAll",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.unstageSelectedRanges",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"},{command:"git.clean",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.cleanAll",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.cleanAllTracked",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.cleanAllUntracked",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.rename",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && resourceScheme == file && scmActiveResourceRepository"},{command:"git.commit",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.commitAmend",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.commitSigned",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.commitStaged",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.commitEmpty",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.commitStagedSigned",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.commitStagedAmend",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.commitAll",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.commitAllSigned",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.commitAllAmend",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.rebaseAbort",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && gitRebaseInProgress"},{command:"git.commitNoVerify",when:"config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"},{command:"git.commitStagedNoVerify",when:"config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"},{command:"git.commitEmptyNoVerify",when:"config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"},{command:"git.commitStagedSignedNoVerify",when:"config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"},{command:"git.commitAmendNoVerify",when:"config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"},{command:"git.commitSignedNoVerify",when:"config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"},{command:"git.commitStagedAmendNoVerify",when:"config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"},{command:"git.commitAllNoVerify",when:"config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"},{command:"git.commitAllSignedNoVerify",when:"config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"},{command:"git.commitAllAmendNoVerify",when:"config.git.enabled && !git.missing && config.git.allowNoVerifyCommit && gitOpenRepositoryCount != 0"},{command:"git.restoreCommitTemplate",when:"false"},{command:"git.commitMessageAccept",when:"false"},{command:"git.commitMessageDiscard",when:"false"},{command:"git.revealInExplorer",when:"false"},{command:"git.revealFileInOS.linux",when:"false"},{command:"git.revealFileInOS.mac",when:"false"},{command:"git.revealFileInOS.windows",when:"false"},{command:"git.undoCommit",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.checkout",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.branch",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.branchFrom",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.deleteBranch",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.renameBranch",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.cherryPick",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.pull",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.pullFrom",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.pullRebase",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.merge",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.mergeAbort",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && gitMergeInProgress"},{command:"git.rebase",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.createTag",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.deleteTag",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.deleteRemoteTag",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.fetch",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.fetchPrune",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.fetchAll",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.push",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.pushForce",when:"config.git.enabled && !git.missing && config.git.allowForcePush && gitOpenRepositoryCount != 0"},{command:"git.pushTo",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.pushToForce",when:"config.git.enabled && !git.missing && config.git.allowForcePush && gitOpenRepositoryCount != 0"},{command:"git.pushWithTags",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.pushWithTagsForce",when:"config.git.enabled && !git.missing && config.git.allowForcePush && gitOpenRepositoryCount != 0"},{command:"git.pushTags",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.addRemote",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.removeRemote",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.sync",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.syncRebase",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.publish",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.showOutput",when:"config.git.enabled"},{command:"git.ignore",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && resourceScheme == file && scmActiveResourceRepository"},{command:"git.stashIncludeUntracked",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.stash",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.stashStaged",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && gitVersion2.35"},{command:"git.stashPop",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.stashPopLatest",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.stashApply",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.stashApplyLatest",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.stashDrop",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.stashDropAll",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.timeline.openDiff",when:"false"},{command:"git.timeline.copyCommitId",when:"false"},{command:"git.timeline.copyCommitMessage",when:"false"},{command:"git.timeline.selectForCompare",when:"false"},{command:"git.timeline.compareWithSelected",when:"false"},{command:"git.closeAllDiffEditors",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0"},{command:"git.api.getRepositories",when:"false"},{command:"git.api.getRepositoryState",when:"false"},{command:"git.api.getRemoteSources",when:"false"},{command:"git.openMergeEditor",when:"false"},{command:"git.manageUnsafeRepositories",when:"config.git.enabled && !git.missing && git.unsafeRepositoryCount != 0"},{command:"git.openRepositoriesInParentFolders",when:"config.git.enabled && !git.missing && git.parentRepositoryCount != 0"}],"scm/title":[{command:"git.commit",group:"navigation",when:"scmProvider == git"},{command:"git.refresh",group:"navigation",when:"scmProvider == git"},{command:"git.pull",group:"1_header@1",when:"scmProvider == git"},{command:"git.push",group:"1_header@2",when:"scmProvider == git"},{command:"git.clone",group:"1_header@3",when:"scmProvider == git"},{command:"git.checkout",group:"1_header@4",when:"scmProvider == git"},{command:"git.fetch",group:"1_header@5",when:"scmProvider == git"},{submenu:"git.commit",group:"2_main@1",when:"scmProvider == git"},{submenu:"git.changes",group:"2_main@2",when:"scmProvider == git"},{submenu:"git.pullpush",group:"2_main@3",when:"scmProvider == git"},{submenu:"git.branch",group:"2_main@4",when:"scmProvider == git"},{submenu:"git.remotes",group:"2_main@5",when:"scmProvider == git"},{submenu:"git.stash",group:"2_main@6",when:"scmProvider == git"},{submenu:"git.tags",group:"2_main@7",when:"scmProvider == git"},{command:"git.showOutput",group:"3_footer",when:"scmProvider == git"}],"scm/sourceControl":[{command:"git.close",group:"navigation",when:"scmProvider == git"}],"scm/resourceGroup/context":[{command:"git.stageAllMerge",when:"scmProvider == git && scmResourceGroup == merge",group:"1_modification"},{command:"git.stageAllMerge",when:"scmProvider == git && scmResourceGroup == merge",group:"inline@2"},{command:"git.unstageAll",when:"scmProvider == git && scmResourceGroup == index",group:"1_modification"},{command:"git.unstageAll",when:"scmProvider == git && scmResourceGroup == index",group:"inline@2"},{command:"git.cleanAll",when:"scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges == mixed",group:"1_modification"},{command:"git.stageAll",when:"scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges == mixed",group:"1_modification"},{command:"git.cleanAll",when:"scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges == mixed",group:"inline@2"},{command:"git.stageAll",when:"scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges == mixed",group:"inline@2"},{command:"git.cleanAllTracked",when:"scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges != mixed",group:"1_modification"},{command:"git.stageAllTracked",when:"scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges != mixed",group:"1_modification"},{command:"git.cleanAllTracked",when:"scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges != mixed",group:"inline@2"},{command:"git.stageAllTracked",when:"scmProvider == git && scmResourceGroup == workingTree && config.git.untrackedChanges != mixed",group:"inline@2"},{command:"git.cleanAllUntracked",when:"scmProvider == git && scmResourceGroup == untracked",group:"1_modification"},{command:"git.stageAllUntracked",when:"scmProvider == git && scmResourceGroup == untracked",group:"1_modification"},{command:"git.cleanAllUntracked",when:"scmProvider == git && scmResourceGroup == untracked",group:"inline@2"},{command:"git.stageAllUntracked",when:"scmProvider == git && scmResourceGroup == untracked",group:"inline@2"}],"scm/resourceFolder/context":[{command:"git.stage",when:"scmProvider == git && scmResourceGroup == merge",group:"1_modification"},{command:"git.stage",when:"scmProvider == git && scmResourceGroup == merge",group:"inline@2"},{command:"git.unstage",when:"scmProvider == git && scmResourceGroup == index",group:"1_modification"},{command:"git.unstage",when:"scmProvider == git && scmResourceGroup == index",group:"inline@2"},{command:"git.stage",when:"scmProvider == git && scmResourceGroup == workingTree",group:"1_modification"},{command:"git.clean",when:"scmProvider == git && scmResourceGroup == workingTree",group:"1_modification"},{command:"git.clean",when:"scmProvider == git && scmResourceGroup == workingTree",group:"inline@2"},{command:"git.stage",when:"scmProvider == git && scmResourceGroup == workingTree",group:"inline@2"},{command:"git.ignore",when:"scmProvider == git && scmResourceGroup == workingTree",group:"1_modification@3"},{command:"git.stage",when:"scmProvider == git && scmResourceGroup == untracked",group:"1_modification"},{command:"git.stage",when:"scmProvider == git && scmResourceGroup == untracked",group:"inline@2"},{command:"git.clean",when:"scmProvider == git && scmResourceGroup == untracked",group:"1_modification"},{command:"git.clean",when:"scmProvider == git && scmResourceGroup == untracked",group:"inline@2"},{command:"git.ignore",when:"scmProvider == git && scmResourceGroup == untracked",group:"1_modification@3"}],"scm/resourceState/context":[{command:"git.stage",when:"scmProvider == git && scmResourceGroup == merge",group:"1_modification"},{command:"git.openFile",when:"scmProvider == git && scmResourceGroup == merge",group:"navigation"},{command:"git.stage",when:"scmProvider == git && scmResourceGroup == merge",group:"inline@2"},{command:"git.revealInExplorer",when:"scmProvider == git && scmResourceGroup == merge",group:"2_view@1"},{command:"git.revealFileInOS.linux",when:"scmProvider == git && scmResourceGroup == merge && remoteName == '' && isLinux",group:"2_view@2"},{command:"git.revealFileInOS.mac",when:"scmProvider == git && scmResourceGroup == merge && remoteName == '' && isMac",group:"2_view@2"},{command:"git.revealFileInOS.windows",when:"scmProvider == git && scmResourceGroup == merge && remoteName == '' && isWindows",group:"2_view@2"},{command:"git.openFile2",when:"scmProvider == git && scmResourceGroup == merge && config.git.showInlineOpenFileAction && config.git.openDiffOnClick",group:"inline@1"},{command:"git.openChange",when:"scmProvider == git && scmResourceGroup == merge && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick",group:"inline@1"},{command:"git.openChange",when:"scmProvider == git && scmResourceGroup == index",group:"navigation"},{command:"git.openFile",when:"scmProvider == git && scmResourceGroup == index",group:"navigation"},{command:"git.openHEADFile",when:"scmProvider == git && scmResourceGroup == index",group:"navigation"},{command:"git.unstage",when:"scmProvider == git && scmResourceGroup == index",group:"1_modification"},{command:"git.unstage",when:"scmProvider == git && scmResourceGroup == index",group:"inline@2"},{command:"git.revealInExplorer",when:"scmProvider == git && scmResourceGroup == index",group:"2_view@1"},{command:"git.revealFileInOS.linux",when:"scmProvider == git && scmResourceGroup == index && remoteName == '' && isLinux",group:"2_view@2"},{command:"git.revealFileInOS.mac",when:"scmProvider == git && scmResourceGroup == index && remoteName == '' && isMac",group:"2_view@2"},{command:"git.revealFileInOS.windows",when:"scmProvider == git && scmResourceGroup == index && remoteName == '' && isWindows",group:"2_view@2"},{command:"git.openFile2",when:"scmProvider == git && scmResourceGroup == index && config.git.showInlineOpenFileAction && config.git.openDiffOnClick",group:"inline@1"},{command:"git.openChange",when:"scmProvider == git && scmResourceGroup == index && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick",group:"inline@1"},{command:"git.openChange",when:"scmProvider == git && scmResourceGroup == workingTree",group:"navigation"},{command:"git.openHEADFile",when:"scmProvider == git && scmResourceGroup == workingTree",group:"navigation"},{command:"git.openFile",when:"scmProvider == git && scmResourceGroup == workingTree",group:"navigation"},{command:"git.stage",when:"scmProvider == git && scmResourceGroup == workingTree",group:"1_modification"},{command:"git.clean",when:"scmProvider == git && scmResourceGroup == workingTree",group:"1_modification"},{command:"git.clean",when:"scmProvider == git && scmResourceGroup == workingTree",group:"inline@2"},{command:"git.stage",when:"scmProvider == git && scmResourceGroup == workingTree",group:"inline@2"},{command:"git.openFile2",when:"scmProvider == git && scmResourceGroup == workingTree && config.git.showInlineOpenFileAction && config.git.openDiffOnClick",group:"inline@1"},{command:"git.openChange",when:"scmProvider == git && scmResourceGroup == workingTree && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick",group:"inline@1"},{command:"git.ignore",when:"scmProvider == git && scmResourceGroup == workingTree",group:"1_modification@3"},{command:"git.revealInExplorer",when:"scmProvider == git && scmResourceGroup == workingTree",group:"2_view@1"},{command:"git.revealFileInOS.linux",when:"scmProvider == git && scmResourceGroup == workingTree && remoteName == '' && isLinux",group:"2_view@2"},{command:"git.revealFileInOS.mac",when:"scmProvider == git && scmResourceGroup == workingTree && remoteName == '' && isMac",group:"2_view@2"},{command:"git.revealFileInOS.windows",when:"scmProvider == git && scmResourceGroup == workingTree && remoteName == '' && isWindows",group:"2_view@2"},{command:"git.openChange",when:"scmProvider == git && scmResourceGroup == untracked",group:"navigation"},{command:"git.openHEADFile",when:"scmProvider == git && scmResourceGroup == untracked",group:"navigation"},{command:"git.openFile",when:"scmProvider == git && scmResourceGroup == untracked",group:"navigation"},{command:"git.stage",when:"scmProvider == git && scmResourceGroup == untracked",group:"1_modification"},{command:"git.clean",when:"scmProvider == git && scmResourceGroup == untracked && !gitFreshRepository",group:"1_modification"},{command:"git.clean",when:"scmProvider == git && scmResourceGroup == untracked && !gitFreshRepository",group:"inline@2"},{command:"git.stage",when:"scmProvider == git && scmResourceGroup == untracked",group:"inline@2"},{command:"git.openFile2",when:"scmProvider == git && scmResourceGroup == untracked && config.git.showInlineOpenFileAction && config.git.openDiffOnClick",group:"inline@1"},{command:"git.openChange",when:"scmProvider == git && scmResourceGroup == untracked && config.git.showInlineOpenFileAction && !config.git.openDiffOnClick",group:"inline@1"},{command:"git.ignore",when:"scmProvider == git && scmResourceGroup == untracked",group:"1_modification@3"}],"editor/title":[{command:"git.openFile",group:"navigation",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"},{command:"git.openFile",group:"navigation",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInNotebookTextDiffEditor && resourceScheme =~ /^git$|^file$/"},{command:"git.openChange",group:"navigation",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && !isInDiffEditor && !isMergeEditor && resourceScheme == file && scmActiveResourceHasChanges"},{command:"git.commitMessageAccept",group:"navigation",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && editorLangId == git-commit"},{command:"git.commitMessageDiscard",group:"navigation",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && editorLangId == git-commit"},{command:"git.stageSelectedRanges",group:"2_git@1",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"},{command:"git.unstageSelectedRanges",group:"2_git@2",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"},{command:"git.revertSelectedRanges",group:"2_git@3",when:"config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"}],"editor/context":[{command:"git.stageSelectedRanges",group:"2_git@1",when:"isInDiffRightEditor && !isEmbeddedDiffEditor && config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"},{command:"git.unstageSelectedRanges",group:"2_git@2",when:"isInDiffRightEditor && !isEmbeddedDiffEditor && config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"},{command:"git.revertSelectedRanges",group:"2_git@3",when:"isInDiffRightEditor && !isEmbeddedDiffEditor && config.git.enabled && !git.missing && gitOpenRepositoryCount != 0 && isInDiffEditor && resourceScheme =~ /^git$|^file$/"}],"editor/content":[{command:"git.acceptMerge",when:"isMergeResultEditor && mergeEditorBaseUri =~ /^(git|file):/ && mergeEditorResultUri in git.mergeChanges"},{command:"git.openMergeEditor",group:"navigation@-10",when:"config.git.enabled && !git.missing && !isInDiffEditor && !isMergeEditor && resource in git.mergeChanges"}],"scm/change/title":[{command:"git.stageChange",when:"config.git.enabled && !git.missing && originalResourceScheme == git"},{command:"git.revertChange",when:"config.git.enabled && !git.missing && originalResourceScheme == git"}],"timeline/item/context":[{command:"git.timeline.openDiff",group:"1_actions",when:"config.git.enabled && !git.missing && timelineItem =~ /git:file\\b/ && !listMultiSelection"},{command:"git.timeline.compareWithSelected",group:"3_compare@1",when:"config.git.enabled && !git.missing && git.timeline.selectedForCompare && timelineItem =~ /git:file\\b/ && !listMultiSelection"},{command:"git.timeline.selectForCompare",group:"3_compare@2",when:"config.git.enabled && !git.missing && timelineItem =~ /git:file\\b/ && !listMultiSelection"},{command:"git.timeline.copyCommitId",group:"5_copy@1",when:"config.git.enabled && !git.missing && timelineItem =~ /git:file:commit\\b/ && !listMultiSelection"},{command:"git.timeline.copyCommitMessage",group:"5_copy@2",when:"config.git.enabled && !git.missing && timelineItem =~ /git:file:commit\\b/ && !listMultiSelection"}],"git.commit":[{command:"git.commit",group:"1_commit@1"},{command:"git.commitStaged",group:"1_commit@2"},{command:"git.commitAll",group:"1_commit@3"},{command:"git.undoCommit",group:"1_commit@4"},{command:"git.rebaseAbort",group:"1_commit@5"},{command:"git.commitNoVerify",group:"2_commit_noverify@1",when:"config.git.allowNoVerifyCommit"},{command:"git.commitStagedNoVerify",group:"2_commit_noverify@2",when:"config.git.allowNoVerifyCommit"},{command:"git.commitAllNoVerify",group:"2_commit_noverify@3",when:"config.git.allowNoVerifyCommit"},{command:"git.commitAmend",group:"3_amend@1"},{command:"git.commitStagedAmend",group:"3_amend@2"},{command:"git.commitAllAmend",group:"3_amend@3"},{command:"git.commitAmendNoVerify",group:"4_amend_noverify@1",when:"config.git.allowNoVerifyCommit"},{command:"git.commitStagedAmendNoVerify",group:"4_amend_noverify@2",when:"config.git.allowNoVerifyCommit"},{command:"git.commitAllAmendNoVerify",group:"4_amend_noverify@3",when:"config.git.allowNoVerifyCommit"},{command:"git.commitSigned",group:"5_signoff@1"},{command:"git.commitStagedSigned",group:"5_signoff@2"},{command:"git.commitAllSigned",group:"5_signoff@3"},{command:"git.commitSignedNoVerify",group:"6_signoff_noverify@1",when:"config.git.allowNoVerifyCommit"},{command:"git.commitStagedSignedNoVerify",group:"6_signoff_noverify@2",when:"config.git.allowNoVerifyCommit"},{command:"git.commitAllSignedNoVerify",group:"6_signoff_noverify@3",when:"config.git.allowNoVerifyCommit"}],"git.changes":[{command:"git.stageAll",group:"changes@1"},{command:"git.unstageAll",group:"changes@2"},{command:"git.cleanAll",group:"changes@3"}],"git.pullpush":[{command:"git.sync",group:"1_sync@1"},{command:"git.syncRebase",when:"gitState == idle",group:"1_sync@2"},{command:"git.pull",group:"2_pull@1"},{command:"git.pullRebase",group:"2_pull@2"},{command:"git.pullFrom",group:"2_pull@3"},{command:"git.push",group:"3_push@1"},{command:"git.pushForce",when:"config.git.allowForcePush",group:"3_push@2"},{command:"git.pushTo",group:"3_push@3"},{command:"git.pushToForce",when:"config.git.allowForcePush",group:"3_push@4"},{command:"git.fetch",group:"4_fetch@1"},{command:"git.fetchPrune",group:"4_fetch@2"},{command:"git.fetchAll",group:"4_fetch@3"}],"git.branch":[{command:"git.merge",group:"1_merge@1"},{command:"git.rebase",group:"1_merge@2"},{command:"git.branch",group:"2_branch@1"},{command:"git.branchFrom",group:"2_branch@2"},{command:"git.renameBranch",group:"3_modify@1"},{command:"git.deleteBranch",group:"3_modify@2"},{command:"git.publish",group:"4_publish@1"}],"git.remotes":[{command:"git.addRemote",group:"remote@1"},{command:"git.removeRemote",group:"remote@2"}],"git.stash":[{command:"git.stash",group:"1_stash@1"},{command:"git.stashIncludeUntracked",group:"1_stash@2"},{command:"git.stashStaged",when:"gitVersion2.35",group:"1_stash@3"},{command:"git.stashApplyLatest",group:"2_apply@1"},{command:"git.stashApply",group:"2_apply@2"},{command:"git.stashPopLatest",group:"3_pop@1"},{command:"git.stashPop",group:"3_pop@2"},{command:"git.stashDrop",group:"4_drop@1"},{command:"git.stashDropAll",group:"4_drop@2"}],"git.tags":[{command:"git.createTag",group:"tags@1"},{command:"git.deleteTag",group:"tags@2"},{command:"git.deleteRemoteTag",group:"tags@3"}]},submenus:[{id:"git.commit",label:"Commit"},{id:"git.changes",label:"Changes"},{id:"git.pullpush",label:"Pull, Push"},{id:"git.branch",label:"Branch"},{id:"git.remotes",label:"Remote"},{id:"git.stash",label:"Stash"},{id:"git.tags",label:"Tags"}],configuration:{title:"Git",properties:{"git.enabled":{type:"boolean",scope:"resource",description:"Whether git is enabled.","default":true},"git.path":{type:["string","null","array"],markdownDescription:"Path and filename of the git executable, e.g. `C:\\Program Files\\Git\\bin\\git.exe` (Windows). This can also be an array of string values containing multiple paths to look up.","default":null,scope:"machine"},"git.autoRepositoryDetection":{type:["boolean","string"],"enum":[true,false,"subFolders","openEditors"],enumDescriptions:["Scan for both subfolders of the current opened folder and parent folders of open files.","Disable automatic repository scanning.","Scan for subfolders of the currently opened folder.","Scan for parent folders of open files."],description:"Configures when repositories should be automatically detected.","default":true},"git.autorefresh":{type:"boolean",description:"Whether auto refreshing is enabled.","default":true},"git.autofetch":{type:["boolean","string"],"enum":[true,false,"all"],scope:"resource",markdownDescription:"When set to true, commits will automatically be fetched from the default remote of the current Git repository. Setting to `all` will fetch from all remotes.","default":false,tags:["usesOnlineServices"]},"git.autofetchPeriod":{type:"number",scope:"resource",markdownDescription:"Duration in seconds between each automatic git fetch, when `#git.autofetch#` is enabled.","default":180},"git.defaultBranchName":{type:"string",markdownDescription:"The name of the default branch (ex: main, trunk, development) when initializing a new git repository. When set to empty, the default branch name configured in git will be used. **Note:** Requires git version `2.28.0` or later.","default":"main",scope:"resource"},"git.branchPrefix":{type:"string",description:"Prefix used when creating a new branch.","default":"",scope:"resource"},"git.branchProtection":{type:"array",markdownDescription:"List of protected branches. By default, a prompt is shown before changes are committed to a protected branch. The prompt can be controlled using the `#git.branchProtectionPrompt#`  setting.",items:{type:"string"},"default":[],scope:"resource"},"git.branchProtectionPrompt":{type:"string",description:"Controls whether a prompt is being shown before changes are committed to a protected branch.","enum":["alwaysCommit","alwaysCommitToNewBranch","alwaysPrompt"],enumDescriptions:["Always commit changes to the protected branch.","Always commit changes to a new branch.","Always prompt before changes are committed to a protected branch."],"default":"alwaysPrompt",scope:"resource"},"git.branchValidationRegex":{type:"string",description:"A regular expression to validate new branch names.","default":""},"git.branchWhitespaceChar":{type:"string",description:"The character to replace whitespace in new branch names, and to separate segments of a randomly generated branch name.","default":"-"},"git.branchRandomName.enable":{type:"boolean",description:"Controls whether a random name is generated when creating a new branch.","default":false,scope:"resource"},"git.branchRandomName.dictionary":{type:"array",markdownDescription:"List of dictionaries used for the randomly generated branch name. Each value represents the dictionary used to generate the segment of the branch name. Supported dictionaries: `adjectives`, `animals`, `colors` and `numbers`.",items:{type:"string","enum":["adjectives","animals","colors","numbers"],enumDescriptions:["A random adjective","A random animal name","A random color name","A random number between 100 and 999"]},minItems:1,maxItems:5,"default":["adjectives","animals"],scope:"resource"},"git.confirmSync":{type:"boolean",description:"Confirm before synchronizing git repositories.","default":true},"git.countBadge":{type:"string","enum":["all","tracked","off"],enumDescriptions:["Count all changes.","Count only tracked changes.","Turn off counter."],description:"Controls the Git count badge.","default":"all",scope:"resource"},"git.checkoutType":{type:"array",items:{type:"string","enum":["local","tags","remote"],enumDescriptions:["Local branches","Tags","Remote branches"]},uniqueItems:true,markdownDescription:"Controls what type of git refs are listed when running `Checkout to...`.","default":["local","remote","tags"]},"git.ignoreLegacyWarning":{type:"boolean",description:"Ignores the legacy Git warning.","default":false},"git.ignoreMissingGitWarning":{type:"boolean",description:"Ignores the warning when Git is missing.","default":false},"git.ignoreWindowsGit27Warning":{type:"boolean",description:"Ignores the warning when Git 2.25 - 2.26 is installed on Windows.","default":false},"git.ignoreLimitWarning":{type:"boolean",description:"Ignores the warning when there are too many changes in a repository.","default":false},"git.ignoreRebaseWarning":{type:"boolean",description:"Ignores the warning when it looks like the branch might have been rebased when pulling.","default":false},"git.defaultCloneDirectory":{type:["string","null"],"default":null,scope:"machine",description:"The default location to clone a git repository."},"git.useEditorAsCommitInput":{type:"boolean",description:"Controls whether a full text editor will be used to author commit messages, whenever no message is provided in the commit input box.","default":true},"git.verboseCommit":{type:"boolean",scope:"resource",markdownDescription:"Enable verbose output when `#git.useEditorAsCommitInput#` is enabled.","default":false},"git.enableSmartCommit":{type:"boolean",scope:"resource",description:"Commit all changes when there are no staged changes.","default":false},"git.smartCommitChanges":{type:"string","enum":["all","tracked"],enumDescriptions:["Automatically stage all changes.","Automatically stage tracked changes only."],scope:"resource",description:"Control which changes are automatically staged by Smart Commit.","default":"all"},"git.suggestSmartCommit":{type:"boolean",scope:"resource",description:"Suggests to enable smart commit (commit all changes when there are no staged changes).","default":true},"git.enableCommitSigning":{type:"boolean",scope:"resource",description:"Enables commit signing with GPG or X.509.","default":false},"git.confirmEmptyCommits":{type:"boolean",scope:"resource",description:"Always confirm the creation of empty commits for the 'Git: Commit Empty' command.","default":true},"git.decorations.enabled":{type:"boolean","default":true,description:"Controls whether Git contributes colors and badges to the Explorer and the Open Editors view."},"git.enableStatusBarSync":{type:"boolean","default":true,description:"Controls whether the Git Sync command appears in the status bar.",scope:"resource"},"git.followTagsWhenSync":{type:"boolean",scope:"resource","default":false,description:"Push all annotated tags when running the sync command."},"git.promptToSaveFilesBeforeStash":{type:"string","enum":["always","staged","never"],enumDescriptions:["Check for any unsaved files.","Check only for unsaved staged files.","Disable this check."],scope:"resource","default":"always",description:"Controls whether Git should check for unsaved files before stashing changes."},"git.promptToSaveFilesBeforeCommit":{type:"string","enum":["always","staged","never"],enumDescriptions:["Check for any unsaved files.","Check only for unsaved staged files.","Disable this check."],scope:"resource","default":"always",description:"Controls whether Git should check for unsaved files before committing."},"git.postCommitCommand":{type:"string","enum":["none","push","sync"],enumDescriptions:["Don't run any command after a commit.","Run 'git push' after a successful commit.","Run 'git pull' and 'git push' after a successful commit."],markdownDescription:"Run a git command after a successful commit.",scope:"resource","default":"none"},"git.rememberPostCommitCommand":{type:"boolean",description:"Remember the last git command that ran after a commit.",scope:"resource","default":false},"git.openAfterClone":{type:"string","enum":["always","alwaysNewWindow","whenNoFolderOpen","prompt"],enumDescriptions:["Always open in current window.","Always open in a new window.","Only open in current window when no folder is opened.","Always prompt for action."],"default":"prompt",description:"Controls whether to open a repository automatically after cloning."},"git.showInlineOpenFileAction":{type:"boolean","default":true,description:"Controls whether to show an inline Open File action in the Git changes view."},"git.showPushSuccessNotification":{type:"boolean",description:"Controls whether to show a notification when a push is successful.","default":false},"git.inputValidation":{type:"string","enum":["always","warn","off"],"default":"warn",description:"Controls when to show commit message input validation."},"git.inputValidationLength":{type:"number","default":72,description:"Controls the commit message length threshold for showing a warning."},"git.inputValidationSubjectLength":{type:["number","null"],"default":50,description:"Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `config.inputValidationLength`."},"git.detectSubmodules":{type:"boolean",scope:"resource","default":true,description:"Controls whether to automatically detect git submodules."},"git.detectSubmodulesLimit":{type:"number",scope:"resource","default":10,description:"Controls the limit of git submodules detected."},"git.alwaysShowStagedChangesResourceGroup":{type:"boolean",scope:"resource","default":false,description:"Always show the Staged Changes resource group."},"git.alwaysSignOff":{type:"boolean",scope:"resource","default":false,description:"Controls the signoff flag for all commits."},"git.ignoreSubmodules":{type:"boolean",scope:"resource","default":false,description:"Ignore modifications to submodules in the file tree."},"git.ignoredRepositories":{type:"array",items:{type:"string"},"default":[],scope:"window",description:"List of git repositories to ignore."},"git.scanRepositories":{type:"array",items:{type:"string"},"default":[],scope:"resource",description:"List of paths to search for git repositories in."},"git.showProgress":{type:"boolean",description:"Controls whether git actions should show progress.","default":true,scope:"resource"},"git.rebaseWhenSync":{type:"boolean",scope:"resource","default":false,description:"Force git to use rebase when running the sync command."},"git.pullBeforeCheckout":{type:"boolean",scope:"resource","default":false,description:"Controls whether a branch that does not have outgoing commits is fast-forwarded before it is checked out."},"git.fetchOnPull":{type:"boolean",scope:"resource","default":false,description:"When enabled, fetch all branches when pulling. Otherwise, fetch just the current one."},"git.pruneOnFetch":{type:"boolean",scope:"resource","default":false,description:"Prune when fetching."},"git.pullTags":{type:"boolean",scope:"resource","default":true,description:"Fetch all tags when pulling."},"git.autoStash":{type:"boolean",scope:"resource","default":false,description:"Stash any changes before pulling and restore them after successful pull."},"git.allowForcePush":{type:"boolean","default":false,description:"Controls whether force push (with or without lease) is enabled."},"git.useForcePushWithLease":{type:"boolean","default":true,description:"Controls whether force pushing uses the safer force-with-lease variant."},"git.confirmForcePush":{type:"boolean","default":true,description:"Controls whether to ask for confirmation before force-pushing."},"git.allowNoVerifyCommit":{type:"boolean","default":false,description:"Controls whether commits without running pre-commit and commit-msg hooks are allowed."},"git.confirmNoVerifyCommit":{type:"boolean","default":true,description:"Controls whether to ask for confirmation before committing without verification."},"git.closeDiffOnOperation":{type:"boolean",scope:"resource","default":false,description:"Controls whether the diff editor should be automatically closed when changes are stashed, committed, discarded, staged, or unstaged."},"git.openDiffOnClick":{type:"boolean",scope:"resource","default":true,description:"Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened."},"git.supportCancellation":{type:"boolean",scope:"resource","default":false,description:"Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation."},"git.branchSortOrder":{type:"string","enum":["committerdate","alphabetically"],"default":"committerdate",description:"Controls the sort order for branches."},"git.untrackedChanges":{type:"string","enum":["mixed","separate","hidden"],enumDescriptions:["All changes, tracked and untracked, appear together and behave equally.","Untracked changes appear separately in the Source Control view. They are also excluded from several actions.","Untracked changes are hidden and excluded from several actions."],"default":"mixed",description:"Controls how untracked changes behave.",scope:"resource"},"git.requireGitUserConfig":{type:"boolean",description:"Controls whether to require explicit Git user configuration or allow Git to guess if missing.","default":true,scope:"resource"},"git.showCommitInput":{type:"boolean",scope:"resource","default":true,description:"Controls whether to show the commit input in the Git source control panel."},"git.terminalAuthentication":{type:"boolean","default":true,description:"Controls whether to enable VS Code to be the authentication handler for Git processes spawned in the Integrated Terminal. Note: Terminals need to be restarted to pick up a change in this setting."},"git.terminalGitEditor":{type:"boolean","default":false,description:"Controls whether to enable VS Code to be the Git editor for Git processes spawned in the integrated terminal. Note: Terminals need to be restarted to pick up a change in this setting."},"git.useCommitInputAsStashMessage":{type:"boolean",scope:"resource","default":false,description:"Controls whether to use the message from the commit input box as the default stash message."},"git.useIntegratedAskPass":{type:"boolean","default":true,description:"Controls whether GIT_ASKPASS should be overwritten to use the integrated version."},"git.githubAuthentication":{deprecationMessage:"This setting is now deprecated, please use `github.gitAuthentication` instead."},"git.timeline.date":{type:"string","enum":["committed","authored"],enumDescriptions:["Use the committed date","Use the authored date"],"default":"committed",description:"Controls which date to use for items in the Timeline view.",scope:"window"},"git.timeline.showAuthor":{type:"boolean","default":true,description:"Controls whether to show the commit author in the Timeline view.",scope:"window"},"git.timeline.showUncommitted":{type:"boolean","default":false,description:"Controls whether to show uncommitted changes in the Timeline view.",scope:"window"},"git.showActionButton":{type:"object",additionalProperties:false,description:"Controls whether an action button is shown in the Source Control view.",properties:{commit:{type:"boolean",description:"Show an action button to commit changes when the local branch has modified files ready to be committed."},publish:{type:"boolean",description:"Show an action button to publish the local branch when it does not have a tracking remote branch."},sync:{type:"boolean",description:"Show an action button to synchronize changes when the local branch is either ahead or behind the remote branch."}},"default":{commit:true,publish:true,sync:true},scope:"resource"},"git.statusLimit":{type:"number",scope:"resource","default":10000,description:"Controls how to limit the number of changes that can be parsed from Git status command. Can be set to 0 for no limit."},"git.repositoryScanIgnoredFolders":{type:"array",items:{type:"string"},"default":["node_modules"],scope:"resource",markdownDescription:"List of folders that are ignored while scanning for Git repositories when `#git.autoRepositoryDetection#` is set to `true` or `subFolders`."},"git.repositoryScanMaxDepth":{type:"number",scope:"resource","default":1,markdownDescription:"Controls the depth used when scanning workspace folders for Git repositories when `#git.autoRepositoryDetection#` is set to `true` or `subFolders`. Can be set to `-1` for no limit."},"git.commandsToLog":{type:"array",items:{type:"string"},"default":[],markdownDescription:"List of git commands (ex: commit, push) that would have their `stdout` logged to the [git output](command:git.showOutput). If the git command has a client-side hook configured, the client-side hook's `stdout` will also be logged to the [git output](command:git.showOutput)."},"git.mergeEditor":{type:"boolean","default":false,markdownDescription:"Open the merge editor for files that are currently under conflict.",scope:"window"},"git.optimisticUpdate":{type:"boolean","default":true,markdownDescription:"Controls whether to optimistically update the state of the Source Control view after running git commands.",scope:"resource",tags:["experimental"]},"git.openRepositoryInParentFolders":{type:"string","enum":["always","never","prompt"],enumDescriptions:["Always open a repository in parent folders of workspaces or open files.","Never open a repository in parent folders of workspaces or open files.","Prompt before opening a repository the parent folders of workspaces or open files."],"default":"prompt",markdownDescription:"Control whether a repository in parent folders of workspaces or open files should be opened.",scope:"resource"},"git.similarityThreshold":{type:"number","default":50,minimum:0,maximum:100,markdownDescription:"Controls the threshold of the similarity index (i.e. amount of additions/deletions compared to the file's size) for changes in a pair of added/deleted files to be considered a rename. **Note:** Requires git version `2.18.0` or later.",scope:"resource"}}},colors:[{id:"gitDecoration.addedResourceForeground",description:"Color for added resources.",defaults:{light:"#587c0c",dark:"#81b88b",highContrast:"#a1e3ad",highContrastLight:"#374e06"}},{id:"gitDecoration.modifiedResourceForeground",description:"Color for modified resources.",defaults:{light:"#895503",dark:"#E2C08D",highContrast:"#E2C08D",highContrastLight:"#895503"}},{id:"gitDecoration.deletedResourceForeground",description:"Color for deleted resources.",defaults:{light:"#ad0707",dark:"#c74e39",highContrast:"#c74e39",highContrastLight:"#ad0707"}},{id:"gitDecoration.renamedResourceForeground",description:"Color for renamed or copied resources.",defaults:{light:"#007100",dark:"#73C991",highContrast:"#73C991",highContrastLight:"#007100"}},{id:"gitDecoration.untrackedResourceForeground",description:"Color for untracked resources.",defaults:{light:"#007100",dark:"#73C991",highContrast:"#73C991",highContrastLight:"#007100"}},{id:"gitDecoration.ignoredResourceForeground",description:"Color for ignored resources.",defaults:{light:"#8E8E90",dark:"#8C8C8C",highContrast:"#A7A8A9",highContrastLight:"#8e8e90"}},{id:"gitDecoration.stageModifiedResourceForeground",description:"Color for modified resources which have been staged.",defaults:{light:"#895503",dark:"#E2C08D",highContrast:"#E2C08D",highContrastLight:"#895503"}},{id:"gitDecoration.stageDeletedResourceForeground",description:"Color for deleted resources which have been staged.",defaults:{light:"#ad0707",dark:"#c74e39",highContrast:"#c74e39",highContrastLight:"#ad0707"}},{id:"gitDecoration.conflictingResourceForeground",description:"Color for resources with conflicts.",defaults:{light:"#ad0707",dark:"#e4676b",highContrast:"#c74e39",highContrastLight:"#ad0707"}},{id:"gitDecoration.submoduleResourceForeground",description:"Color for submodule resources.",defaults:{light:"#1258a7",dark:"#8db9e2",highContrast:"#8db9e2",highContrastLight:"#1258a7"}}],configurationDefaults:{"[git-commit]":{"editor.rulers":[72],"workbench.editor.restoreViewState":false},"[git-rebase]":{"workbench.editor.restoreViewState":false}},viewsWelcome:[{view:"scm",contents:"If you would like to use git features, please enable git in your [settings](command:workbench.action.openSettings?%5B%22git.enabled%22%5D).\nTo learn more about how to use git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).",when:"!config.git.enabled"},{view:"scm",contents:"Install Git, a popular source control system, to track code changes and collaborate with others. Learn more in our [Git guides](https://aka.ms/vscode-scm).",when:"config.git.enabled && git.missing"},{view:"scm",contents:"[Download Git for macOS](https://git-scm.com/download/mac)\nAfter installing, please [reload](command:workbench.action.reloadWindow) (or [troubleshoot](command:git.showOutput)). Additional source control providers can be installed [from the Marketplace](command:workbench.extensions.search?%22%40category%3A%5C%22scm%20providers%5C%22%22).",when:"config.git.enabled && git.missing && isMac"},{view:"scm",contents:"[Download Git for Windows](https://git-scm.com/download/win)\nAfter installing, please [reload](command:workbench.action.reloadWindow) (or [troubleshoot](command:git.showOutput)). Additional source control providers can be installed [from the Marketplace](command:workbench.extensions.search?%22%40category%3A%5C%22scm%20providers%5C%22%22).",when:"config.git.enabled && git.missing && isWindows"},{view:"scm",contents:"Source control depends on Git being installed.\n[Download Git for Linux](https://git-scm.com/download/linux)\nAfter installing, please [reload](command:workbench.action.reloadWindow) (or [troubleshoot](command:git.showOutput)). Additional source control providers can be installed [from the Marketplace](command:workbench.extensions.search?%22%40category%3A%5C%22scm%20providers%5C%22%22).",when:"config.git.enabled && git.missing && isLinux"},{view:"scm",contents:"In order to use git features, you can open a folder containing a git repository or clone from a URL.\n[Open Folder](command:vscode.openFolder)\n[Clone Repository](command:git.clone)\nTo learn more about how to use git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).",when:"config.git.enabled && !git.missing && workbenchState == empty && git.parentRepositoryCount == 0 && git.unsafeRepositoryCount == 0 && git.closedRepositoryCount == 0",enablement:"git.state == initialized",group:"2_open@1"},{view:"scm",contents:"The workspace currently open doesn't have any folders containing git repositories.\n[Add Folder to Workspace](command:workbench.action.addRootFolder)\nTo learn more about how to use git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).",when:"config.git.enabled && !git.missing && workbenchState == workspace && workspaceFolderCount == 0 && git.parentRepositoryCount == 0 && git.unsafeRepositoryCount == 0 && git.closedRepositoryCount == 0",enablement:"git.state == initialized",group:"2_open@1"},{view:"scm",contents:"Scanning folder for git repositories...",when:"config.git.enabled && !git.missing && workbenchState == folder && workspaceFolderCount != 0 && git.state != initialized"},{view:"scm",contents:"Scanning workspace for git repositories...",when:"config.git.enabled && !git.missing && workbenchState == workspace && workspaceFolderCount != 0 && git.state != initialized"},{view:"scm",contents:"The folder currently open doesn't have a git repository. You can initialize a repository which will enable source control features powered by git.\n[Initialize Repository](command:git.init?%5Btrue%5D)\nTo learn more about how to use git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).",when:"config.git.enabled && !git.missing && git.state == initialized && workbenchState == folder && scmRepositoryCount == 0 && git.parentRepositoryCount == 0 && git.unsafeRepositoryCount == 0 && git.closedRepositoryCount == 0 && remoteName != 'codespaces'",group:"5_scm@1"},{view:"scm",contents:"The workspace currently open doesn't have any folders containing git repositories. You can initialize a repository on a folder which will enable source control features powered by git.\n[Initialize Repository](command:git.init)\nTo learn more about how to use git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).",when:"config.git.enabled && !git.missing && git.state == initialized && workbenchState == workspace && workspaceFolderCount != 0 && scmRepositoryCount == 0 && git.parentRepositoryCount == 0 && git.unsafeRepositoryCount == 0 && git.closedRepositoryCount == 0 && remoteName != 'codespaces'",group:"5_scm@1"},{view:"scm",contents:"A git repository was found in the parent folders of the workspace or the open file(s).\n[Open Repository](command:git.openRepositoriesInParentFolders)\nUse the [git.openRepositoryInParentFolders](command:workbench.action.openSettings?%5B%22git.openRepositoryInParentFolders%22%5D) setting to control whether git repositories in parent folders of workspaces or open files are opened. To learn more [read our docs](https://aka.ms/vscode-git-repository-in-parent-folders).",when:"config.git.enabled && !git.missing && git.state == initialized && git.parentRepositoryCount == 1"},{view:"scm",contents:"Git repositories were found in the parent folders of the workspace or the open file(s).\n[Open Repository](command:git.openRepositoriesInParentFolders)\nUse the [git.openRepositoryInParentFolders](command:workbench.action.openSettings?%5B%22git.openRepositoryInParentFolders%22%5D) setting to control whether git repositories in parent folders of workspace or open files are opened. To learn more [read our docs](https://aka.ms/vscode-git-repository-in-parent-folders).",when:"config.git.enabled && !git.missing && git.state == initialized && git.parentRepositoryCount > 1"},{view:"scm",contents:"The detected git repository is potentially unsafe as the folder is owned by someone other than the current user.\n[Manage Unsafe Repositories](command:git.manageUnsafeRepositories)\nTo learn more about unsafe repositories [read our docs](https://aka.ms/vscode-git-unsafe-repository).",when:"config.git.enabled && !git.missing && git.state == initialized && git.unsafeRepositoryCount == 1"},{view:"scm",contents:"The detected git repositories are potentially unsafe as the folders are owned by someone other than the current user.\n[Manage Unsafe Repositories](command:git.manageUnsafeRepositories)\nTo learn more about unsafe repositories [read our docs](https://aka.ms/vscode-git-unsafe-repository).",when:"config.git.enabled && !git.missing && git.state == initialized && git.unsafeRepositoryCount > 1"},{view:"scm",contents:"A git repository was found that was previously closed.\n[Reopen Closed Repository](command:git.reopenClosedRepositories)\nTo learn more about how to use git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).",when:"config.git.enabled && !git.missing && git.state == initialized && git.closedRepositoryCount == 1"},{view:"scm",contents:"Git repositories were found that were previously closed.\n[Reopen Closed Repositories](command:git.reopenClosedRepositories)\nTo learn more about how to use git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).",when:"config.git.enabled && !git.missing && git.state == initialized && git.closedRepositoryCount > 1"},{view:"explorer",contents:"You can clone a repository locally.\n[Clone Repository](command:git.clone 'Clone a repository once the git extension has activated')",when:"config.git.enabled && git.state == initialized && scmRepositoryCount == 0",group:"5_scm@1"},{view:"explorer",contents:"To learn more about how to use git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).",when:"config.git.enabled && git.state == initialized && scmRepositoryCount == 0",group:"5_scm@10"}]},dependencies:{"@joaomoreno/unique-names-generator":"^5.1.0","@vscode/extension-telemetry":"0.7.5","@vscode/iconv-lite-umd":"0.7.0",byline:"^5.0.0","file-type":"16.5.4",jschardet:"3.0.0",picomatch:"2.3.1","vscode-uri":"^2.0.0",which:"3.0.1"},devDependencies:{"@types/byline":"4.2.31","@types/mocha":"^9.1.1","@types/node":"16.x","@types/picomatch":"2.3.0","@types/which":"3.0.0"},repository:{type:"git",url:"https://github.com/microsoft/vscode.git"}};

registerExtension(manifest);
