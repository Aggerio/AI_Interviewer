import * as vscode from 'vscode';
import { IExtensionManifest } from './vscode/vs/platform/extensions/common/extensions.js';
export { IExtensionContributions } from './vscode/vs/platform/extensions/common/extensions.js';
import { IDisposable } from './vscode/vs/base/common/lifecycle.js';
import { ITranslations } from './vscode/vs/platform/extensionManagement/common/extensionNls.js';
import { ExtensionHostKind } from './vscode/vs/workbench/services/extensions/common/extensionHostKind.js';

declare function initialize(): Promise<void>;
interface RegisterExtensionResult {
    id: string;
    registerFileUrl: (path: string, url: string) => IDisposable;
    dispose(): Promise<void>;
}
interface RegisterLocalProcessExtensionResult extends RegisterExtensionResult {
    getApi(): Promise<typeof vscode>;
    setAsDefaultApi(): Promise<void>;
}
declare function registerExtension(manifest: IExtensionManifest, extHostKind: ExtensionHostKind.LocalProcess, defaultNLS?: ITranslations, builtin?: boolean): RegisterLocalProcessExtensionResult;
declare function registerExtension(manifest: IExtensionManifest, extHostKind?: ExtensionHostKind, defaultNLS?: ITranslations, builtin?: boolean): RegisterExtensionResult;
declare function onExtHostInitialized(fct: () => void): void;

export { ExtensionHostKind, IExtensionManifest, ITranslations, initialize, onExtHostInitialized, registerExtension };
