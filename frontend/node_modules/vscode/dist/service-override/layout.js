import '../missing-services.js';
import { StandaloneServices } from 'monaco-editor/esm/vs/editor/standalone/browser/standaloneServices.js';
import { IWorkbenchLayoutService } from '../vscode/vs/workbench/services/layout/browser/layoutService.js';
import { ILayoutService } from 'monaco-editor/esm/vs/platform/layout/browser/layoutService.js';
import { Event, Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { ICodeEditorService } from 'monaco-editor/esm/vs/editor/browser/services/codeEditorService.js';
import * as dom from 'monaco-editor/esm/vs/base/browser/dom.js';
import { isAncestorUsingFlowTo } from 'monaco-editor/esm/vs/base/browser/dom.js';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
import { IPaneCompositePartService } from '../vscode/vs/workbench/services/panecomposite/browser/panecomposite.js';
import { IViewDescriptorService } from '../vscode/vs/workbench/common/views.js';
import { isChrome, isFirefox, isSafari, isWindows, isLinux } from 'monaco-editor/esm/vs/base/common/platform.js';
import { coalesce } from 'monaco-editor/esm/vs/base/common/arrays.js';
import { IEditorGroupsService } from '../vscode/vs/workbench/services/editor/common/editorGroupsService.js';
import { IStatusbarService } from '../vscode/vs/workbench/services/statusbar/browser/statusbar.js';
import { onRenderWorkbench } from '../lifecycle.js';
class LayoutService {
    constructor(container) {
        this.container = container;
        this.onDidChangeFullscreen = Event.None;
        this.onDidChangeZenMode = Event.None;
        this.onDidChangeWindowMaximized = Event.None;
        this.onDidChangeCenteredLayout = Event.None;
        this.onDidChangePanelPosition = Event.None;
        this.onDidChangePanelAlignment = Event.None;
        this.onDidChangeNotificationsVisibility = Event.None;
        this.openedDefaultEditors = false;
        this.whenRestored = Promise.resolve();
        this.parts = new Map();
        this.hiddenParts = new Set();
        this._onDidChangePartVisibility = new Emitter();
        this.onDidChangePartVisibility = this._onDidChangePartVisibility.event;
        this.offset = { top: 0, quickPickTop: 0 };
        this._onDidLayout = new Emitter();
        this.onDidLayout = this._onDidLayout.event;
        window.addEventListener('resize', () => this.layout());
        this.layout();
    }
    init(accessor) {
        this.editorGroupService = accessor.get(IEditorGroupsService);
        this.paneCompositeService = accessor.get(IPaneCompositePartService);
        this.statusBarService = accessor.get(IStatusbarService);
        this.viewDescriptorService = accessor.get(IViewDescriptorService);
    }
    focusPart(part) {
        switch (part) {
            case "workbench.parts.editor" :
                this.editorGroupService.activeGroup.focus();
                break;
            case "workbench.parts.panel" : {
                const activePanel = this.paneCompositeService.getActivePaneComposite(1 );
                activePanel?.focus();
                break;
            }
            case "workbench.parts.sidebar" : {
                const activeViewlet = this.paneCompositeService.getActivePaneComposite(0 );
                activeViewlet?.focus();
                break;
            }
            case "workbench.parts.activitybar" :
                this.getPart("workbench.parts.activitybar" ).focus();
                break;
            case "workbench.parts.statusbar" :
                this.statusBarService.focus();
                break;
            default: {
                const container = this.getContainer(part);
                container?.focus();
            }
        }
    }
    getDimension(part) {
        return this.getPart(part).dimension;
    }
    toggleMaximizedPanel() {
    }
    hasWindowBorder() {
        return false;
    }
    getWindowBorderWidth() {
        return 0;
    }
    getWindowBorderRadius() {
        return undefined;
    }
    toggleMenuBar() {
    }
    setPanelPosition() {
    }
    getPanelAlignment() {
        return 'left';
    }
    setPanelAlignment() {
    }
    toggleZenMode() {
    }
    isEditorLayoutCentered() {
        return false;
    }
    centerEditorLayout() {
    }
    resizePart() {
    }
    isWindowMaximized() {
        return false;
    }
    updateWindowMaximizedState() {
    }
    getVisibleNeighborPart() {
        return undefined;
    }
    getMaximumEditorDimensions() {
        return new dom.Dimension(Infinity, Infinity);
    }
    isPanelMaximized() {
        return false;
    }
    getPanelPosition() {
        return 2 ;
    }
    hasFocus(part) {
        const activeElement = document.activeElement;
        if (activeElement == null) {
            return false;
        }
        const container = this.getContainer(part);
        return !(container == null) && isAncestorUsingFlowTo(activeElement, container);
    }
    getContainer(part) {
        if (this.parts.get(part) == null) {
            return undefined;
        }
        return this.getPart(part).getContainer();
    }
    getPart(key) {
        const part = this.parts.get(key);
        if (part == null) {
            throw new Error(`Unknown part ${key}`);
        }
        return part;
    }
    hasViews(id) {
        const viewContainer = this.viewDescriptorService.getViewContainerById(id);
        if (viewContainer == null) {
            return false;
        }
        const viewContainerModel = this.viewDescriptorService.getViewContainerModel(viewContainer);
        if (viewContainerModel == null) {
            return false;
        }
        return viewContainerModel.activeViewDescriptors.length >= 1;
    }
    setPartHidden(hidden, part) {
        if (hidden) {
            this.hiddenParts.add(part);
        }
        else {
            this.hiddenParts.delete(part);
        }
        this._onDidChangePartVisibility.fire();
        const location = {
            ["workbench.parts.sidebar" ]: 0 ,
            ["workbench.parts.auxiliarybar" ]: 2 ,
            ["workbench.parts.panel" ]: 1
        }[part];
        if (location != null) {
            const paneComposite = this.paneCompositeService.getActivePaneComposite(location);
            if (paneComposite != null && hidden) {
                this.paneCompositeService.hideActivePaneComposite(location);
            }
            else if (paneComposite == null && !hidden) {
                let panelToOpen = this.paneCompositeService.getLastActivePaneCompositeId(location);
                if (panelToOpen == null || !this.hasViews(panelToOpen)) {
                    panelToOpen = this.viewDescriptorService
                        .getViewContainersByLocation(1 )
                        .find(viewContainer => this.hasViews(viewContainer.id))?.id;
                }
                if (panelToOpen != null) {
                    void this.paneCompositeService.openPaneComposite(panelToOpen, 1 , true);
                }
            }
            if (this.paneCompositeService.getPartByLocation != null) {
                this.paneCompositeService.getPartByLocation(location).setVisible(!hidden);
            }
        }
    }
    isVisible(part) {
        return !( this.hiddenParts.has(part));
    }
    getSideBarPosition() {
        return 0 ;
    }
    registerPart(part) {
        this.parts.set(part.getId(), part);
    }
    isRestored() {
        return true;
    }
    get dimension() { return this._dimension; }
    layout() {
        this._dimension = dom.getClientArea(window.document.body);
        this._onDidLayout.fire(this._dimension);
    }
    get hasContainer() {
        return true;
    }
    focus() {
        StandaloneServices.get(ICodeEditorService).getFocusedCodeEditor()?.focus();
    }
}
onRenderWorkbench((accessor) => {
    const layoutService = accessor.get(ILayoutService);
    if (layoutService instanceof LayoutService) {
        layoutService.init(accessor);
    }
});
function getServiceOverride(container = document.body) {
    const platformClass = isWindows ? 'windows' : isLinux ? 'linux' : 'mac';
    const workbenchClasses = coalesce([
        'monaco-workbench',
        platformClass,
        'web',
        isChrome ? 'chromium' : isFirefox ? 'firefox' : isSafari ? 'safari' : undefined
    ]);
    container.classList.add(...workbenchClasses);
    document.body.classList.add(platformClass);
    document.body.classList.add('web');
    return {
        [( ILayoutService.toString())]: new SyncDescriptor(LayoutService, [container], true),
        [( IWorkbenchLayoutService.toString())]: new SyncDescriptor(LayoutService, [container], true)
    };
}
export { LayoutService, getServiceOverride as default };
