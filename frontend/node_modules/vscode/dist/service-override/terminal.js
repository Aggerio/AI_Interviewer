import '../missing-services.js';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
import { TerminalExtensions, ITerminalLogService } from '../vscode/vs/platform/terminal/common/terminal.js';
import { ITerminalProfileService, ITerminalProfileResolverService } from '../vscode/vs/workbench/contrib/terminal/common/terminal.js';
import { ITerminalService, ITerminalEditorService, ITerminalGroupService, ITerminalInstanceService } from '../vscode/vs/workbench/contrib/terminal/browser/terminal.js';
import { TerminalService } from '../vscode/vs/workbench/contrib/terminal/browser/terminalService.js';
import { TerminalEditorService } from '../vscode/vs/workbench/contrib/terminal/browser/terminalEditorService.js';
import { TerminalGroupService } from '../vscode/vs/workbench/contrib/terminal/browser/terminalGroupService.js';
import { TerminalInstanceService } from '../vscode/vs/workbench/contrib/terminal/browser/terminalInstanceService.js';
import { TerminalProfileService } from '../vscode/vs/workbench/contrib/terminal/browser/terminalProfileService.js';
import { ITerminalContributionService, TerminalContributionService } from '../vscode/vs/workbench/contrib/terminal/common/terminalExtensionPoints.js';
import { ITerminalLinkProviderService } from '../vscode/vs/workbench/contrib/terminalContrib/links/browser/links.js';
import { TerminalLinkProviderService } from '../vscode/vs/workbench/contrib/terminalContrib/links/browser/terminalLinkProviderService.js';
import { ElectronTerminalProfileResolverService } from '../vscode/vs/workbench/contrib/terminal/electron-sandbox/terminalProfileResolverService.js';
import { EnvironmentVariableService } from '../vscode/vs/workbench/contrib/terminal/common/environmentVariableService.js';
import { IEnvironmentVariableService } from '../vscode/vs/workbench/contrib/terminal/common/environmentVariable.js';
import { ITerminalQuickFixService } from '../vscode/vs/workbench/contrib/terminalContrib/quickFix/browser/quickFix.js';
import { TerminalLogService } from '../vscode/vs/platform/terminal/common/terminalLogService.js';
import { TerminalQuickFixService } from '../vscode/vs/workbench/contrib/terminalContrib/quickFix/browser/terminalQuickFixService.js';
import { Event, Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { DeferredPromise } from 'monaco-editor/esm/vs/base/common/async.js';
import { unsupported } from '../tools.js';
import '../vscode/vs/workbench/contrib/terminal/browser/terminal.contribution.js';
import '../vscode/vs/workbench/contrib/terminalContrib/accessibility/browser/terminal.accessibility.contribution.js';
class SimpleTerminalBackend {
    constructor() {
        this.getLatency = async () => [];
        this.isResponsive = true;
        this._whenConnected = new DeferredPromise();
        this.restartPtyHost = unsupported;
        this.remoteAuthority = undefined;
        this.onPtyHostUnresponsive = Event.None;
        this.onPtyHostResponsive = Event.None;
        this.onPtyHostRestart = Event.None;
        this.onDidRequestDetach = Event.None;
        this.attachToProcess = unsupported;
        this.attachToRevivedProcess = unsupported;
        this.listProcesses = unsupported;
        this.getProfiles = async () => [];
        this.getWslPath = unsupported;
        this.getEnvironment = async () => ({});
        this.getShellEnvironment = async () => undefined;
        this.setTerminalLayoutInfo = async () => { };
        this.updateTitle = async () => { };
        this.updateIcon = async () => { };
        this.getTerminalLayoutInfo = async () => undefined;
        this.reduceConnectionGraceTime = unsupported;
        this.requestDetachInstance = unsupported;
        this.acceptDetachInstanceReply = unsupported;
        this.persistTerminalState = unsupported;
    }
    get whenReady() { return this._whenConnected.p; }
    setReady() {
        void this._whenConnected.complete();
    }
    async getPerformanceMarks() {
        return [];
    }
}
class SimpleTerminalProcess {
    constructor(id, pid, cwd, onData) {
        this.id = id;
        this.pid = pid;
        this.cwd = cwd;
        this.onData = onData;
        this.onReady = new Emitter();
        this.shouldPersist = false;
        this.onProcessData = this.onData;
        this.onProcessReady = this.onReady.event;
        this.onDidChangeProperty = Event.None;
        this.onProcessExit = Event.None;
        this.processBinary = unsupported;
        this.refreshProperty = async () => undefined;
        setTimeout(() => {
            this.onReady.fire({
                cwd,
                pid,
                windowsPty: undefined
            });
        });
    }
    acknowledgeDataEvent() {
    }
    async setUnicodeVersion() {
    }
    async getInitialCwd() {
        return this.cwd;
    }
    async getCwd() {
        return this.cwd;
    }
    async getLatency() {
        return 0;
    }
    async updateProperty() {
    }
}
function getServiceOverride(backend) {
    ( Registry.as(TerminalExtensions.Backend)).registerTerminalBackend(backend);
    return {
        [( ITerminalService.toString())]: new SyncDescriptor(TerminalService, [], true),
        [( ITerminalLogService.toString())]: new SyncDescriptor(TerminalLogService, [], true),
        [( ITerminalEditorService.toString())]: new SyncDescriptor(TerminalEditorService, [], true),
        [( ITerminalGroupService.toString())]: new SyncDescriptor(TerminalGroupService, [], true),
        [( ITerminalInstanceService.toString())]: new SyncDescriptor(TerminalInstanceService, [], true),
        [( ITerminalProfileService.toString())]: new SyncDescriptor(TerminalProfileService, [], true),
        [( ITerminalContributionService.toString())]: new SyncDescriptor(TerminalContributionService, [], true),
        [( ITerminalLinkProviderService.toString())]: new SyncDescriptor(TerminalLinkProviderService, [], true),
        [( ITerminalProfileResolverService.toString())]: new SyncDescriptor(ElectronTerminalProfileResolverService, [], true),
        [( IEnvironmentVariableService.toString())]: new SyncDescriptor(EnvironmentVariableService, [], true),
        [( ITerminalQuickFixService.toString())]: new SyncDescriptor(TerminalQuickFixService, [], true)
    };
}
export { SimpleTerminalBackend, SimpleTerminalProcess, getServiceOverride as default };
