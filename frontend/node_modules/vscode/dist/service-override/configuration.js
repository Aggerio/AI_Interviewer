import { __decorate, __param } from '../node_modules/tslib/tslib.es6.js';
import '../missing-services.js';
import { StandaloneServices } from 'monaco-editor/esm/vs/editor/standalone/browser/standaloneServices.js';
import { WorkspaceService } from '../vscode/vs/workbench/services/configuration/browser/configurationService.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { ITextResourceConfigurationService } from 'monaco-editor/esm/vs/editor/common/services/textResourceConfiguration.js';
import { TextResourceConfigurationService } from '../vscode/vs/editor/common/services/textResourceConfigurationService.js';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
export { ConfigurationScope } from '../vscode/vs/platform/configuration/common/configurationRegistry.js';
import { Extensions } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { VSBuffer } from 'monaco-editor/esm/vs/base/common/buffer.js';
import { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';
import { ILogService } from 'monaco-editor/esm/vs/platform/log/common/log.js';
import { IUserDataProfilesService } from 'monaco-editor/esm/vs/platform/userDataProfile/common/userDataProfile.js';
import { IPolicyService } from 'monaco-editor/esm/vs/platform/policy/common/policy.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { IUserDataProfileService } from '../vscode/vs/workbench/services/userDataProfile/common/userDataProfile.js';
import { IRemoteAgentService } from '../vscode/vs/workbench/services/remote/common/remoteAgentService.js';
import { IUriIdentityService } from 'monaco-editor/esm/vs/platform/uriIdentity/common/uriIdentity.js';
import { ConfigurationCache } from '../vscode/vs/workbench/services/configuration/common/configurationCache.js';
import { Schemas } from 'monaco-editor/esm/vs/base/common/network.js';
import { IWorkbenchEnvironmentService } from '../vscode/vs/workbench/services/environment/common/environmentService.js';
import { IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';
import { LabelService } from '../vscode/vs/workbench/services/label/common/labelService.js';
import { ILabelService } from 'monaco-editor/esm/vs/platform/label/common/label.js';
import { generateUuid } from 'monaco-editor/esm/vs/base/common/uuid.js';
import { IWorkspacesService } from '../vscode/vs/platform/workspaces/common/workspaces.js';
import { BrowserWorkspacesService } from '../vscode/vs/workbench/services/workspaces/browser/workspacesService.js';
import { IWorkspaceEditingService } from '../vscode/vs/workbench/services/workspaces/common/workspaceEditing.js';
import { AbstractWorkspaceEditingService } from '../vscode/vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService.js';
import { URI } from 'monaco-editor/esm/vs/base/common/uri.js';
import '../vscode/vs/workbench/api/common/configurationExtensionPoint.js';
import getServiceOverride$1 from './files.js';
import { memoizedConstructor, unsupported } from '../tools.js';
import { registerServiceInitializePreParticipant } from '../lifecycle.js';
async function updateUserConfiguration(configurationJson) {
    const userDataProfilesService = StandaloneServices.get(IUserDataProfilesService);
    await StandaloneServices.get(IFileService).writeFile(userDataProfilesService.defaultProfile.settingsResource, VSBuffer.fromString(configurationJson));
}
async function getUserConfiguration() {
    const userDataProfilesService = StandaloneServices.get(IUserDataProfilesService);
    return ( (await StandaloneServices.get(IFileService).readFile(userDataProfilesService.defaultProfile.settingsResource)).value.toString());
}
function onUserConfigurationChange(callback) {
    const userDataProfilesService = StandaloneServices.get(IUserDataProfilesService);
    return StandaloneServices.get(IFileService).onDidFilesChange(e => {
        if (e.affects(userDataProfilesService.defaultProfile.settingsResource)) {
            callback();
        }
    });
}
const configurationRegistry = ( Registry.as(Extensions.Configuration));
let InjectedConfigurationService = class InjectedConfigurationService extends WorkspaceService {
    constructor(workbenchEnvironmentService, userDataProfileService, userDataProfilesService, fileService, remoteAgentService, uriIdentityService, logService, policyService) {
        const configurationCache = new ConfigurationCache([Schemas.file, Schemas.vscodeUserData, Schemas.tmp], workbenchEnvironmentService, fileService);
        super({ configurationCache }, workbenchEnvironmentService, userDataProfileService, userDataProfilesService, fileService, remoteAgentService, uriIdentityService, logService, policyService);
    }
};
InjectedConfigurationService = __decorate([
    ( __param(0, IWorkbenchEnvironmentService)),
    ( __param(1, IUserDataProfileService)),
    ( __param(2, IUserDataProfilesService)),
    ( __param(3, IFileService)),
    ( __param(4, IRemoteAgentService)),
    ( __param(5, IUriIdentityService)),
    ( __param(6, ILogService)),
    ( __param(7, IPolicyService))
], InjectedConfigurationService);
class MonacoWorkspaceEditingService extends AbstractWorkspaceEditingService {
    constructor() {
        super(...arguments);
        this.enterWorkspace = unsupported;
    }
}
let _defaultWorkspaceUri = URI.file('/workspace');
registerServiceInitializePreParticipant(async (accessor) => {
    const workspaceService = accessor.get(IWorkspaceContextService);
    workspaceService.acquireInstantiationService(accessor.get(IInstantiationService));
    const configPath = _defaultWorkspaceUri.with({ path: '/workspace.code-workspace' });
    try {
        const fileService = accessor.get(IFileService);
        await fileService.createFolder(_defaultWorkspaceUri);
        await fileService.writeFile(configPath, VSBuffer.fromString(JSON.stringify({
            folders: [
                {
                    path: _defaultWorkspaceUri.path
                }
            ]
        })));
    }
    catch (err) {
    }
    await workspaceService.initialize({
        id: generateUuid(),
        configPath
    });
});
const MemoizedInjectedConfigurationService = memoizedConstructor(InjectedConfigurationService);
function getServiceOverride(defaultWorkspaceUri) {
    _defaultWorkspaceUri = defaultWorkspaceUri;
    return {
        ...getServiceOverride$1(),
        [( ILabelService.toString())]: new SyncDescriptor(LabelService, undefined, true),
        [( IConfigurationService.toString())]: new SyncDescriptor(MemoizedInjectedConfigurationService, [], true),
        [( IWorkspaceContextService.toString())]: new SyncDescriptor(MemoizedInjectedConfigurationService, [], true),
        [( ITextResourceConfigurationService.toString())]: new SyncDescriptor(TextResourceConfigurationService, [], true),
        [( IWorkspaceEditingService.toString())]: new SyncDescriptor(MonacoWorkspaceEditingService, [], true),
        [( IWorkspacesService.toString())]: new SyncDescriptor(BrowserWorkspacesService, undefined, true)
    };
}
export { configurationRegistry, getServiceOverride as default, getUserConfiguration, onUserConfigurationChange, updateUserConfiguration };
