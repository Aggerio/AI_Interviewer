import { __decorate, __param } from '../node_modules/tslib/tslib.es6.js';
import { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';
import { ILifecycleService } from '../vscode/vs/workbench/services/lifecycle/common/lifecycle.js';
import { nullExtensionDescription, toExtensionDescription, IExtensionService, ExtensionHostExtensions } from '../vscode/vs/workbench/services/extensions/common/extensions.js';
import { ILogService, ILoggerService } from 'monaco-editor/esm/vs/platform/log/common/log.js';
import { ExtensionIdentifierMap } from 'monaco-editor/esm/vs/platform/extensions/common/extensions.js';
import { IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { INotificationService } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';
import { AbstractExtensionService, DeltaExtensionsQueueItem, ResolvedExtensions } from '../vscode/vs/workbench/services/extensions/common/abstractExtensionService.js';
import { ITelemetryService } from 'monaco-editor/esm/vs/platform/telemetry/common/telemetry.js';
import { Event } from 'monaco-editor/esm/vs/base/common/event.js';
import '../override/vs/platform/dialogs/common/dialogs.js';
import { IRemoteAuthorityResolverService } from '../vscode/vs/platform/remote/common/remoteAuthorityResolver.js';
import { IRemoteExtensionsScannerService } from '../vscode/vs/platform/remote/common/remoteExtensionsScanner.js';
import { IRemoteAgentService } from '../vscode/vs/workbench/services/remote/common/remoteAgentService.js';
import { IWorkbenchExtensionEnablementService, IWorkbenchExtensionManagementService } from '../vscode/vs/workbench/services/extensionManagement/common/extensionManagement.js';
import { IExtensionManifestPropertiesService, ExtensionManifestPropertiesService } from '../vscode/vs/workbench/services/extensions/common/extensionManifestPropertiesService.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { IProductService } from 'monaco-editor/esm/vs/platform/product/common/productService.js';
import { IBrowserWorkbenchEnvironmentService } from '../vscode/vs/workbench/services/environment/browser/environmentService.js';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
import { IUserDataInitializationService } from '../vscode/vs/workbench/services/userData/browser/userDataInit.js';
import { ExtensionsProposedApi } from '../vscode/vs/workbench/services/extensions/common/extensionsProposedApi.js';
import { BrowserExtensionHostFactory, BrowserExtensionHostKindPicker } from '../vscode/vs/workbench/services/extensions/browser/extensionService.js';
import { FetchFileSystemProvider } from '../vscode/vs/workbench/services/extensions/browser/webWorkerFileSystemProvider.js';
import { Schemas } from 'monaco-editor/esm/vs/base/common/network.js';
export { ExtensionHostKind } from '../vscode/vs/workbench/services/extensions/common/extensionHostKind.js';
import { IExtHostExtensionService } from '../vscode/vs/workbench/api/common/extHostExtensionService.js';
import { ExtHostExtensionService } from '../vscode/vs/workbench/api/worker/extHostExtensionService.js';
import { URI } from 'monaco-editor/esm/vs/base/common/uri.js';
import * as platform from 'monaco-editor/esm/vs/base/common/platform.js';
import { registerSingleton } from 'monaco-editor/esm/vs/platform/instantiation/common/extensions.js';
import { IExtensionStoragePaths, ExtensionStoragePaths } from '../vscode/vs/workbench/api/common/extHostStoragePaths.js';
import { WebWorkerExtensionHost } from '../vscode/vs/workbench/services/extensions/browser/webWorkerExtensionHost.js';
import { ExtensionHostMain } from '../vscode/vs/workbench/api/common/extensionHostMain.js';
import { BufferedEmitter } from '../vscode/vs/base/parts/ipc/common/ipc.net.js';
import { isLoggingOnly } from '../vscode/vs/platform/telemetry/common/telemetryUtils.js';
import { joinPath } from 'monaco-editor/esm/vs/base/common/resources.js';
import { DeferredPromise } from 'monaco-editor/esm/vs/base/common/async.js';
import { UIKind } from '../vscode/vs/workbench/services/extensions/common/extensionHostProtocol.js';
import { IUserDataProfilesService } from 'monaco-editor/esm/vs/platform/userDataProfile/common/userDataProfile.js';
import { ILayoutService } from 'monaco-editor/esm/vs/platform/layout/browser/layoutService.js';
import { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';
import { ILabelService } from 'monaco-editor/esm/vs/platform/label/common/label.js';
import getServiceOverride$1 from './output.js';
import { changeUrlDomain } from './tools/url.js';
import { registerAssets } from '../assets.js';
import { unsupported } from '../tools.js';
import '../vscode/vs/workbench/services/themes/common/colorExtensionPoint.js';
import '../vscode/vs/workbench/services/themes/common/iconExtensionPoint.js';
import '../vscode/vs/workbench/services/extensions/common/extensionsRegistry.js';
import '../vscode/vs/platform/theme/common/tokenClassificationRegistry.js';
import '../vscode/vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.js';
import '../vscode/vs/workbench/api/browser/statusBarExtensionPoint.js';
import '../vscode/vs/workbench/api/browser/mainThreadLocalization.js';
import '../vscode/vs/workbench/api/browser/mainThreadBulkEdits.js';
import '../vscode/vs/workbench/api/browser/mainThreadCodeInsets.js';
import '../vscode/vs/workbench/api/browser/mainThreadClipboard.js';
import '../vscode/vs/workbench/api/browser/mainThreadCommands.js';
import '../vscode/vs/workbench/api/browser/mainThreadConfiguration.js';
import '../vscode/vs/workbench/api/browser/mainThreadConsole.js';
import '../vscode/vs/workbench/api/browser/mainThreadDebugService.js';
import '../vscode/vs/workbench/api/browser/mainThreadDecorations.js';
import '../vscode/vs/workbench/api/browser/mainThreadDiagnostics.js';
import '../vscode/vs/workbench/api/browser/mainThreadDialogs.js';
import '../vscode/vs/workbench/api/browser/mainThreadDocumentContentProviders.js';
import '../vscode/vs/workbench/api/browser/mainThreadDocuments.js';
import '../vscode/vs/workbench/api/browser/mainThreadDocumentsAndEditors.js';
import '../vscode/vs/workbench/api/browser/mainThreadEditors.js';
import '../vscode/vs/workbench/api/browser/mainThreadEditorTabs.js';
import '../vscode/vs/workbench/api/browser/mainThreadErrors.js';
import '../vscode/vs/workbench/api/browser/mainThreadExtensionService.js';
import '../vscode/vs/workbench/api/browser/mainThreadFileSystem.js';
import '../vscode/vs/workbench/api/browser/mainThreadFileSystemEventService.js';
import '../vscode/vs/workbench/api/browser/mainThreadKeytar.js';
import '../vscode/vs/workbench/api/browser/mainThreadLanguageFeatures.js';
import '../vscode/vs/workbench/api/browser/mainThreadLanguages.js';
import '../vscode/vs/workbench/api/browser/mainThreadLogService.js';
import '../vscode/vs/workbench/api/browser/mainThreadMessageService.js';
import '../vscode/vs/workbench/api/browser/mainThreadManagedSockets.js';
import '../vscode/vs/workbench/api/browser/mainThreadOutputService.js';
import '../vscode/vs/workbench/api/browser/mainThreadProgress.js';
import '../vscode/vs/workbench/api/browser/mainThreadQuickDiff.js';
import '../vscode/vs/workbench/api/browser/mainThreadQuickOpen.js';
import '../vscode/vs/workbench/api/browser/mainThreadRemoteConnectionData.js';
import '../vscode/vs/workbench/api/browser/mainThreadSaveParticipant.js';
import '../vscode/vs/workbench/api/browser/mainThreadEditSessionIdentityParticipant.js';
import '../vscode/vs/workbench/api/browser/mainThreadSCM.js';
import '../vscode/vs/workbench/api/browser/mainThreadSearch.js';
import '../vscode/vs/workbench/api/browser/mainThreadStatusBar.js';
import '../vscode/vs/workbench/api/browser/mainThreadStorage.js';
import '../vscode/vs/workbench/api/browser/mainThreadTelemetry.js';
import '../vscode/vs/workbench/api/browser/mainThreadTerminalService.js';
import '../vscode/vs/workbench/api/browser/mainThreadTheming.js';
import '../vscode/vs/workbench/api/browser/mainThreadTreeViews.js';
import '../vscode/vs/workbench/api/browser/mainThreadDownloadService.js';
import '../vscode/vs/workbench/api/browser/mainThreadUrls.js';
import '../vscode/vs/workbench/api/browser/mainThreadUriOpeners.js';
import '../vscode/vs/workbench/api/browser/mainThreadWindow.js';
import '../vscode/vs/workbench/api/browser/mainThreadWebviewManager.js';
import '../vscode/vs/workbench/api/browser/mainThreadWorkspace.js';
import '../vscode/vs/workbench/api/browser/mainThreadComments.js';
import '../vscode/vs/workbench/api/browser/mainThreadNotebook.js';
import '../vscode/vs/workbench/api/browser/mainThreadNotebookKernels.js';
import '../vscode/vs/workbench/api/browser/mainThreadNotebookDocumentsAndEditors.js';
import '../vscode/vs/workbench/api/browser/mainThreadNotebookRenderers.js';
import '../vscode/vs/workbench/api/browser/mainThreadNotebookSaveParticipant.js';
import '../vscode/vs/workbench/api/browser/mainThreadInteractive.js';
import '../vscode/vs/workbench/api/browser/mainThreadInlineChat.js';
import '../vscode/vs/workbench/api/browser/mainThreadChat.js';
import '../vscode/vs/workbench/api/browser/mainThreadTask.js';
import '../vscode/vs/workbench/api/browser/mainThreadLabelService.js';
import '../vscode/vs/workbench/api/browser/mainThreadTunnelService.js';
import '../vscode/vs/workbench/api/browser/mainThreadAuthentication.js';
import '../vscode/vs/workbench/api/browser/mainThreadTimeline.js';
import '../vscode/vs/workbench/api/browser/mainThreadTesting.js';
import '../vscode/vs/workbench/api/browser/mainThreadSecretState.js';
import '../vscode/vs/workbench/api/browser/mainThreadShare.js';
import '../vscode/vs/workbench/api/browser/mainThreadProfilContentHandlers.js';
import '../vscode/vs/workbench/api/browser/mainThreadSemanticSimilarity.js';
import '../vscode/vs/workbench/api/browser/mainThreadIssueReporter.js';
import '../vscode/vs/workbench/api/common/extHost.common.services.js';
import { IDialogService } from '../vscode/vs/platform/dialogs/common/dialogs.js';
function createMessagePassingProtocolPair() {
    const emitterA = new BufferedEmitter();
    const emitterB = new BufferedEmitter();
    class SimpleMessagePassingProtocol {
        constructor(emitterIn, emitterOut) {
            this.emitterIn = emitterIn;
            this.emitterOut = emitterOut;
            this.onMessage = this.emitterIn.event;
        }
        send(buffer) {
            this.emitterOut.fire(buffer);
        }
    }
    return [new SimpleMessagePassingProtocol(emitterA, emitterB), new SimpleMessagePassingProtocol(emitterB, emitterA)];
}
class LocalExtHostExtensionService extends ExtHostExtensionService {
    constructor() {
        super(...arguments);
        this._extApiImpl = new ExtensionIdentifierMap();
    }
    async getApi(extensionId) {
        const [myRegistry, configProvider] = await Promise.all([
            this.getExtensionRegistry(),
            this._extHostConfiguration.getConfigProvider()
        ]);
        const extensionRegistry = { mine: myRegistry, all: this._globalRegistry };
        const ext = extensionId != null ? myRegistry.getExtensionDescription(extensionId) : undefined;
        if (ext != null) {
            let apiImpl = this._extApiImpl.get(ext.identifier);
            if (apiImpl == null) {
                apiImpl = this._apiFactory(ext, extensionRegistry, configProvider);
                this._extApiImpl.set(ext.identifier, apiImpl);
            }
            return apiImpl;
        }
        if (this._defaultApiImpl == null) {
            this._defaultApiImpl = this._apiFactory(nullExtensionDescription, extensionRegistry, configProvider);
        }
        return this._defaultApiImpl;
    }
}
registerSingleton(IExtHostExtensionService, LocalExtHostExtensionService, 0 );
registerSingleton(IExtensionStoragePaths, ExtensionStoragePaths, 0 );
const hostUtil = new class {
    constructor() {
        this.pid = undefined;
        this.exit = unsupported;
    }
    async exists(_path) {
        return true;
    }
    async realpath(path) {
        return path;
    }
}();
const localExtHostDeferred = new DeferredPromise();
const localExtHostPromise = localExtHostDeferred.p;
let LocalExtensionHost = class LocalExtensionHost {
    constructor(runningLocation, startup, _initDataProvider, _telemetryService, _contextService, _labelService, _logService, _loggerService, _environmentService, _productService, _userDataProfilesService) {
        this.runningLocation = runningLocation;
        this.startup = startup;
        this._initDataProvider = _initDataProvider;
        this._telemetryService = _telemetryService;
        this._contextService = _contextService;
        this._labelService = _labelService;
        this._logService = _logService;
        this._loggerService = _loggerService;
        this._environmentService = _environmentService;
        this._productService = _productService;
        this._userDataProfilesService = _userDataProfilesService;
        this.remoteAuthority = null;
        this.extensions = new ExtensionHostExtensions();
        this.onExit = Event.None;
        this._protocolPromise = null;
        this._extensionHostLogsLocation = joinPath(this._environmentService.extHostLogsPath, 'local');
    }
    async start() {
        if (this._protocolPromise == null) {
            this._protocolPromise = this._start();
        }
        return this._protocolPromise;
    }
    async _start() {
        const [mainThreadMessagePassingProtocol, extHostMessagePassingProtocol] = createMessagePassingProtocolPair();
        const initData = await this._createExtHostInitData();
        const hostMain = new ExtensionHostMain(extHostMessagePassingProtocol, initData, hostUtil, null);
        await localExtHostDeferred.complete(hostMain.getExtHostExtensionService());
        return mainThreadMessagePassingProtocol;
    }
    async _createExtHostInitData() {
        const initData = await this._initDataProvider.getInitData();
        const workspace = this._contextService.getWorkspace();
        const deltaExtensions = this.extensions.set(initData.allExtensions, initData.myExtensions);
        const nlsBaseUrl = this._productService.extensionsGallery?.nlsBaseUrl;
        let nlsUrlWithDetails;
        if (nlsBaseUrl != null && this._productService.commit != null && !platform.Language.isDefaultVariant()) {
            nlsUrlWithDetails = URI.joinPath(( URI.parse(nlsBaseUrl)), this._productService.commit, this._productService.version, platform.Language.value());
        }
        return {
            commit: this._productService.commit,
            version: this._productService.version,
            quality: this._productService.quality,
            parentPid: 0,
            environment: {
                isExtensionDevelopmentDebug: this._environmentService.debugRenderer,
                appName: this._productService.nameLong,
                appHost: this._productService.embedderIdentifier ?? (platform.isWeb ? 'web' : 'desktop'),
                appUriScheme: this._productService.urlProtocol,
                appLanguage: platform.language,
                extensionTelemetryLogResource: this._environmentService.extHostTelemetryLogFile,
                isExtensionTelemetryLoggingOnly: isLoggingOnly(this._productService, this._environmentService),
                extensionDevelopmentLocationURI: this._environmentService.extensionDevelopmentLocationURI,
                extensionTestsLocationURI: this._environmentService.extensionTestsLocationURI,
                globalStorageHome: this._userDataProfilesService.defaultProfile.globalStorageHome,
                workspaceStorageHome: this._environmentService.workspaceStorageHome,
                extensionLogLevel: this._environmentService.extensionLogLevel
            },
            workspace: this._contextService.getWorkbenchState() === 1
                ? undefined
                : {
                    configuration: workspace.configuration ?? undefined,
                    id: workspace.id,
                    name: this._labelService.getWorkspaceLabel(workspace),
                    transient: workspace.transient
                },
            consoleForward: {
                includeStack: false,
                logNative: this._environmentService.debugRenderer
            },
            allExtensions: deltaExtensions.toAdd,
            activationEvents: deltaExtensions.addActivationEvents,
            myExtensions: deltaExtensions.myToAdd,
            nlsBaseUrl: nlsUrlWithDetails,
            telemetryInfo: {
                sessionId: this._telemetryService.sessionId,
                machineId: this._telemetryService.machineId,
                firstSessionDate: this._telemetryService.firstSessionDate,
                msftInternal: this._telemetryService.msftInternal
            },
            logLevel: this._logService.getLevel(),
            loggers: [...this._loggerService.getRegisteredLoggers()],
            logsLocation: this._extensionHostLogsLocation,
            autoStart: ((this.startup === 1) ),
            remote: {
                authority: this._environmentService.remoteAuthority,
                connectionData: null,
                isRemote: false
            },
            uiKind: platform.isWeb ? UIKind.Web : UIKind.Desktop
        };
    }
    getInspectPort() {
        return undefined;
    }
    enableInspectPort() {
        return Promise.resolve(false);
    }
    dispose() {
    }
};
LocalExtensionHost = __decorate([
    ( __param(3, ITelemetryService)),
    ( __param(4, IWorkspaceContextService)),
    ( __param(5, ILabelService)),
    ( __param(6, ILogService)),
    ( __param(7, ILoggerService)),
    ( __param(8, IBrowserWorkbenchEnvironmentService)),
    ( __param(9, IProductService)),
    ( __param(10, IUserDataProfilesService))
], LocalExtensionHost);
let EsmWebWorkerExtensionHost = class EsmWebWorkerExtensionHost extends WebWorkerExtensionHost {
    constructor(workerConfig, runningLocation, startup, _initDataProvider, _telemetryService, _contextService, _labelService, _logService, _loggerService, _environmentService, _userDataProfilesService, _productService, _layoutService, _storageService) {
        super(runningLocation, startup, _initDataProvider, _telemetryService, _contextService, _labelService, _logService, _loggerService, _environmentService, _userDataProfilesService, _productService, _layoutService, _storageService);
        this.workerConfig = workerConfig;
    }
    async _getWebWorkerExtensionHostIframeSrc() {
        const url = new URL(await super._getWebWorkerExtensionHostIframeSrc(), window.location.href);
        url.searchParams.set('vscodeExtHostWorkerSrc', this.workerConfig.url);
        if (this.workerConfig.options != null) {
            url.searchParams.set('vscodeExtHostWorkerOptions', JSON.stringify(this.workerConfig.options));
        }
        url.searchParams.set('parentOrigin', window.origin);
        return ( url.toString());
    }
};
EsmWebWorkerExtensionHost = __decorate([
    ( __param(4, ITelemetryService)),
    ( __param(5, IWorkspaceContextService)),
    ( __param(6, ILabelService)),
    ( __param(7, ILogService)),
    ( __param(8, ILoggerService)),
    ( __param(9, IBrowserWorkbenchEnvironmentService)),
    ( __param(10, IUserDataProfilesService)),
    ( __param(11, IProductService)),
    ( __param(12, ILayoutService)),
    ( __param(13, IStorageService))
], EsmWebWorkerExtensionHost);
let LocalBrowserExtensionHostFactory = class LocalBrowserExtensionHostFactory extends BrowserExtensionHostFactory {
    constructor(workerConfig, _extensionsProposedApi, _scanWebExtensions, _getExtensions, _instantiationService, _remoteAgentService, _remoteAuthorityResolverService, _extensionEnablementService) {
        super(_extensionsProposedApi, _scanWebExtensions, _getExtensions, _instantiationService, _remoteAgentService, _remoteAuthorityResolverService, _extensionEnablementService);
        this.workerConfig = workerConfig;
    }
    createExtensionHost(runningLocations, runningLocation, isInitialStart) {
        switch (runningLocation.kind) {
            case 1 : {
                return this._instantiationService.createInstance(LocalExtensionHost, runningLocation, 1 , this._createLocalExtensionHostDataProvider(runningLocations, runningLocation, isInitialStart));
            }
            case 2 : {
                if (this.workerConfig == null) {
                    return null;
                }
                const startup = ((isInitialStart ? 2  : 1) );
                return this._instantiationService.createInstance(EsmWebWorkerExtensionHost, this.workerConfig, runningLocation, startup, this._createLocalExtensionHostDataProvider(runningLocations, runningLocation, isInitialStart));
            }
            case 3 : {
                return super.createExtensionHost(runningLocations, runningLocation, isInitialStart);
            }
        }
    }
};
LocalBrowserExtensionHostFactory = __decorate([
    ( __param(4, IInstantiationService)),
    ( __param(5, IRemoteAgentService)),
    ( __param(6, IRemoteAuthorityResolverService)),
    ( __param(7, IWorkbenchExtensionEnablementService))
], LocalBrowserExtensionHostFactory);
let LocalBrowserExtensionHostKindPicker = class LocalBrowserExtensionHostKindPicker extends BrowserExtensionHostKindPicker {
    constructor(allowedExtHostKinds, _logService) {
        super(_logService);
        this.allowedExtHostKinds = allowedExtHostKinds;
        this.extensionHostKinds = new Map();
    }
    pickExtensionHostKind(extensionId, extensionKinds, isInstalledLocally, isInstalledRemotely, preference) {
        const forcedKind = this.extensionHostKinds.get(extensionId.value);
        if (forcedKind != null) {
            return forcedKind;
        }
        const detectedKind = super.pickExtensionHostKind(extensionId, extensionKinds, isInstalledLocally, isInstalledRemotely, preference);
        if (detectedKind != null && !this.allowedExtHostKinds.includes(detectedKind)) {
            return this.allowedExtHostKinds[0] ?? null;
        }
        return detectedKind;
    }
    setForcedExtensionHostKind(id, kind) {
        this.extensionHostKinds.set(id, kind);
    }
    removeForcedExtensionHostKind(id) {
        this.extensionHostKinds.delete(id);
    }
};
LocalBrowserExtensionHostKindPicker = __decorate([
    ( __param(1, ILogService))
], LocalBrowserExtensionHostKindPicker);
let SimpleExtensionService = class SimpleExtensionService extends AbstractExtensionService {
    constructor(workerConfig, instantiationService, notificationService, browserEnvironmentService, telemetryService, extensionEnablementService, fileService, productService, extensionManagementService, contextService, configurationService, extensionManifestPropertiesService, logService, remoteAgentService, remoteExtensionsScannerService, lifecycleService, remoteAuthorityResolverService, userDataInitializationService, dialogService) {
        const extensionsProposedApi = instantiationService.createInstance(ExtensionsProposedApi);
        const extensionHostFactory = new LocalBrowserExtensionHostFactory(workerConfig, extensionsProposedApi, async () => [], () => this._getExtensions(), instantiationService, remoteAgentService, remoteAuthorityResolverService, extensionEnablementService);
        super(extensionsProposedApi, extensionHostFactory, new LocalBrowserExtensionHostKindPicker(workerConfig != null ? [2 , 1 ] : [1 ], logService), instantiationService, notificationService, browserEnvironmentService, telemetryService, extensionEnablementService, fileService, productService, extensionManagementService, contextService, configurationService, extensionManifestPropertiesService, logService, remoteAgentService, remoteExtensionsScannerService, lifecycleService, remoteAuthorityResolverService, dialogService);
        void lifecycleService.when(2 ).then(async () => {
            await userDataInitializationService.initializeInstalledExtensions(instantiationService);
            return this._initialize();
        });
        this._initFetchFileSystem();
    }
    _initFetchFileSystem() {
        const provider = new FetchFileSystemProvider();
        this._register(this._fileService.registerProvider(Schemas.http, provider));
        this._register(this._fileService.registerProvider(Schemas.https, provider));
    }
    async deltaExtensions(toAdd, toRemove) {
        const extHostPicker = this._extensionHostKindPicker;
        for (const extension of toAdd) {
            if (extension.extHostKind != null) {
                extHostPicker.setForcedExtensionHostKind(extension.identifier.id, extension.extHostKind);
            }
        }
        for (const extension of toRemove) {
            extHostPicker.removeForcedExtensionHostKind(extension.identifier.id);
        }
        await this._handleDeltaExtensions(new DeltaExtensionsQueueItem(toAdd, toRemove));
    }
    async _resolveExtensions() {
        return new ResolvedExtensions([], [], false, false);
    }
    async _scanSingleExtension(extension) {
        return toExtensionDescription(extension);
    }
    _onExtensionHostExit() {
        this._doStopExtensionHosts();
    }
    _resolveAuthority(remoteAuthority) {
        return this._resolveAuthorityOnExtensionHosts(2 , remoteAuthority);
    }
};
SimpleExtensionService = __decorate([
    ( __param(1, IInstantiationService)),
    ( __param(2, INotificationService)),
    ( __param(3, IBrowserWorkbenchEnvironmentService)),
    ( __param(4, ITelemetryService)),
    ( __param(5, IWorkbenchExtensionEnablementService)),
    ( __param(6, IFileService)),
    ( __param(7, IProductService)),
    ( __param(8, IWorkbenchExtensionManagementService)),
    ( __param(9, IWorkspaceContextService)),
    ( __param(10, IConfigurationService)),
    ( __param(11, IExtensionManifestPropertiesService)),
    ( __param(12, ILogService)),
    ( __param(13, IRemoteAgentService)),
    ( __param(14, IRemoteExtensionsScannerService)),
    ( __param(15, ILifecycleService)),
    ( __param(16, IRemoteAuthorityResolverService)),
    ( __param(17, IUserDataInitializationService)),
    ( __param(18, IDialogService))
], SimpleExtensionService);
let iframeAlternateDomains;
registerAssets({
    'vs/workbench/services/extensions/worker/webWorkerExtensionHostIframe.html': () => changeUrlDomain(new URL('../assets/webWorkerExtensionHostIframe.html', import.meta.url).href, iframeAlternateDomains)
});
function getServiceOverride(workerConfig, _iframeAlternateDomains) {
    if (_iframeAlternateDomains != null) {
        iframeAlternateDomains = _iframeAlternateDomains;
    }
    const _workerConfig = workerConfig != null
        ? {
            ...workerConfig,
            url: changeUrlDomain(workerConfig.url, iframeAlternateDomains)
        }
        : undefined;
    return {
        ...getServiceOverride$1(),
        [( IExtensionService.toString())]: new SyncDescriptor(SimpleExtensionService, [_workerConfig], false),
        [( IExtensionManifestPropertiesService.toString())]: new SyncDescriptor(ExtensionManifestPropertiesService, [], true)
    };
}
function getLocalExtHostExtensionService() {
    return localExtHostPromise;
}
export { LocalExtHostExtensionService, SimpleExtensionService, getServiceOverride as default, getLocalExtHostExtensionService };
