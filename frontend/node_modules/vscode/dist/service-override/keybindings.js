import '../missing-services.js';
import { StandaloneServices } from 'monaco-editor/esm/vs/editor/standalone/browser/standaloneServices.js';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
import { WorkbenchKeybindingService } from '../vscode/vs/workbench/services/keybinding/browser/keybindingService.js';
import { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';
import { VSBuffer } from 'monaco-editor/esm/vs/base/common/buffer.js';
import { IUserDataProfilesService } from 'monaco-editor/esm/vs/platform/userDataProfile/common/userDataProfile.js';
import { IKeyboardLayoutService } from '../vscode/vs/platform/keyboardLayout/common/keyboardLayout.js';
import { BrowserKeyboardLayoutService } from '../vscode/vs/workbench/services/keybinding/browser/keyboardLayoutService.js';
import { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';
import { ICommandService } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';
import { CommandService } from '../vscode/vs/workbench/services/commands/common/commandService.js';
import { toDisposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import getServiceOverride$1 from './files.js';
import '../vscode/vs/workbench/browser/workbench.contribution.js';
import '../vscode/vs/workbench/contrib/keybindings/browser/keybindings.contribution.js';
async function updateUserKeybindings(keybindingsJson) {
    const userDataProfilesService = StandaloneServices.get(IUserDataProfilesService);
    await StandaloneServices.get(IFileService).writeFile(userDataProfilesService.defaultProfile.keybindingsResource, VSBuffer.fromString(keybindingsJson));
}
class DynamicWorkbenchKeybindingService extends WorkbenchKeybindingService {
    constructor() {
        super(...arguments);
        this.keybindingProviders = [];
    }
    registerKeybindingProvider(provider) {
        this.keybindingProviders.push(provider);
        this.updateResolver();
        return toDisposable(() => {
            const idx = this.keybindingProviders.indexOf(provider);
            if (idx >= 0) {
                this.keybindingProviders.splice(idx, 1);
                this.updateResolver();
            }
        });
    }
    _getResolver() {
        return super._getResolver();
    }
    getUserKeybindingItems() {
        return [...super.getUserKeybindingItems(), ...this.keybindingProviders.flatMap(provider => provider())];
    }
}
function getServiceOverride() {
    return {
        ...getServiceOverride$1(),
        [( IKeybindingService.toString())]: new SyncDescriptor(DynamicWorkbenchKeybindingService, [], false),
        [( IKeyboardLayoutService.toString())]: new SyncDescriptor(BrowserKeyboardLayoutService, undefined, true),
        [( ICommandService.toString())]: new SyncDescriptor(CommandService, [], true)
    };
}
export { getServiceOverride as default, updateUserKeybindings };
