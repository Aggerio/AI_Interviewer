import { Event } from '../vscode/vs/base/common/event.js';
import { IProcessEnvironment } from '../vscode/vs/base/common/platform.js';
import { PerformanceMark } from '../vscode/vs/base/common/performance.js';
import { unsupported } from '../dist/types/src/tools.js';
import { IEditorOverrideServices } from '../vscode/vs/editor/standalone/browser/standaloneServices.js';
import { ITerminalBackend, IPtyHostLatencyMeasurement, ITerminalProfile, ITerminalsLayoutInfo, ITerminalChildProcess, ITerminalLaunchError, IProcessReadyEvent } from '../vscode/vs/platform/terminal/common/terminal.js';

declare abstract class SimpleTerminalBackend implements ITerminalBackend {
    getLatency: () => Promise<IPtyHostLatencyMeasurement[]>;
    isResponsive: boolean;
    private readonly _whenConnected;
    get whenReady(): Promise<void>;
    setReady(): void;
    getPerformanceMarks(): Promise<PerformanceMark[]>;
    restartPtyHost: typeof unsupported;
    remoteAuthority: undefined;
    onPtyHostUnresponsive: Event<any>;
    onPtyHostResponsive: Event<any>;
    onPtyHostRestart: Event<any>;
    onDidRequestDetach: Event<any>;
    attachToProcess: typeof unsupported;
    attachToRevivedProcess: typeof unsupported;
    listProcesses: typeof unsupported;
    getProfiles: () => Promise<ITerminalProfile[]>;
    getWslPath: typeof unsupported;
    getEnvironment: () => Promise<IProcessEnvironment>;
    getShellEnvironment: () => Promise<IProcessEnvironment | undefined>;
    setTerminalLayoutInfo: () => Promise<void>;
    updateTitle: () => Promise<void>;
    updateIcon: () => Promise<void>;
    getTerminalLayoutInfo: () => Promise<ITerminalsLayoutInfo | undefined>;
    reduceConnectionGraceTime: typeof unsupported;
    requestDetachInstance: typeof unsupported;
    acceptDetachInstanceReply: typeof unsupported;
    persistTerminalState: typeof unsupported;
    abstract getDefaultSystemShell: ITerminalBackend['getDefaultSystemShell'];
    abstract createProcess: ITerminalBackend['createProcess'];
}
declare abstract class SimpleTerminalProcess implements ITerminalChildProcess {
    readonly id: number;
    readonly pid: number;
    readonly cwd: string;
    readonly onData: Event<string>;
    private onReady;
    constructor(id: number, pid: number, cwd: string, onData: Event<string>);
    abstract clearBuffer(): void | Promise<void>;
    abstract start(): Promise<ITerminalLaunchError | {
        injectedArgs: string[];
    } | undefined>;
    abstract shutdown(immediate: boolean): void;
    abstract input(data: string): void;
    abstract resize(cols: number, rows: number): void;
    shouldPersist: boolean;
    onProcessData: Event<string>;
    onProcessReady: Event<IProcessReadyEvent>;
    onDidChangeProperty: Event<any>;
    onProcessExit: Event<any>;
    processBinary: typeof unsupported;
    acknowledgeDataEvent(): void;
    setUnicodeVersion(): Promise<void>;
    getInitialCwd(): Promise<string>;
    getCwd(): Promise<string>;
    getLatency(): Promise<number>;
    refreshProperty: () => Promise<never>;
    updateProperty(): Promise<void>;
}
declare function getServiceOverride(backend: ITerminalBackend): IEditorOverrideServices;

export { ITerminalBackend, ITerminalChildProcess, SimpleTerminalBackend, SimpleTerminalProcess, getServiceOverride as default };
