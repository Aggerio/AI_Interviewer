import { __decorate, __param } from '../node_modules/tslib/tslib.es6.js';
import '../missing-services.js';
import { StandaloneServices } from 'monaco-editor/esm/vs/editor/standalone/browser/standaloneServices.js';
import { ITextMateTokenizationService } from '../vscode/vs/workbench/services/textMate/browser/textMateTokenizationFeature.js';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
import { TextMateTokenizationFeature } from '../vscode/vs/workbench/services/textMate/browser/textMateTokenizationFeatureImpl.js';
import { TokenClassificationExtensionPoints } from '../vscode/vs/workbench/services/themes/common/tokenClassificationExtensionPoint.js';
import { Extensions } from '../vscode/vs/workbench/common/contributions.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { ILifecycleService } from '../vscode/vs/workbench/services/lifecycle/common/lifecycle.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import getServiceOverride$1 from './files.js';
import { registerServiceInitializeParticipant } from '../lifecycle.js';
import { registerAssets } from '../assets.js';
const _onigWasm = new URL('vscode-oniguruma/release/onig.wasm', import.meta.url).href;
registerAssets({
    'vscode-oniguruma/../onig.wasm': _onigWasm,
    'vs/../../node_modules/vscode-oniguruma/release/onig.wasm': _onigWasm
});
registerServiceInitializeParticipant(async (accessor) => {
    void accessor.get(ILifecycleService).when(2 ).then(() => {
        StandaloneServices.get(ITextMateTokenizationService);
    });
});
let ExtensionPoints = class ExtensionPoints {
    constructor(instantiationService) {
        this.instantiationService = instantiationService;
        this.instantiationService.createInstance(TokenClassificationExtensionPoints);
    }
};
ExtensionPoints = __decorate([
    ( __param(0, IInstantiationService))
], ExtensionPoints);
( Registry.as(Extensions.Workbench)).registerWorkbenchContribution(ExtensionPoints, 1 );
function getServiceOverride() {
    return {
        ...getServiceOverride$1(),
        [( ITextMateTokenizationService.toString())]: new SyncDescriptor(TextMateTokenizationFeature, [], false)
    };
}
export { ITextMateTokenizationService, getServiceOverride as default };
