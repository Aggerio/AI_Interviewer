import { __decorate, __param } from '../node_modules/tslib/tslib.es6.js';
import '../missing-services.js';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
import { IQuickInputService } from 'monaco-editor/esm/vs/platform/quickinput/common/quickInput.js';
import { CancellationToken } from 'monaco-editor/esm/vs/base/common/cancellation.js';
import { StandaloneQuickInputService } from 'monaco-editor/esm/vs/editor/standalone/browser/quickInput/standaloneQuickInputService.js';
import { StandaloneServices } from 'monaco-editor/esm/vs/editor/standalone/browser/standaloneServices.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { QuickInputService } from '../vscode/vs/workbench/services/quickinput/browser/quickInputService.js';
import { ICodeEditorService } from 'monaco-editor/esm/vs/editor/browser/services/codeEditorService.js';
import { StandaloneCodeEditor } from 'monaco-editor/esm/vs/editor/standalone/browser/standaloneCodeEditor.js';
import { CommandsQuickAccessProvider } from '../vscode/vs/workbench/contrib/quickaccess/browser/commandsQuickAccess.js';
import '../vscode/vs/workbench/contrib/codeEditor/browser/quickaccess/gotoLineQuickAccess.js';
import '../vscode/vs/workbench/contrib/codeEditor/browser/quickaccess/gotoSymbolQuickAccess.js';
import '../vscode/vs/workbench/browser/actions/quickAccessActions.js';
import '../vscode/vs/workbench/contrib/quickaccess/browser/quickAccess.contribution.js';
let isKeybindingConfigurationVisible = () => {
    return false;
};
let shouldUseGlobalPicker = () => {
    return false;
};
const original = CommandsQuickAccessProvider.prototype['getCommandPicks'];
CommandsQuickAccessProvider.prototype['getCommandPicks'] = async function (token) {
    let result = await original.call(this, token);
    if (!isKeybindingConfigurationVisible()) {
        result = ( result.map(picks => ({
            ...picks,
            buttons: picks.buttons?.filter(button => button.tooltip !== 'Configure Keybinding')
        })));
    }
    return result;
};
let DelegateQuickInputService = class DelegateQuickInputService {
    constructor(instantiationService) {
        this.instantiationService = instantiationService;
        this.workbenchQuickInputService = instantiationService.createInstance(QuickInputService);
    }
    get activeService() {
        const activeCodeEditor = StandaloneServices.get(ICodeEditorService).getFocusedCodeEditor();
        if (!(activeCodeEditor instanceof StandaloneCodeEditor) && shouldUseGlobalPicker()) {
            return this.workbenchQuickInputService;
        }
        this.standaloneQuickInputService ?? (this.standaloneQuickInputService = this.instantiationService.createInstance(StandaloneQuickInputService));
        return this.standaloneQuickInputService;
    }
    get quickAccess() { return this.activeService.quickAccess; }
    get backButton() { return this.activeService.backButton; }
    get onShow() { return this.activeService.onShow; }
    get onHide() { return this.activeService.onHide; }
    pick(picks, options = {}, token = CancellationToken.None) {
        return this.activeService .pick(picks, options, token);
    }
    input(options, token) {
        return this.activeService.input(options, token);
    }
    createQuickPick() {
        return this.activeService.createQuickPick();
    }
    createInputBox() {
        return this.activeService.createInputBox();
    }
    focus() {
        return this.activeService.focus();
    }
    toggle() {
        return this.activeService.toggle();
    }
    navigate(next, quickNavigate) {
        return this.activeService.navigate(next, quickNavigate);
    }
    accept() {
        return this.activeService.accept();
    }
    back() {
        return this.activeService.back();
    }
    cancel() {
        return this.activeService.cancel();
    }
};
DelegateQuickInputService = __decorate([
    ( __param(0, IInstantiationService))
], DelegateQuickInputService);
function getServiceOverride({ isKeybindingConfigurationVisible: _isKeybindingConfigurationVisible, shouldUseGlobalPicker: _shouldUseGlobalPicker } = {}) {
    if (_isKeybindingConfigurationVisible != null) {
        isKeybindingConfigurationVisible = _isKeybindingConfigurationVisible;
    }
    if (_shouldUseGlobalPicker != null) {
        shouldUseGlobalPicker = _shouldUseGlobalPicker;
    }
    return {
        [( IQuickInputService.toString())]: new SyncDescriptor(DelegateQuickInputService, [], true)
    };
}
export { getServiceOverride as default };
