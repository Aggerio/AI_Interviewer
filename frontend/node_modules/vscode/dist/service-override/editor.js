import { __decorate, __param } from '../node_modules/tslib/tslib.es6.js';
import { ICodeEditorService } from 'monaco-editor/esm/vs/editor/browser/services/codeEditorService.js';
import { CodeEditorService } from '../vscode/vs/workbench/services/editor/browser/codeEditorService.js';
import { IEditorService } from '../vscode/vs/workbench/services/editor/common/editorService.js';
import { EditorExtensions } from '../vscode/vs/workbench/common/editor.js';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
import { ITextEditorService, TextEditorService } from '../vscode/vs/workbench/services/textfile/common/textEditorService.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { FILE_EDITOR_INPUT_ID } from '../vscode/vs/workbench/contrib/files/common/files.js';
import { IEditorGroupsService } from '../vscode/vs/workbench/services/editor/common/editorGroupsService.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { MonacoEditorService, MonacoDelegateEditorGroupsService } from './tools/editor.js';
import { unsupported } from '../tools.js';
import { EmptyEditorGroupsService } from '../missing-services.js';
import '../vscode/vs/workbench/browser/parts/editor/editor.contribution.js';
let MonacoEditorGroupsService = class MonacoEditorGroupsService extends MonacoDelegateEditorGroupsService {
    constructor(instantiationService) {
        super(instantiationService.createInstance(EmptyEditorGroupsService), instantiationService);
    }
};
MonacoEditorGroupsService = __decorate([
    ( __param(0, IInstantiationService))
], MonacoEditorGroupsService);
( Registry.as(EditorExtensions.EditorFactory)).registerFileEditorFactory({
    typeId: FILE_EDITOR_INPUT_ID,
    createFileEditor: unsupported,
    isFileEditor: (obj) => false
});
function getServiceOverride(openEditor) {
    return {
        [( ICodeEditorService.toString())]: new SyncDescriptor(CodeEditorService, undefined, true),
        [( IEditorService.toString())]: new SyncDescriptor(MonacoEditorService, [openEditor, () => false], true),
        [( ITextEditorService.toString())]: new SyncDescriptor(TextEditorService, [], false),
        [( IEditorGroupsService.toString())]: new SyncDescriptor(MonacoEditorGroupsService)
    };
}
export { MonacoEditorService, getServiceOverride as default };
