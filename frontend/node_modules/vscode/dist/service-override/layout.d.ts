import { Event } from '../vscode/vs/base/common/event.js';
import { ServicesAccessor } from '../vscode/vs/platform/instantiation/common/instantiation.js';
import { Dimension, IDimension } from '../vscode/vs/base/browser/dom.js';
import { IEditorOverrideServices } from '../vscode/vs/editor/standalone/browser/standaloneServices.js';
import { IWorkbenchLayoutService, Parts, PanelAlignment, Position } from '../vscode/vs/workbench/services/layout/browser/layoutService.js';
import { ILayoutService, ILayoutOffsetInfo } from '../vscode/vs/platform/layout/browser/layoutService.js';
import { Part } from '../vscode/vs/workbench/browser/part.js';

declare class LayoutService implements ILayoutService, IWorkbenchLayoutService {
    container: HTMLElement;
    readonly _serviceBrand: undefined;
    private paneCompositeService;
    private editorGroupService;
    private statusBarService;
    private viewDescriptorService;
    constructor(container: HTMLElement);
    onDidChangeFullscreen: Event<any>;
    onDidChangeZenMode: Event<any>;
    onDidChangeWindowMaximized: Event<any>;
    onDidChangeCenteredLayout: Event<any>;
    onDidChangePanelPosition: Event<any>;
    onDidChangePanelAlignment: Event<any>;
    onDidChangeNotificationsVisibility: Event<any>;
    openedDefaultEditors: boolean;
    whenRestored: Promise<void>;
    init(accessor: ServicesAccessor): void;
    focusPart(part: Parts): void;
    getDimension(part: Parts): Dimension | undefined;
    toggleMaximizedPanel(): void;
    hasWindowBorder(): boolean;
    getWindowBorderWidth(): number;
    getWindowBorderRadius(): string | undefined;
    toggleMenuBar(): void;
    setPanelPosition(): void;
    getPanelAlignment(): PanelAlignment;
    setPanelAlignment(): void;
    toggleZenMode(): void;
    isEditorLayoutCentered(): boolean;
    centerEditorLayout(): void;
    resizePart(): void;
    isWindowMaximized(): boolean;
    updateWindowMaximizedState(): void;
    getVisibleNeighborPart(): Parts | undefined;
    getMaximumEditorDimensions(): Dimension;
    isPanelMaximized(): boolean;
    getPanelPosition(): Position;
    private readonly parts;
    hasFocus(part: Parts): boolean;
    getContainer(part: Parts): HTMLElement | undefined;
    getPart(key: Parts): Part;
    private hiddenParts;
    private hasViews;
    setPartHidden(hidden: boolean, part: Exclude<Parts, Parts.STATUSBAR_PART | Parts.TITLEBAR_PART>): void;
    isVisible(part: Parts): boolean;
    getSideBarPosition(): Position;
    registerPart(part: Part): void;
    isRestored(): boolean;
    private _onDidChangePartVisibility;
    onDidChangePartVisibility: Event<void>;
    readonly offset: ILayoutOffsetInfo;
    private readonly _onDidLayout;
    readonly onDidLayout: Event<IDimension>;
    private _dimension;
    get dimension(): IDimension;
    layout(): void;
    get hasContainer(): boolean;
    focus(): void;
}
declare function getServiceOverride(container?: HTMLElement): IEditorOverrideServices;

export { LayoutService, getServiceOverride as default };
