import '../missing-services.js';
import { NotificationsToasts } from '../vscode/vs/workbench/browser/parts/notifications/notificationsToasts.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { NotificationService } from '../vscode/vs/workbench/services/notification/common/notificationService.js';
import { INotificationService } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';
import * as dom from 'monaco-editor/esm/vs/base/browser/dom.js';
import { registerNotificationCommands } from '../vscode/vs/workbench/browser/parts/notifications/notificationsCommands.js';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
import { NotificationsCenter } from '../vscode/vs/workbench/browser/parts/notifications/notificationsCenter.js';
import { NotificationsAlerts } from '../vscode/vs/workbench/browser/parts/notifications/notificationsAlerts.js';
import { NotificationsTelemetry } from '../vscode/vs/workbench/browser/parts/notifications/notificationsTelemetry.js';
import { ILayoutService } from 'monaco-editor/esm/vs/platform/layout/browser/layoutService.js';
import getServiceOverride$1 from './layout.js';
import { onRenderWorkbench } from '../lifecycle.js';
onRenderWorkbench(async (accessor) => {
    const container = accessor.get(ILayoutService).container;
    const model = accessor.get(INotificationService).model;
    const instantiationService = accessor.get(IInstantiationService);
    setTimeout(() => {
        const notificationsCenter = instantiationService.createInstance(NotificationsCenter, container, model);
        const notificationsToasts = instantiationService.createInstance(NotificationsToasts, container, model);
        instantiationService.createInstance(NotificationsAlerts, model);
        instantiationService.createInstance(NotificationsTelemetry);
        registerNotificationCommands(notificationsCenter, notificationsToasts, model);
        notificationsToasts.layout(dom.getClientArea(container));
    });
});
function getServiceOverride(container) {
    return {
        [( INotificationService.toString())]: new SyncDescriptor(NotificationService, undefined, true),
        ...getServiceOverride$1(container)
    };
}
export { getServiceOverride as default };
