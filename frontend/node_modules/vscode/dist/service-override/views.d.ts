import { IDisposable } from '../vscode/vs/base/common/lifecycle.js';
export { IReference } from '../vscode/vs/base/common/lifecycle.js';
import { ServicesAccessor } from '../vscode/vs/platform/instantiation/common/instantiation.js';
export { IEditorOptions } from '../vscode/vs/platform/editor/common/editor.js';
import { IEditorCloseHandler, EditorInput } from '../vscode/vs/workbench/common/editor/editorInput.js';
export { IResolvedTextEditorModel } from '../vscode/vs/editor/common/services/resolverService.js';
import { IEditorOverrideServices } from '../vscode/vs/editor/standalone/browser/standaloneServices.js';
import { ViewContainerLocation } from '../vscode/vs/workbench/common/views.js';
export { SidebarPart } from '../vscode/vs/workbench/browser/parts/sidebar/sidebarPart.js';
export { ActivityService } from '../vscode/vs/workbench/services/activity/browser/activityService.js';
export { ActivitybarPart } from '../vscode/vs/workbench/browser/parts/activitybar/activitybarPart.js';
export { HoverService } from '../vscode/vs/workbench/services/hover/browser/hoverService.js';
export { PanelPart } from '../vscode/vs/workbench/browser/parts/panel/panelPart.js';
import { Part } from '../vscode/vs/workbench/browser/part.js';
import { Codicon } from '../vscode/vs/base/common/codicons.js';
export { StatusbarPart } from '../vscode/vs/workbench/browser/parts/statusbar/statusbarPart.js';
import { Parts } from '../vscode/vs/workbench/services/layout/browser/layoutService.js';
export { ConfirmResult } from '../vscode/vs/platform/dialogs/common/dialogs.js';
import { OpenEditor } from '../dist/types/src/service-override/tools/editor.js';

declare function renderPart(partContainer: HTMLElement, part: Part): void;
declare function attachPart(part: Parts, container: HTMLElement): IDisposable;
declare function onPartVisibilityChange(part: Parts, listener: (visible: boolean) => void): IDisposable;
declare function isPartVisibile(part: Parts): boolean;
declare function setPartVisibility(part: Exclude<Parts, Parts.STATUSBAR_PART | Parts.TITLEBAR_PART>, visible: boolean): void;
declare function renderActivitybarPar(container: HTMLElement): IDisposable;
declare function renderSidebarPart(container: HTMLElement): IDisposable;
declare function renderPanelPart(container: HTMLElement): IDisposable;
declare function renderAuxiliaryPart(container: HTMLElement): IDisposable;
declare function renderEditorPart(container: HTMLElement): IDisposable;
declare function renderStatusBarPart(container: HTMLElement): IDisposable;
type Label = string | {
    short: string;
    medium: string;
    long: string;
};
interface EditorPanelOption {
    readonly id: string;
    name: string;
    renderBody(container: HTMLElement): IDisposable;
}
interface SimpleEditorInput extends EditorInput {
    setName(name: Label): void;
    setTitle(title: Label): void;
    setDescription(description: Label): void;
    setDirty(dirty: boolean): void;
}
declare function registerEditorPane(options: EditorPanelOption): {
    disposable: IDisposable;
    CustomEditorInput: new (closeHandler?: IEditorCloseHandler) => SimpleEditorInput;
};
interface CustomViewOption {
    readonly id: string;
    name: string;
    order?: number;
    renderBody(container: HTMLElement): IDisposable;
    location: ViewContainerLocation;
    icon?: string;
    canMoveView?: boolean;
    default?: boolean;
    actions?: {
        id: string;
        title: string;
        tooltip?: string;
        order?: number;
        run?(accessor: ServicesAccessor): Promise<void>;
        icon?: keyof typeof Codicon;
        render?(container: HTMLElement): void;
    }[];
}
declare function registerCustomView(options: CustomViewOption): IDisposable;
declare function isEditorPartVisible(): boolean;
declare function getServiceOverride(openEditorFallback?: OpenEditor, _webviewIframeAlternateDomains?: string): IEditorOverrideServices;

export { CustomViewOption, EditorPanelOption, IEditorCloseHandler, OpenEditor, Parts, ViewContainerLocation, attachPart, getServiceOverride as default, isEditorPartVisible, isPartVisibile, onPartVisibilityChange, registerCustomView, registerEditorPane, renderActivitybarPar, renderAuxiliaryPart, renderEditorPart, renderPanelPart, renderPart, renderSidebarPart, renderStatusBarPart, setPartVisibility };
