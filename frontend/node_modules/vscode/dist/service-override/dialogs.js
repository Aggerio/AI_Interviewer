import '../missing-services.js';
import '../vscode/vs/workbench/browser/parts/dialogs/dialog.web.contribution.js';
import { DialogService } from '../vscode/vs/workbench/services/dialogs/common/dialogService.js';
import '../override/vs/platform/dialogs/common/dialogs.js';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
import { AbstractFileDialogService } from '../vscode/vs/workbench/services/dialogs/browser/abstractFileDialogService.js';
import getServiceOverride$1 from './layout.js';
import { unsupported } from '../tools.js';
import { IDialogService, IFileDialogService } from '../vscode/vs/platform/dialogs/common/dialogs.js';
class FileDialogService extends AbstractFileDialogService {
    constructor() {
        super(...arguments);
        this.pickWorkspaceAndOpen = unsupported;
    }
    async pickFileFolderAndOpen(options) {
        const schema = this.getFileSystemSchema(options);
        if (options.defaultUri == null) {
            options.defaultUri = await this.defaultFilePath(schema);
        }
        return super.pickFileFolderAndOpenSimplified(schema, options, false);
    }
    async pickFolderAndOpen(options) {
        const schema = this.getFileSystemSchema(options);
        if (options.defaultUri == null) {
            options.defaultUri = await this.defaultFolderPath(schema);
        }
        return super.pickFolderAndOpenSimplified(schema, options);
    }
    async pickFileAndOpen(options) {
        const schema = this.getFileSystemSchema(options);
        if (options.defaultUri == null) {
            options.defaultUri = await this.defaultFilePath(schema);
        }
        return super.pickFileAndOpenSimplified(schema, options, false);
    }
    async showSaveDialog(options) {
        const schema = this.getFileSystemSchema(options);
        return super.showSaveDialogSimplified(schema, options);
    }
    async showOpenDialog(options) {
        const schema = this.getFileSystemSchema(options);
        return super.showOpenDialogSimplified(schema, options);
    }
    async pickFileToSave(defaultUri, availableFileSystems) {
        const schema = this.getFileSystemSchema({ defaultUri, availableFileSystems });
        const options = this.getPickFileToSaveDialogOptions(defaultUri, availableFileSystems);
        return super.pickFileToSaveSimplified(schema, options);
    }
}
function getServiceOverride(container) {
    return {
        [( IDialogService.toString())]: new SyncDescriptor(DialogService, undefined, true),
        [( IFileDialogService.toString())]: new SyncDescriptor(FileDialogService, undefined, true),
        ...getServiceOverride$1(container)
    };
}
export { getServiceOverride as default };
