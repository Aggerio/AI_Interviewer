import { __decorate, __param } from '../node_modules/tslib/tslib.es6.js';
import '../missing-services.js';
import { StandaloneServices } from 'monaco-editor/esm/vs/editor/standalone/browser/standaloneServices.js';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
import { Extensions, IViewsService, IViewDescriptorService } from '../vscode/vs/workbench/common/views.js';
export { ViewContainerLocation } from '../vscode/vs/workbench/common/views.js';
import { ViewsService } from '../vscode/vs/workbench/browser/parts/views/viewsService.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
export { SidebarPart } from '../vscode/vs/workbench/browser/parts/sidebar/sidebarPart.js';
import { ViewDescriptorService } from '../vscode/vs/workbench/services/views/browser/viewDescriptorService.js';
import { IActivityService } from '../vscode/vs/workbench/services/activity/common/activity.js';
import { ActivityService } from '../vscode/vs/workbench/services/activity/browser/activityService.js';
import { IPaneCompositePartService } from '../vscode/vs/workbench/services/panecomposite/browser/panecomposite.js';
import { PaneCompositeParts } from '../vscode/vs/workbench/browser/parts/paneCompositePart.js';
export { ActivitybarPart } from '../vscode/vs/workbench/browser/parts/activitybar/activitybarPart.js';
import { DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { IHoverService } from '../vscode/vs/workbench/services/hover/browser/hover.js';
import { HoverService } from '../vscode/vs/workbench/services/hover/browser/hoverService.js';
import { ExplorerService } from '../vscode/vs/workbench/contrib/files/browser/explorerService.js';
import { IExplorerService } from '../vscode/vs/workbench/contrib/files/browser/files.js';
export { PanelPart } from '../vscode/vs/workbench/browser/parts/panel/panelPart.js';
import { $, append } from 'monaco-editor/esm/vs/base/browser/dom.js';
import { ViewPane } from '../vscode/vs/workbench/browser/parts/views/viewPane.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { ViewPaneContainer } from '../vscode/vs/workbench/browser/parts/views/viewPaneContainer.js';
import { URI } from 'monaco-editor/esm/vs/base/common/uri.js';
import { EditorPart } from '../vscode/vs/workbench/browser/parts/editor/editorPart.js';
import '../vscode/vs/workbench/contrib/files/browser/fileCommands.js';
import '../vscode/vs/workbench/contrib/files/browser/fileActions.contribution.js';
import '../vscode/vs/workbench/contrib/callHierarchy/browser/callHierarchy.contribution.js';
import '../vscode/vs/workbench/contrib/typeHierarchy/browser/typeHierarchy.contribution.js';
import '../vscode/vs/workbench/contrib/codeEditor/browser/outline/documentSymbolsOutline.js';
import '../vscode/vs/workbench/contrib/outline/browser/outline.contribution.js';
import '../vscode/vs/workbench/browser/actions/listCommands.js';
import '../vscode/vs/workbench/browser/parts/views/media/views.css.js';
import '../vscode/vs/workbench/api/browser/viewsExtensionPoint.js';
import '../vscode/vs/workbench/browser/parts/editor/editor.contribution.js';
import '../vscode/vs/workbench/browser/workbench.contribution.js';
import '../vscode/vs/workbench/contrib/customEditor/browser/customEditor.contribution.js';
import '../vscode/vs/workbench/contrib/webviewPanel/browser/webviewPanel.contribution.js';
import '../vscode/vs/workbench/contrib/externalUriOpener/common/externalUriOpener.contribution.js';
import '../vscode/vs/workbench/contrib/languageStatus/browser/languageStatus.contribution.js';
import '../vscode/vs/workbench/contrib/languageDetection/browser/languageDetection.contribution.js';
import '../vscode/vs/workbench/contrib/files/browser/files.contribution.js';
import '../vscode/vs/workbench/contrib/files/browser/files.contribution2.js';
import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';
import { IEditorGroupsService } from '../vscode/vs/workbench/services/editor/common/editorGroupsService.js';
import { IEditorDropService } from '../vscode/vs/workbench/services/editor/browser/editorDropService.js';
import { IEditorService } from '../vscode/vs/workbench/services/editor/common/editorService.js';
import { IEditorResolverService } from '../vscode/vs/workbench/services/editor/common/editorResolverService.js';
import { EditorResolverService } from '../vscode/vs/workbench/services/editor/browser/editorResolverService.js';
import { IBreadcrumbsService, BreadcrumbsService } from '../vscode/vs/workbench/browser/parts/editor/breadcrumbs.js';
import { IContextViewService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';
import { ContextViewService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextViewService.js';
import { ICodeEditorService } from 'monaco-editor/esm/vs/editor/browser/services/codeEditorService.js';
import { EditorInput } from '../vscode/vs/workbench/common/editor/editorInput.js';
import { EditorExtensions } from '../vscode/vs/workbench/common/editor.js';
import { ITextEditorService, TextEditorService } from '../vscode/vs/workbench/services/textfile/common/textEditorService.js';
import { CodeEditorService } from '../vscode/vs/workbench/services/editor/browser/codeEditorService.js';
import { IUntitledTextEditorService, UntitledTextEditorService } from '../vscode/vs/workbench/services/untitled/common/untitledTextEditorService.js';
import { StatusbarPart } from '../vscode/vs/workbench/browser/parts/statusbar/statusbarPart.js';
import { IStatusbarService } from '../vscode/vs/workbench/services/statusbar/browser/statusbar.js';
import { ISemanticSimilarityService, SemanticSimilarityService } from '../vscode/vs/workbench/services/semanticSimilarity/common/semanticSimilarityService.js';
import { IHistoryService } from '../vscode/vs/workbench/services/history/common/history.js';
import { HistoryService } from '../vscode/vs/workbench/services/history/browser/historyService.js';
import { registerAction2, Action2, MenuId } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { Categories } from 'monaco-editor/esm/vs/platform/action/common/actionCommonCategories.js';
import { ContextKeyExpr } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { BaseActionViewItem } from 'monaco-editor/esm/vs/base/browser/ui/actionbar/actionViewItems.js';
import { IOutlineService } from '../vscode/vs/workbench/services/outline/browser/outline.js';
import { OutlineService } from '../vscode/vs/workbench/services/outline/browser/outlineService.js';
import { ICustomEditorService } from '../vscode/vs/workbench/contrib/customEditor/common/customEditor.js';
import { CustomEditorService } from '../vscode/vs/workbench/contrib/customEditor/browser/customEditors.js';
import { WebviewService } from '../vscode/vs/workbench/contrib/webview/browser/webviewService.js';
import { IWebviewWorkbenchService, WebviewEditorService } from '../vscode/vs/workbench/contrib/webviewPanel/browser/webviewWorkbenchService.js';
import { IWebviewService } from '../vscode/vs/workbench/contrib/webview/browser/webview.js';
import { IWebviewViewService, WebviewViewService } from '../vscode/vs/workbench/contrib/webviewView/browser/webviewViewService.js';
import { ILifecycleService } from '../vscode/vs/workbench/services/lifecycle/common/lifecycle.js';
import { IWorkbenchLayoutService, positionToString } from '../vscode/vs/workbench/services/layout/browser/layoutService.js';
export { Parts } from '../vscode/vs/workbench/services/layout/browser/layoutService.js';
import { EditorPaneDescriptor } from '../vscode/vs/workbench/browser/editor.js';
import { EditorPane } from '../vscode/vs/workbench/browser/parts/editor/editorPane.js';
import { ITelemetryService } from 'monaco-editor/esm/vs/platform/telemetry/common/telemetry.js';
import { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';
import { IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';
export { ConfirmResult } from '../override/vs/platform/dialogs/common/dialogs.js';
import { ILayoutService } from 'monaco-editor/esm/vs/platform/layout/browser/layoutService.js';
import { MonacoEditorService, MonacoDelegateEditorGroupsService } from './tools/editor.js';
import getServiceOverride$2 from './bulkEdit.js';
import getServiceOverride$1 from './layout.js';
import getServiceOverride$3 from './quickaccess.js';
import { changeUrlDomain } from './tools/url.js';
import { registerAssets } from '../assets.js';
import { registerServiceInitializePostParticipant } from '../lifecycle.js';
function createPart(id, role, classes) {
    const part = document.createElement(role === 'status' ? 'footer'  : 'div');
    part.classList.add('part', ...classes);
    part.id = id;
    part.setAttribute('role', role);
    if (role === 'status') {
        part.setAttribute('aria-live', 'off');
    }
    return part;
}
function layoutPart(part) {
    const parent = part.getContainer()?.parentNode;
    if (parent == null) {
        return;
    }
    part.layout(Math.max(part.minimumWidth, Math.min(part.maximumWidth, parent.offsetWidth)), Math.max(part.minimumHeight, Math.min(part.maximumHeight, parent.offsetHeight)), 0, 0);
}
function renderPart(partContainer, part) {
    partContainer.oncontextmenu = () => false;
    function layout() {
        layoutPart(part);
    }
    part.onDidVisibilityChange((visible) => {
        if (visible) {
            layout();
        }
    });
    layout();
}
function getPart(part) {
    return StandaloneServices.get(ILayoutService).getPart(part);
}
function _attachPart(part, container) {
    container.append(part.getContainer());
    const observer = new ResizeObserver(() => layoutPart(part));
    observer.observe(container);
    return {
        dispose() {
            return observer.disconnect();
        }
    };
}
function attachPart(part, container) {
    return _attachPart(getPart(part), container);
}
function onPartVisibilityChange(part, listener) {
    return getPart(part).onDidVisibilityChange(listener);
}
function isPartVisibile(part) {
    return StandaloneServices.get(IWorkbenchLayoutService).isVisible(part);
}
function setPartVisibility(part, visible) {
    StandaloneServices.get(IWorkbenchLayoutService).setPartHidden(!visible, part);
}
function renderActivitybarPar(container) {
    return attachPart("workbench.parts.activitybar" , container);
}
function renderSidebarPart(container) {
    return attachPart("workbench.parts.sidebar" , container);
}
function renderPanelPart(container) {
    return attachPart("workbench.parts.panel" , container);
}
function renderAuxiliaryPart(container) {
    return attachPart("workbench.parts.auxiliarybar" , container);
}
function renderEditorPart(container) {
    return attachPart("workbench.parts.editor" , container);
}
function renderStatusBarPart(container) {
    return attachPart("workbench.parts.statusbar" , container);
}
function registerEditorPane(options) {
    let CustomEditorPane = class CustomEditorPane extends EditorPane {
        constructor(telemetryService, themeService, storageService) {
            super(options.id, telemetryService, themeService, storageService);
        }
        createEditor(parent) {
            this.content = $('.editor-pane-content');
            this.content.style.display = 'flex';
            this.content.style.alignItems = 'stretch';
            append(parent, this.content);
            this._register(options.renderBody(this.content));
        }
        layout(dimension) {
            this.content.style.height = `${dimension.height}px`;
            this.content.style.width = `${dimension.width}px`;
        }
    };
    CustomEditorPane = __decorate([
        ( __param(0, ITelemetryService)),
        ( __param(1, IThemeService)),
        ( __param(2, IStorageService))
    ], CustomEditorPane);
    class CustomEditorInput extends EditorInput {
        constructor(closeHandler) {
            super();
            this.closeHandler = closeHandler;
            this.name = options.name;
            this.title = options.name;
            this.description = options.name;
            this.dirty = false;
        }
        get typeId() {
            return CustomEditorInput.ID;
        }
        get resource() {
            return undefined;
        }
        setName(name) {
            this.name = name;
            this._onDidChangeLabel.fire();
        }
        setTitle(title) {
            this.title = title;
            this._onDidChangeLabel.fire();
        }
        setDescription(description) {
            this.description = description;
            this._onDidChangeLabel.fire();
        }
        getLabelValue(label, verbosity) {
            if (typeof label === 'string') {
                return label;
            }
            switch (verbosity) {
                case 0 :
                    return label.short;
                case 2 :
                    return label.long;
                case 1 :
                default:
                    return label.medium;
            }
        }
        getName() {
            return this.name;
        }
        getTitle(verbosity) {
            return this.getLabelValue(this.title, verbosity);
        }
        getDescription(verbosity) {
            return this.getLabelValue(this.description, verbosity);
        }
        isDirty() {
            return this.dirty;
        }
        setDirty(dirty) {
            this.dirty = dirty;
            this._onDidChangeDirty.fire();
        }
    }
    CustomEditorInput.ID = `workbench.editors.${options.id}Input`;
    const disposable = ( Registry.as(EditorExtensions.EditorPane)).registerEditorPane(EditorPaneDescriptor.create(CustomEditorPane, options.id, options.name), [new SyncDescriptor(CustomEditorInput)]);
    return {
        disposable,
        CustomEditorInput
    };
}
function registerCustomView(options) {
    const iconUrl = options.icon != null ? ( URI.parse(options.icon)) : undefined;
    const VIEW_CONTAINER = ( Registry.as(Extensions.ViewContainersRegistry)).registerViewContainer({
        id: options.id,
        title: options.name,
        order: options.order,
        ctorDescriptor: new SyncDescriptor(ViewPaneContainer, [options.id, { mergeViewWithContainerWhenSingleView: true }]),
        hideIfEmpty: true,
        icon: iconUrl
    }, options.location);
    const views = [{
            id: options.id,
            name: options.name,
            canToggleVisibility: false,
            ctorDescriptor: new SyncDescriptor(class extends ViewPane {
                renderBody(container) {
                    super.renderBody(container);
                    this.content = $('.view-pane-content');
                    this.content.style.display = 'flex';
                    this.content.style.alignItems = 'stretch';
                    append(container, this.content);
                    this._register(options.renderBody(this.content));
                }
                getActionViewItem(action, actionOptions) {
                    const customAction = (options.actions ?? []).find(customAction => customAction.id === action.id);
                    if (customAction?.render != null) {
                        return new (class extends BaseActionViewItem {
                            constructor() {
                                super(null, action);
                                this.render = customAction.render;
                            }
                        })();
                    }
                    return super.getActionViewItem(action, actionOptions);
                }
                layoutBody(height, width) {
                    this.content.style.height = `${height}px`;
                    this.content.style.width = `${width}px`;
                }
            }),
            canMoveView: options.canMoveView ?? true,
            containerIcon: iconUrl
        }];
    ( Registry.as(Extensions.ViewsRegistry)).registerViews(views, VIEW_CONTAINER);
    if (options.default ?? false) {
        void StandaloneServices.get(ILifecycleService).when(4 ).then(() => {
            void StandaloneServices.get(IViewsService).openViewContainer(options.id);
        });
    }
    const disposableCollection = new DisposableStore();
    disposableCollection.add({
        dispose() {
            ( Registry.as(Extensions.ViewsRegistry)).deregisterViews(views, VIEW_CONTAINER);
            ( Registry.as(Extensions.ViewContainersRegistry)).deregisterViewContainer(VIEW_CONTAINER);
        }
    });
    for (const action of options.actions ?? []) {
        disposableCollection.add(registerAction2(class extends Action2 {
            constructor() {
                super({
                    id: action.id,
                    title: { value: action.title, original: action.title },
                    category: Categories.View,
                    menu: [{
                            id: MenuId.ViewTitle,
                            when: ( ContextKeyExpr.equals('view', options.id)),
                            group: 'navigation',
                            order: action.order
                        }, {
                            id: MenuId.CommandPalette
                        }],
                    tooltip: action.tooltip,
                    icon: action.icon != null ? Codicon[action.icon] : undefined
                });
                this.run = action.run ?? (async () => { });
            }
        }));
    }
    return disposableCollection;
}
let EditorDropService = class EditorDropService {
    constructor(editorPart) {
        this.editorPart = editorPart;
    }
    createEditorDropTarget(container, delegate) {
        return this.editorPart.createEditorDropTarget(container, delegate);
    }
};
EditorDropService = __decorate([
    ( __param(0, IEditorGroupsService))
], EditorDropService);
function isElementVisible(el) {
    if (!el.isConnected) {
        return false;
    }
    if (el.checkVisibility != null) {
        return el.checkVisibility({
            checkOpacity: true,
            checkVisibilityCSS: true
        });
    }
    return el.offsetHeight > 0 && el.offsetWidth > 0;
}
function isEditorPartVisible() {
    const container = StandaloneServices.get(IEditorGroupsService).getContainer();
    return container != null && isElementVisible(container);
}
let MonacoEditorPart = class MonacoEditorPart extends MonacoDelegateEditorGroupsService {
    constructor(instantiationService) {
        super(instantiationService.createInstance(EditorPart), instantiationService);
        this.onDidChangeSizeConstraints = this.delegate.onDidChangeSizeConstraints;
        this.restoreGroup = (...args) => {
            return this.delegate.restoreGroup(...args);
        };
        this.isGroupMaximized = (...args) => {
            return this.delegate.isGroupMaximized(...args);
        };
        this.createEditorDropTarget = (...args) => {
            return this.delegate.createEditorDropTarget(...args);
        };
        this.updateStyles = (...args) => {
            return this.delegate.updateStyles(...args);
        };
        this.setBoundarySashes = (...args) => {
            return this.delegate.setBoundarySashes(...args);
        };
        this.layout = (...args) => {
            return this.delegate.layout(...args);
        };
        this.toJSON = (...args) => {
            return this.delegate.toJSON(...args);
        };
        this.onDidVisibilityChange = this.delegate.onDidVisibilityChange;
        this.create = (...args) => {
            return this.delegate.create(...args);
        };
        this.getContainer = (...args) => {
            return this.delegate.getContainer(...args);
        };
        this.setVisible = (...args) => {
            return this.delegate.setVisible(...args);
        };
        this.getId = (...args) => {
            return this.delegate.getId(...args);
        };
    }
    get minimumWidth() {
        return this.delegate.minimumWidth;
    }
    get maximumWidth() {
        return this.delegate.maximumWidth;
    }
    get minimumHeight() {
        return this.delegate.minimumHeight;
    }
    get maximumHeight() {
        return this.delegate.maximumHeight;
    }
    get snap() {
        return this.delegate.snap;
    }
    get onDidChange() {
        return this.delegate.onDidChange;
    }
    get priority() {
        return this.delegate.priority;
    }
    get dimension() {
        return this.delegate.dimension;
    }
    get element() {
        return this.delegate.element;
    }
};
MonacoEditorPart = __decorate([
    ( __param(0, IInstantiationService))
], MonacoEditorPart);
let webviewIframeAlternateDomains;
registerAssets({
    'vs/workbench/contrib/webview/browser/pre/service-worker.js': () => changeUrlDomain(new URL('../assets/service-worker.js', import.meta.url).href, webviewIframeAlternateDomains),
    'vs/workbench/contrib/webview/browser/pre/index.html': () => changeUrlDomain(new URL('../assets/index.html', import.meta.url).href, webviewIframeAlternateDomains),
    'vs/workbench/contrib/webview/browser/pre/index-no-csp.html': () => changeUrlDomain(new URL('../assets/index-no-csp.html', import.meta.url).href, webviewIframeAlternateDomains),
    'vs/workbench/contrib/webview/browser/pre/fake.html': () => changeUrlDomain(new URL('../assets/fake.html', import.meta.url).href, webviewIframeAlternateDomains)
});
registerServiceInitializePostParticipant(async (accessor) => {
    const paneCompositePartService = accessor.get(IPaneCompositePartService);
    const viewDescriptorService = accessor.get(IViewDescriptorService);
    accessor.get(IStatusbarService);
    paneCompositePartService.getPaneComposites(1 );
    const layoutService = accessor.get(ILayoutService);
    const invisibleContainer = document.createElement('div');
    invisibleContainer.style.display = 'none';
    document.body.append(invisibleContainer);
    for (const { id, role, classes, options } of [
        { id: "workbench.parts.activitybar" , role: 'none', classes: ['activitybar', 'left'] },
        { id: "workbench.parts.sidebar" , role: 'none', classes: ['sidebar', 'left'] },
        { id: "workbench.parts.editor" , role: 'main', classes: ['editor'], options: { restorePreviousState: false } },
        { id: "workbench.parts.panel" , role: 'none', classes: ['panel', 'basepanel', positionToString(2 )] },
        { id: "workbench.parts.auxiliarybar" , role: 'none', classes: ['auxiliarybar', 'basepanel', 'right'] },
        { id: "workbench.parts.statusbar" , role: 'status', classes: ['statusbar'] }
    ]) {
        const partContainer = createPart(id, role, classes);
        const part = layoutService.getPart(id);
        part.create(partContainer, options);
        renderPart(partContainer, part);
        invisibleContainer.append(partContainer);
    }
    await paneCompositePartService.openPaneComposite(viewDescriptorService.getDefaultViewContainer(0 )?.id, 0 );
    await paneCompositePartService.openPaneComposite(viewDescriptorService.getDefaultViewContainer(1 )?.id, 1 );
    await paneCompositePartService.openPaneComposite(viewDescriptorService.getDefaultViewContainer(2 )?.id, 2 );
});
function getServiceOverride(openEditorFallback, _webviewIframeAlternateDomains) {
    if (_webviewIframeAlternateDomains != null) {
        webviewIframeAlternateDomains = _webviewIframeAlternateDomains;
    }
    return {
        ...getServiceOverride$1(),
        ...getServiceOverride$2(),
        ...getServiceOverride$3({
            isKeybindingConfigurationVisible: isEditorPartVisible,
            shouldUseGlobalPicker: isEditorPartVisible
        }),
        [( IViewsService.toString())]: new SyncDescriptor(ViewsService, [], false),
        [( IViewDescriptorService.toString())]: new SyncDescriptor(ViewDescriptorService, [], true),
        [( IActivityService.toString())]: new SyncDescriptor(ActivityService, [], true),
        [( IPaneCompositePartService.toString())]: new SyncDescriptor(PaneCompositeParts, [], true),
        [( IHoverService.toString())]: new SyncDescriptor(HoverService, [], true),
        [( IExplorerService.toString())]: new SyncDescriptor(ExplorerService, [], true),
        [( ICodeEditorService.toString())]: new SyncDescriptor(CodeEditorService, [], true),
        [( ITextEditorService.toString())]: new SyncDescriptor(TextEditorService, [], false),
        [( IEditorGroupsService.toString())]: new SyncDescriptor(MonacoEditorPart, [], false),
        [( IStatusbarService.toString())]: new SyncDescriptor(StatusbarPart, [], false),
        [( IEditorDropService.toString())]: new SyncDescriptor(EditorDropService, [], true),
        [( IEditorService.toString())]: new SyncDescriptor(MonacoEditorService, [openEditorFallback, isEditorPartVisible], false),
        [( IEditorResolverService.toString())]: new SyncDescriptor(EditorResolverService, [], false),
        [( IBreadcrumbsService.toString())]: new SyncDescriptor(BreadcrumbsService, [], true),
        [( IContextViewService.toString())]: new SyncDescriptor(ContextViewService, [], true),
        [( IUntitledTextEditorService.toString())]: new SyncDescriptor(UntitledTextEditorService, [], true),
        [( ISemanticSimilarityService.toString())]: new SyncDescriptor(SemanticSimilarityService, [], true),
        [( IHistoryService.toString())]: new SyncDescriptor(HistoryService, [], false),
        [( IOutlineService.toString())]: new SyncDescriptor(OutlineService, [], true),
        [( ICustomEditorService.toString())]: new SyncDescriptor(CustomEditorService, [], true),
        [( IWebviewService.toString())]: new SyncDescriptor(WebviewService, [], true),
        [( IWebviewViewService.toString())]: new SyncDescriptor(WebviewViewService, [], true),
        [( IWebviewWorkbenchService.toString())]: new SyncDescriptor(WebviewEditorService, [], true)
    };
}
export { ActivityService, HoverService, StatusbarPart, attachPart, getServiceOverride as default, isEditorPartVisible, isPartVisibile, onPartVisibilityChange, registerCustomView, registerEditorPane, renderActivitybarPar, renderAuxiliaryPart, renderEditorPart, renderPanelPart, renderPart, renderSidebarPart, renderStatusBarPart, setPartVisibility };
