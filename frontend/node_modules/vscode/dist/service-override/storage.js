import { __decorate, __param } from '../node_modules/tslib/tslib.es6.js';
import { Event } from 'monaco-editor/esm/vs/base/common/event.js';
import { Storage } from 'monaco-editor/esm/vs/base/parts/storage/common/storage.js';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
import { AbstractStorageService, IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';
import { BrowserStorageService } from '../vscode/vs/workbench/services/storage/browser/storageService.js';
import { ILogService } from 'monaco-editor/esm/vs/platform/log/common/log.js';
import { IUserDataProfileService } from '../vscode/vs/workbench/services/userDataProfile/common/userDataProfile.js';
import { generateUuid } from 'monaco-editor/esm/vs/base/common/uuid.js';
import { registerServiceInitializePreParticipant } from '../lifecycle.js';
var StorageScope;
( (function(StorageScope) {
    StorageScope[StorageScope["APPLICATION"] = -1] = "APPLICATION";
    StorageScope[StorageScope["PROFILE"] = 0] = "PROFILE";
    StorageScope[StorageScope["WORKSPACE"] = 1] = "WORKSPACE";
})(StorageScope || (StorageScope = {})));
class ExternalStorage extends Storage {
    constructor(scope, provider) {
        const items = provider.read(scope);
        super(new ExternalStorageDatabase(scope, provider, items));
        if (items != null) {
            for (const [key, value] of items) {
                this.items.set(key, value);
            }
        }
    }
}
class ExternalStorageDatabase {
    constructor(scope, provider, items = new Map()) {
        this.scope = scope;
        this.provider = provider;
        this.items = items;
        this.onDidChangeItemsExternal = this.provider.onDidChange ?? Event.None;
    }
    async getItems() {
        return this.items;
    }
    async updateItems(request) {
        request.insert?.forEach((value, key) => this.items.set(key, value));
        request.delete?.forEach(key => this.items.delete(key));
        await this.provider.write(this.scope, this.items);
    }
    async close() {
        return this.provider.close?.(this.scope);
    }
}
class ExternalStorageService extends AbstractStorageService {
    constructor(provider) {
        super({
            flushInterval: 5000
        });
        this.provider = provider;
        this.applicationStorage = this._register(new ExternalStorage(StorageScope.APPLICATION, this.provider));
        this.profileStorage = this._register(new ExternalStorage(StorageScope.PROFILE, this.provider));
        this.workspaceStorage = this._register(new ExternalStorage(StorageScope.WORKSPACE, this.provider));
        this._register(this.workspaceStorage.onDidChangeStorage(key => this.emitDidChangeValue(1 , key)));
        this._register(this.profileStorage.onDidChangeStorage(key => this.emitDidChangeValue(0 , key)));
        this._register(this.applicationStorage.onDidChangeStorage(key => this.emitDidChangeValue(-1 , key)));
    }
    getStorage(scope) {
        switch (scope) {
            case -1 :
                return this.applicationStorage;
            case 0 :
                return this.profileStorage;
            default:
                return this.workspaceStorage;
        }
    }
    getLogDetails(scope) {
        switch (scope) {
            case -1 :
                return 'External (application)';
            case 0 :
                return 'External (profile)';
            default:
                return 'External (workspace)';
        }
    }
    async doInitialize() {
    }
    async switchToProfile() {
    }
    async switchToWorkspace() {
    }
    hasScope(_scope) {
        return false;
    }
}
registerServiceInitializePreParticipant(async (accessor) => {
    await accessor.get(IStorageService).initialize();
});
let InjectedBrowserStorageService = class InjectedBrowserStorageService extends BrowserStorageService {
    constructor(userDataProfileService, logService) {
        super({
            id: generateUuid()
        }, userDataProfileService, logService);
    }
};
InjectedBrowserStorageService = __decorate([
    ( __param(0, IUserDataProfileService)),
    ( __param(1, ILogService))
], InjectedBrowserStorageService);
function getStorageServiceOverride(provider) {
    if (provider != null) {
        return {
            [( IStorageService.toString())]: new SyncDescriptor(ExternalStorageService, [provider], true)
        };
    }
    else {
        return {
            [( IStorageService.toString())]: new SyncDescriptor(InjectedBrowserStorageService, [], true)
        };
    }
}
export { InjectedBrowserStorageService as BrowserStorageService, ExternalStorageService, StorageScope, getStorageServiceOverride as default };
