import { Event } from '../../../common/event.js';
import { IDisposable } from '../../../common/lifecycle.js';

interface IStorageItemsChangeEvent {
    readonly changed?: Map<string, string>;
    readonly deleted?: Set<string>;
}
interface IStorageChangeEvent {
    /**
     * The `key` of the storage entry that was changed
     * or was removed.
     */
    readonly key: string;
    /**
     * A hint how the storage change event was triggered. If
     * `true`, the storage change was triggered by an external
     * source, such as:
     * - another process (for example another window)
     * - operations such as settings sync or profiles change
     */
    readonly external?: boolean;
}
type StorageValue = string | boolean | number | undefined | null | object;
interface IStorage extends IDisposable {
    readonly onDidChangeStorage: Event<IStorageChangeEvent>;
    readonly items: Map<string, string>;
    readonly size: number;
    init(): Promise<void>;
    get(key: string, fallbackValue: string): string;
    get(key: string, fallbackValue?: string): string | undefined;
    getBoolean(key: string, fallbackValue: boolean): boolean;
    getBoolean(key: string, fallbackValue?: boolean): boolean | undefined;
    getNumber(key: string, fallbackValue: number): number;
    getNumber(key: string, fallbackValue?: number): number | undefined;
    getObject<T extends object>(key: string, fallbackValue: T): T;
    getObject<T extends object>(key: string, fallbackValue?: T): T | undefined;
    set(key: string, value: StorageValue, external?: boolean): Promise<void>;
    delete(key: string, external?: boolean): Promise<void>;
    flush(delay?: number): Promise<void>;
    whenFlushed(): Promise<void>;
    close(): Promise<void>;
}

export { IStorage, IStorageChangeEvent, IStorageItemsChangeEvent, StorageValue };
