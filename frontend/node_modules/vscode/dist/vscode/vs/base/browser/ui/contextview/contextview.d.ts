import { StandardMouseEvent } from '../../mouseEvent.js';
import { IDisposable } from '../../../common/lifecycle.js';

interface IAnchor {
    x: number;
    y: number;
    width?: number;
    height?: number;
}
declare const enum AnchorAlignment {
    LEFT = 0,
    RIGHT = 1
}
declare const enum AnchorPosition {
    BELOW = 0,
    ABOVE = 1
}
declare const enum AnchorAxisAlignment {
    VERTICAL = 0,
    HORIZONTAL = 1
}
interface IDelegate {
    /**
     * The anchor where to position the context view.
     * Use a `HTMLElement` to position the view at the element,
     * a `StandardMouseEvent` to position it at the mouse position
     * or an `IAnchor` to position it at a specific location.
     */
    getAnchor(): HTMLElement | StandardMouseEvent | IAnchor;
    render(container: HTMLElement): IDisposable | null;
    focus?(): void;
    layout?(): void;
    anchorAlignment?: AnchorAlignment;
    anchorPosition?: AnchorPosition;
    anchorAxisAlignment?: AnchorAxisAlignment;
    canRelayout?: boolean;
    onDOMEvent?(e: Event, activeElement: HTMLElement): void;
    onHide?(data?: unknown): void;
}
interface IContextViewProvider {
    showContextView(delegate: IDelegate, container?: HTMLElement): void;
    hideContextView(): void;
    layout(): void;
}

export { AnchorAlignment, AnchorAxisAlignment, AnchorPosition, IAnchor, IContextViewProvider, IDelegate };
