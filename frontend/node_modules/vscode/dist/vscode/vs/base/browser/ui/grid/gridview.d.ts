import { IBoundarySashes } from '../sash/sash.js';
export { Orientation } from '../sash/sash.js';
import { LayoutPriority } from '../splitview/splitview.js';
import { Event } from '../../../common/event.js';

interface IViewSize {
    readonly width: number;
    readonly height: number;
}
/**
 * The interface to implement for views within a {@link GridView}.
 */
interface IView {
    /**
     * The DOM element for this view.
     */
    readonly element: HTMLElement;
    /**
     * A minimum width for this view.
     *
     * @remarks If none, set it to `0`.
     */
    readonly minimumWidth: number;
    /**
     * A minimum width for this view.
     *
     * @remarks If none, set it to `Number.POSITIVE_INFINITY`.
     */
    readonly maximumWidth: number;
    /**
     * A minimum height for this view.
     *
     * @remarks If none, set it to `0`.
     */
    readonly minimumHeight: number;
    /**
     * A minimum height for this view.
     *
     * @remarks If none, set it to `Number.POSITIVE_INFINITY`.
     */
    readonly maximumHeight: number;
    /**
     * The priority of the view when the {@link GridView} layout algorithm
     * runs. Views with higher priority will be resized first.
     *
     * @remarks Only used when `proportionalLayout` is false.
     */
    readonly priority?: LayoutPriority;
    /**
     * If the {@link GridView} supports proportional layout,
     * this property allows for finer control over the proportional layout algorithm, per view.
     *
     * @defaultValue `true`
     */
    readonly proportionalLayout?: boolean;
    /**
     * Whether the view will snap whenever the user reaches its minimum size or
     * attempts to grow it beyond the minimum size.
     *
     * @defaultValue `false`
     */
    readonly snap?: boolean;
    /**
     * View instances are supposed to fire this event whenever any of the constraint
     * properties have changed:
     *
     * - {@link IView.minimumWidth}
     * - {@link IView.maximumWidth}
     * - {@link IView.minimumHeight}
     * - {@link IView.maximumHeight}
     * - {@link IView.priority}
     * - {@link IView.snap}
     *
     * The {@link GridView} will relayout whenever that happens. The event can
     * optionally emit the view's preferred size for that relayout.
     */
    readonly onDidChange: Event<IViewSize | undefined>;
    /**
     * This will be called by the {@link GridView} during layout. A view meant to
     * pass along the layout information down to its descendants.
     */
    layout(width: number, height: number, top: number, left: number): void;
    /**
     * This will be called by the {@link GridView} whenever this view is made
     * visible or hidden.
     *
     * @param visible Whether the view becomes visible.
     */
    setVisible?(visible: boolean): void;
    /**
     * This will be called by the {@link GridView} whenever this view is on
     * an edge of the grid and the grid's
     * {@link GridView.boundarySashes boundary sashes} change.
     */
    setBoundarySashes?(sashes: IBoundarySashes): void;
}

export { IView, IViewSize, LayoutPriority };
