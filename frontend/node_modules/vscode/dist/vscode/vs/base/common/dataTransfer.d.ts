import { URI } from './uri.js';

interface IDataTransferFile {
    readonly id: string;
    readonly name: string;
    readonly uri?: URI;
    data(): Promise<Uint8Array>;
}
interface IDataTransferItem {
    asString(): Thenable<string>;
    asFile(): IDataTransferFile | undefined;
    value: any;
}
interface IReadonlyVSDataTransfer extends Iterable<readonly [string, IDataTransferItem]> {
    /**
     * Get the total number of entries in this data transfer.
     */
    get size(): number;
    /**
     * Check if this data transfer contains data for `mimeType`.
     *
     * This uses exact matching and does not support wildcards.
     */
    has(mimeType: string): boolean;
    /**
     * Check if this data transfer contains data matching `pattern`.
     *
     * This allows matching for wildcards, such as `image/*`.
     *
     * Use the special `files` mime type to match any file in the data transfer.
     */
    matches(pattern: string): boolean;
    /**
     * Retrieve the first entry for `mimeType`.
     *
     * Note that if you want to find all entries for a given mime type, use {@link IReadonlyVSDataTransfer.entries} instead.
     */
    get(mimeType: string): IDataTransferItem | undefined;
}

export { IDataTransferFile, IDataTransferItem, IReadonlyVSDataTransfer };
