import { Event } from './event.js';
import { IDisposable } from './lifecycle.js';

interface IAction {
    readonly id: string;
    label: string;
    tooltip: string;
    class: string | undefined;
    enabled: boolean;
    checked?: boolean;
    run(...args: unknown[]): unknown;
}
interface IActionRunner extends IDisposable {
    readonly onDidRun: Event<IRunEvent>;
    readonly onWillRun: Event<IRunEvent>;
    run(action: IAction, context?: unknown): unknown;
}
interface IRunEvent {
    readonly action: IAction;
    readonly error?: Error;
}
declare class SubmenuAction implements IAction {
    readonly id: string;
    readonly label: string;
    readonly class: string | undefined;
    readonly tooltip: string;
    readonly enabled: boolean;
    readonly checked: undefined;
    private readonly _actions;
    get actions(): readonly IAction[];
    constructor(id: string, label: string, actions: readonly IAction[], cssClass?: string);
    run(): Promise<void>;
}

export { IAction, IActionRunner, IRunEvent, SubmenuAction };
