const unset = Symbol('unset');
class WellDefinedPrefixTree {
    constructor() {
        this.root = ( new Node());
    }
    insert(key, value) {
        let node = this.root;
        for (const part of key) {
            if (!node.children) {
                const next = ( new Node());
                node.children = ( new Map([[part, next]]));
                node = next;
            }
            else if (!( node.children.has(part))) {
                const next = ( new Node());
                node.children.set(part, next);
                node = next;
            }
            else {
                node = node.children.get(part);
            }
        }
        node.value = value;
    }
    find(key) {
        let node = this.root;
        for (const segment of key) {
            const next = node.children?.get(segment);
            if (!next) {
                return undefined;
            }
            node = next;
        }
        return node.value === unset ? undefined : node.value;
    }
    hasKeyOrParent(key) {
        let node = this.root;
        for (const segment of key) {
            const next = node.children?.get(segment);
            if (!next) {
                return false;
            }
            if (next.value !== unset) {
                return true;
            }
            node = next;
        }
        return false;
    }
    hasKeyOrChildren(key) {
        let node = this.root;
        for (const segment of key) {
            const next = node.children?.get(segment);
            if (!next) {
                return false;
            }
            node = next;
        }
        return true;
    }
}
class Node {
    constructor() {
        this.value = unset;
    }
}
export { WellDefinedPrefixTree };
