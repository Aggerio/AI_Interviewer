import { ServiceIdentifier } from '../../../../platform/instantiation/common/instantiation.js';
import { Event } from '../../../../base/common/event.js';
import { ILayoutService } from '../../../../platform/layout/browser/layoutService.js';
import { Part } from '../../../browser/part.js';
import { Dimension } from '../../../../base/browser/dom.js';
import { Direction } from '../../../../base/browser/ui/grid/grid.js';

declare const enum Parts {
    TITLEBAR_PART = "workbench.parts.titlebar",
    BANNER_PART = "workbench.parts.banner",
    ACTIVITYBAR_PART = "workbench.parts.activitybar",
    SIDEBAR_PART = "workbench.parts.sidebar",
    PANEL_PART = "workbench.parts.panel",
    AUXILIARYBAR_PART = "workbench.parts.auxiliarybar",
    EDITOR_PART = "workbench.parts.editor",
    STATUSBAR_PART = "workbench.parts.statusbar"
}
declare const enum Position {
    LEFT = 0,
    RIGHT = 1,
    BOTTOM = 2
}
type PanelAlignment = 'left' | 'center' | 'right' | 'justify';

declare const IWorkbenchLayoutService: ServiceIdentifier<IWorkbenchLayoutService>;
interface IWorkbenchLayoutService extends ILayoutService {
    readonly _serviceBrand: undefined;
    /**
     * Emits when the zen mode is enabled or disabled.
     */
    readonly onDidChangeZenMode: Event<boolean>;
    /**
     * Emits when fullscreen is enabled or disabled.
     */
    readonly onDidChangeFullscreen: Event<boolean>;
    /**
     * Emits when the window is maximized or unmaximized.
     */
    readonly onDidChangeWindowMaximized: Event<boolean>;
    /**
     * Emits when centered layout is enabled or disabled.
     */
    readonly onDidChangeCenteredLayout: Event<boolean>;
    readonly onDidChangePanelPosition: Event<string>;
    /**
     * Emit when panel alignment changes.
     */
    readonly onDidChangePanelAlignment: Event<PanelAlignment>;
    /**
     * Emit when part visibility changes
     */
    readonly onDidChangePartVisibility: Event<void>;
    /**
     * Emit when notifications (toasts or center) visibility changes.
     */
    readonly onDidChangeNotificationsVisibility: Event<boolean>;
    /**
     * True if a default layout with default editors was applied at startup
     */
    readonly openedDefaultEditors: boolean;
    /**
     * Run a layout of the workbench.
     */
    layout(): void;
    /**
     * Asks the part service if all parts have been fully restored. For editor part
     * this means that the contents of visible editors have loaded.
     */
    isRestored(): boolean;
    /**
     * A promise for to await the `isRestored()` condition to be `true`.
     */
    readonly whenRestored: Promise<void>;
    /**
     * Returns whether the given part has the keyboard focus or not.
     */
    hasFocus(part: Parts): boolean;
    /**
     * Focuses the part. If the part is not visible this is a noop.
     */
    focusPart(part: Parts): void;
    /**
     * Returns the parts HTML element, if there is one.
     */
    getContainer(part: Parts): HTMLElement | undefined;
    /**
     * Returns if the part is visible.
     */
    isVisible(part: Parts): boolean;
    /**
     * Returns if the part is visible.
     */
    getDimension(part: Parts): Dimension | undefined;
    /**
     * Set part hidden or not
     */
    setPartHidden(hidden: boolean, part: Exclude<Parts, Parts.STATUSBAR_PART | Parts.TITLEBAR_PART>): void;
    /**
     * Maximizes the panel height if the panel is not already maximized.
     * Shrinks the panel to the default starting size if the panel is maximized.
     */
    toggleMaximizedPanel(): void;
    /**
     * Returns true if the window has a border.
     */
    hasWindowBorder(): boolean;
    /**
     * Returns the window border width.
     */
    getWindowBorderWidth(): number;
    /**
     * Returns the window border radius if any.
     */
    getWindowBorderRadius(): string | undefined;
    /**
     * Returns true if the panel is maximized.
     */
    isPanelMaximized(): boolean;
    /**
     * Gets the current side bar position. Note that the sidebar can be hidden too.
     */
    getSideBarPosition(): Position;
    /**
     * Toggles the menu bar visibility.
     */
    toggleMenuBar(): void;
    getPanelPosition(): Position;
    /**
     * Sets the panel position.
     */
    setPanelPosition(position: Position): void;
    /**
     * Gets the panel alignement.
     */
    getPanelAlignment(): PanelAlignment;
    /**
     * Sets the panel alignment.
     */
    setPanelAlignment(alignment: PanelAlignment): void;
    /**
     * Gets the maximum possible size for editor.
     */
    getMaximumEditorDimensions(): Dimension;
    /**
     * Toggles the workbench in and out of zen mode - parts get hidden and window goes fullscreen.
     */
    toggleZenMode(): void;
    /**
     * Returns whether the centered editor layout is active.
     */
    isEditorLayoutCentered(): boolean;
    /**
     * Sets the workbench in and out of centered editor layout.
     */
    centerEditorLayout(active: boolean): void;
    /**
     * Resizes currently focused part on main access
     */
    resizePart(part: Parts, sizeChangeWidth: number, sizeChangeHeight: number): void;
    /**
     * Register a part to participate in the layout.
     */
    registerPart(part: Part): void;
    /**
     * Returns whether the window is maximized.
     */
    isWindowMaximized(): boolean;
    /**
     * Updates the maximized state of the window.
     */
    updateWindowMaximizedState(maximized: boolean): void;
    /**
     * Returns the next visible view part in a given direction
     */
    getVisibleNeighborPart(part: Parts, direction: Direction): Parts | undefined;
}

export { IWorkbenchLayoutService, PanelAlignment, Parts, Position };
