import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { IActivityService } from '../common/activity.js';
import { Disposable, toDisposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { IViewDescriptorService } from '../../../common/views.js';
import { ACCOUNTS_ACTIVITY_ID, GLOBAL_ACTIVITY_ID } from '../../../common/activity.js';
import { Event } from 'monaco-editor/esm/vs/base/common/event.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { IPaneCompositePartService } from '../../panecomposite/browser/panecomposite.js';
let ViewContainerActivityByView = class ViewContainerActivityByView extends Disposable {
    constructor(viewId, viewDescriptorService, activityService) {
        super();
        this.viewId = viewId;
        this.viewDescriptorService = viewDescriptorService;
        this.activityService = activityService;
        this.activity = undefined;
        this.activityDisposable = Disposable.None;
        this._register(Event.filter(this.viewDescriptorService.onDidChangeContainer, e => ( e.views.some(view => view.id === viewId)))(() => this.update()));
        this._register(Event.filter(this.viewDescriptorService.onDidChangeLocation, e => ( e.views.some(view => view.id === viewId)))(() => this.update()));
    }
    setActivity(activity) {
        this.activity = activity;
        this.update();
    }
    clearActivity() {
        this.activity = undefined;
        this.update();
    }
    update() {
        this.activityDisposable.dispose();
        const container = this.viewDescriptorService.getViewContainerByViewId(this.viewId);
        if (container && this.activity) {
            this.activityDisposable = this.activityService.showViewContainerActivity(container.id, this.activity);
        }
    }
    dispose() {
        this.activityDisposable.dispose();
    }
};
ViewContainerActivityByView = ( __decorate([
    ( __param(1, IViewDescriptorService)),
    ( __param(2, IActivityService))
], ViewContainerActivityByView));
let ActivityService = class ActivityService {
    constructor(paneCompositeService, viewDescriptorService, instantiationService) {
        this.paneCompositeService = paneCompositeService;
        this.viewDescriptorService = viewDescriptorService;
        this.instantiationService = instantiationService;
        this.viewActivities = ( new Map());
    }
    showViewContainerActivity(viewContainerId, { badge, clazz, priority }) {
        const viewContainer = this.viewDescriptorService.getViewContainerById(viewContainerId);
        if (viewContainer) {
            const location = this.viewDescriptorService.getViewContainerLocation(viewContainer);
            if (location !== null) {
                return this.paneCompositeService.showActivity(viewContainer.id, location, badge, clazz, priority);
            }
        }
        return Disposable.None;
    }
    showViewActivity(viewId, activity) {
        let maybeItem = this.viewActivities.get(viewId);
        if (maybeItem) {
            maybeItem.id++;
        }
        else {
            maybeItem = {
                id: 1,
                activity: this.instantiationService.createInstance(ViewContainerActivityByView, viewId)
            };
            this.viewActivities.set(viewId, maybeItem);
        }
        const id = maybeItem.id;
        maybeItem.activity.setActivity(activity);
        const item = maybeItem;
        return toDisposable(() => {
            if (item.id === id) {
                item.activity.dispose();
                this.viewActivities.delete(viewId);
            }
        });
    }
    showAccountsActivity({ badge, clazz, priority }) {
        return this.paneCompositeService.showActivity(ACCOUNTS_ACTIVITY_ID, 0 , badge, clazz, priority);
    }
    showGlobalActivity({ badge, clazz, priority }) {
        return this.paneCompositeService.showActivity(GLOBAL_ACTIVITY_ID, 0 , badge, clazz, priority);
    }
};
ActivityService = ( __decorate([
    ( __param(0, IPaneCompositePartService)),
    ( __param(1, IViewDescriptorService)),
    ( __param(2, IInstantiationService))
], ActivityService));
export { ActivityService };
