import { __decorate, __param } from '../../../../../../../node_modules/tslib/tslib.es6.js';
import { DisposableStore, toDisposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { FileAccess, nodeModulesPath, nodeModulesAsarPath } from 'monaco-editor/esm/vs/base/common/network.js';
import { isWeb } from 'monaco-editor/esm/vs/base/common/platform.js';
import { URI } from 'monaco-editor/esm/vs/base/common/uri.js';
import { createWebWorker } from 'monaco-editor/esm/vs/editor/browser/services/webWorker.js';
import { ILanguageService } from 'monaco-editor/esm/vs/editor/common/languages/language.js';
import { ILanguageConfigurationService } from 'monaco-editor/esm/vs/editor/common/languages/languageConfigurationRegistry.js';
import { IModelService } from 'monaco-editor/esm/vs/editor/common/services/model.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { IEnvironmentService } from 'monaco-editor/esm/vs/platform/environment/common/environment.js';
import { IExtensionResourceLoaderService } from '../../../../../platform/extensionResourceLoader/common/extensionResourceLoader.js';
import { INotificationService } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';
import { ITelemetryService } from 'monaco-editor/esm/vs/platform/telemetry/common/telemetry.js';
import { TextMateWorkerTokenizerController } from './textMateWorkerTokenizerController.js';
let ThreadedBackgroundTokenizerFactory = class ThreadedBackgroundTokenizerFactory {
    static { this._reportedMismatchingTokens = false; }
    constructor(_reportTokenizationTime, _shouldTokenizeAsync, _extensionResourceLoaderService, _modelService, _languageConfigurationService, _configurationService, _languageService, _environmentService, _notificationService, _telemetryService) {
        this._reportTokenizationTime = _reportTokenizationTime;
        this._shouldTokenizeAsync = _shouldTokenizeAsync;
        this._extensionResourceLoaderService = _extensionResourceLoaderService;
        this._modelService = _modelService;
        this._languageConfigurationService = _languageConfigurationService;
        this._configurationService = _configurationService;
        this._languageService = _languageService;
        this._environmentService = _environmentService;
        this._notificationService = _notificationService;
        this._telemetryService = _telemetryService;
        this._workerProxyPromise = null;
        this._worker = null;
        this._workerProxy = null;
        this._workerTokenizerControllers = ( new Map());
        this._currentTheme = null;
        this._currentTokenColorMap = null;
        this._grammarDefinitions = [];
    }
    dispose() {
        this._disposeWorker();
    }
    createBackgroundTokenizer(textModel, tokenStore, maxTokenizationLineLength) {
        if (!this._shouldTokenizeAsync() || textModel.isTooLargeForSyncing()) {
            return undefined;
        }
        const store = ( new DisposableStore());
        const controllerContainer = this._getWorkerProxy().then((workerProxy) => {
            if (store.isDisposed || !workerProxy) {
                return undefined;
            }
            const controllerContainer = { controller: undefined };
            store.add(keepAliveWhenAttached(textModel, () => {
                const controller = ( new TextMateWorkerTokenizerController(
                    textModel,
                    workerProxy,
                    this._languageService.languageIdCodec,
                    tokenStore,
                    this._configurationService,
                    maxTokenizationLineLength
                ));
                controllerContainer.controller = controller;
                this._workerTokenizerControllers.set(controller.controllerId, controller);
                return toDisposable(() => {
                    controllerContainer.controller = undefined;
                    this._workerTokenizerControllers.delete(controller.controllerId);
                    controller.dispose();
                });
            }));
            return controllerContainer;
        });
        return {
            dispose() {
                store.dispose();
            },
            requestTokens: async (startLineNumber, endLineNumberExclusive) => {
                const controller = (await controllerContainer)?.controller;
                if (controller) {
                    controller.requestTokens(startLineNumber, endLineNumberExclusive);
                }
            },
            reportMismatchingTokens: (lineNumber) => {
                if (ThreadedBackgroundTokenizerFactory._reportedMismatchingTokens) {
                    return;
                }
                ThreadedBackgroundTokenizerFactory._reportedMismatchingTokens = true;
                this._notificationService.error({
                    message: 'Async Tokenization Token Mismatch in line ' + lineNumber,
                    name: 'Async Tokenization Token Mismatch',
                });
                this._telemetryService.publicLog2('asyncTokenizationMismatchingTokens', {});
            },
        };
    }
    setGrammarDefinitions(grammarDefinitions) {
        this._grammarDefinitions = grammarDefinitions;
        this._disposeWorker();
    }
    acceptTheme(theme, colorMap) {
        this._currentTheme = theme;
        this._currentTokenColorMap = colorMap;
        if (this._currentTheme && this._currentTokenColorMap && this._workerProxy) {
            this._workerProxy.acceptTheme(this._currentTheme, this._currentTokenColorMap);
        }
    }
    _getWorkerProxy() {
        if (!this._workerProxyPromise) {
            this._workerProxyPromise = this._createWorkerProxy();
        }
        return this._workerProxyPromise;
    }
    async _createWorkerProxy() {
        const textmateModuleLocation = `${nodeModulesPath}/vscode-textmate`;
        const textmateModuleLocationAsar = `${nodeModulesAsarPath}/vscode-textmate`;
        const onigurumaModuleLocation = `${nodeModulesPath}/vscode-oniguruma`;
        const onigurumaModuleLocationAsar = `${nodeModulesAsarPath}/vscode-oniguruma`;
        const useAsar = this._environmentService.isBuilt && !isWeb;
        const textmateLocation = useAsar ? textmateModuleLocationAsar : textmateModuleLocation;
        const onigurumaLocation = useAsar ? onigurumaModuleLocationAsar : onigurumaModuleLocation;
        const textmateMain = `${textmateLocation}/release/main.js`;
        const onigurumaMain = `${onigurumaLocation}/release/main.js`;
        const onigurumaWASM = `${onigurumaLocation}/release/onig.wasm`;
        const uri = ( ( FileAccess.asBrowserUri(textmateMain)).toString(true));
        const createData = {
            grammarDefinitions: this._grammarDefinitions,
            textmateMainUri: uri,
            onigurumaMainUri: ( ( FileAccess.asBrowserUri(onigurumaMain)).toString(true)),
            onigurumaWASMUri: ( ( FileAccess.asBrowserUri(onigurumaWASM)).toString(true)),
        };
        const host = {
            readFile: async (_resource) => {
                const resource = URI.revive(_resource);
                return this._extensionResourceLoaderService.readExtensionResource(resource);
            },
            setTokensAndStates: async (controllerId, versionId, tokens, lineEndStateDeltas) => {
                const controller = this._workerTokenizerControllers.get(controllerId);
                if (controller) {
                    controller.setTokensAndStates(controllerId, versionId, tokens, lineEndStateDeltas);
                }
            },
            reportTokenizationTime: (timeMs, languageId, sourceExtensionId, lineLength, isRandomSample) => {
                this._reportTokenizationTime(timeMs, languageId, sourceExtensionId, lineLength, isRandomSample);
            }
        };
        const worker = this._worker = createWebWorker(this._modelService, this._languageConfigurationService, {
            createData,
            label: 'textMateWorker',
            moduleId: 'vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateTokenizationWorker.worker',
            host,
        });
        const proxy = await ( worker.getProxy());
        if (this._worker !== worker) {
            return null;
        }
        this._workerProxy = proxy;
        if (this._currentTheme && this._currentTokenColorMap) {
            this._workerProxy.acceptTheme(this._currentTheme, this._currentTokenColorMap);
        }
        return proxy;
    }
    _disposeWorker() {
        for (const controller of ( this._workerTokenizerControllers.values())) {
            controller.dispose();
        }
        this._workerTokenizerControllers.clear();
        if (this._worker) {
            this._worker.dispose();
            this._worker = null;
        }
        this._workerProxy = null;
        this._workerProxyPromise = null;
    }
};
ThreadedBackgroundTokenizerFactory = ( __decorate([
    ( __param(2, IExtensionResourceLoaderService)),
    ( __param(3, IModelService)),
    ( __param(4, ILanguageConfigurationService)),
    ( __param(5, IConfigurationService)),
    ( __param(6, ILanguageService)),
    ( __param(7, IEnvironmentService)),
    ( __param(8, INotificationService)),
    ( __param(9, ITelemetryService))
], ThreadedBackgroundTokenizerFactory));
function keepAliveWhenAttached(textModel, factory) {
    const disposableStore = ( new DisposableStore());
    const subStore = disposableStore.add(( new DisposableStore()));
    function checkAttached() {
        if (textModel.isAttachedToEditor()) {
            subStore.add(factory());
        }
        else {
            subStore.clear();
        }
    }
    checkAttached();
    disposableStore.add(textModel.onDidChangeAttached(() => {
        checkAttached();
    }));
    return disposableStore;
}
export { ThreadedBackgroundTokenizerFactory };
