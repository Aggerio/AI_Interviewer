import { FileOperationError } from 'monaco-editor/esm/vs/platform/files/common/files.js';
import { createDecorator } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { VSBuffer } from 'monaco-editor/esm/vs/base/common/buffer.js';
import { isUndefinedOrNull } from 'monaco-editor/esm/vs/base/common/types.js';
const ITextFileService = ( createDecorator('textFileService'));
class TextFileOperationError extends FileOperationError {
    static isTextFileOperationError(obj) {
        return obj instanceof Error && !isUndefinedOrNull(obj.textFileOperationResult);
    }
    constructor(message, textFileOperationResult, options) {
        super(message, 10 );
        this.textFileOperationResult = textFileOperationResult;
        this.options = options;
    }
}
function stringToSnapshot(value) {
    let done = false;
    return {
        read() {
            if (!done) {
                done = true;
                return value;
            }
            return null;
        }
    };
}
function toBufferOrReadable(value) {
    if (typeof value === 'undefined') {
        return undefined;
    }
    if (typeof value === 'string') {
        return VSBuffer.fromString(value);
    }
    return {
        read: () => {
            const chunk = value.read();
            if (typeof chunk === 'string') {
                return VSBuffer.fromString(chunk);
            }
            return null;
        }
    };
}
export { ITextFileService, TextFileOperationError, stringToSnapshot, toBufferOrReadable };
