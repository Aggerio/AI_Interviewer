import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { URI } from 'monaco-editor/esm/vs/base/common/uri.js';
import { createDecorator, IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { UntitledTextEditorModel } from './untitledTextEditorModel.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { Emitter, Event } from 'monaco-editor/esm/vs/base/common/event.js';
import { ResourceMap } from 'monaco-editor/esm/vs/base/common/map.js';
import { Schemas } from 'monaco-editor/esm/vs/base/common/network.js';
import { Disposable, DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
const IUntitledTextEditorService = ( (createDecorator('untitledTextEditorService')));
let UntitledTextEditorService = class UntitledTextEditorService extends Disposable {
    static { this.UNTITLED_WITHOUT_ASSOCIATED_RESOURCE_REGEX = /Untitled-\d+/; }
    constructor(instantiationService, configurationService) {
        super();
        this.instantiationService = instantiationService;
        this.configurationService = configurationService;
        this._onDidChangeDirty = this._register(( (new Emitter())));
        this.onDidChangeDirty = this._onDidChangeDirty.event;
        this._onDidChangeEncoding = this._register(( (new Emitter())));
        this.onDidChangeEncoding = this._onDidChangeEncoding.event;
        this._onWillDispose = this._register(( (new Emitter())));
        this.onWillDispose = this._onWillDispose.event;
        this._onDidChangeLabel = this._register(( (new Emitter())));
        this.onDidChangeLabel = this._onDidChangeLabel.event;
        this.mapResourceToModel = ( (new ResourceMap()));
    }
    get(resource) {
        return this.mapResourceToModel.get(resource);
    }
    getValue(resource) {
        return this.get(resource)?.textEditorModel?.getValue();
    }
    async resolve(options) {
        const model = this.doCreateOrGet(options);
        await model.resolve();
        return model;
    }
    create(options) {
        return this.doCreateOrGet(options);
    }
    doCreateOrGet(options = Object.create(null)) {
        const massagedOptions = this.massageOptions(options);
        if (massagedOptions.untitledResource && ( (this.mapResourceToModel.has(massagedOptions.untitledResource)))) {
            return this.mapResourceToModel.get(massagedOptions.untitledResource);
        }
        return this.doCreate(massagedOptions);
    }
    massageOptions(options) {
        const massagedOptions = Object.create(null);
        if (options.associatedResource) {
            massagedOptions.untitledResource = ( (URI.from({
                scheme: Schemas.untitled,
                authority: options.associatedResource.authority,
                fragment: options.associatedResource.fragment,
                path: options.associatedResource.path,
                query: options.associatedResource.query
            })));
            massagedOptions.associatedResource = options.associatedResource;
        }
        else {
            if (options.untitledResource?.scheme === Schemas.untitled) {
                massagedOptions.untitledResource = options.untitledResource;
            }
        }
        if (options.languageId) {
            massagedOptions.languageId = options.languageId;
        }
        else if (!massagedOptions.associatedResource) {
            const configuration = this.configurationService.getValue();
            if (configuration.files?.defaultLanguage) {
                massagedOptions.languageId = configuration.files.defaultLanguage;
            }
        }
        massagedOptions.encoding = options.encoding;
        massagedOptions.initialValue = options.initialValue;
        return massagedOptions;
    }
    doCreate(options) {
        let untitledResource = options.untitledResource;
        if (!untitledResource) {
            let counter = 1;
            do {
                untitledResource = ( ( URI.from({ scheme: Schemas.untitled, path: `Untitled-${counter}` })));
                counter++;
            } while (( (this.mapResourceToModel.has(untitledResource))));
        }
        const model = this._register(this.instantiationService.createInstance(UntitledTextEditorModel, untitledResource, !!options.associatedResource, options.initialValue, options.languageId, options.encoding));
        this.registerModel(model);
        return model;
    }
    registerModel(model) {
        const modelListeners = ( (new DisposableStore()));
        modelListeners.add(model.onDidChangeDirty(() => this._onDidChangeDirty.fire(model)));
        modelListeners.add(model.onDidChangeName(() => this._onDidChangeLabel.fire(model)));
        modelListeners.add(model.onDidChangeEncoding(() => this._onDidChangeEncoding.fire(model)));
        modelListeners.add(model.onWillDispose(() => this._onWillDispose.fire(model)));
        Event.once(model.onWillDispose)(() => {
            this.mapResourceToModel.delete(model.resource);
            modelListeners.dispose();
        });
        this.mapResourceToModel.set(model.resource, model);
        if (model.isDirty()) {
            this._onDidChangeDirty.fire(model);
        }
    }
    isUntitledWithAssociatedResource(resource) {
        return resource.scheme === Schemas.untitled && resource.path.length > 1 && !UntitledTextEditorService.UNTITLED_WITHOUT_ASSOCIATED_RESOURCE_REGEX.test(resource.path);
    }
};
UntitledTextEditorService = ( (__decorate([
    ( (__param(0, IInstantiationService))),
    ( (__param(1, IConfigurationService)))
], UntitledTextEditorService)));
export { IUntitledTextEditorService, UntitledTextEditorService };
