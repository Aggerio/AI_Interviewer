import { IWorkspaceToOpen, IFolderToOpen } from '../../../../platform/window/common/window.js';

/**
 * A workspace to open in the workbench can either be:
 * - a workspace file with 0-N folders (via `workspaceUri`)
 * - a single folder (via `folderUri`)
 * - empty (via `undefined`)
 */
type IWorkspace = IWorkspaceToOpen | IFolderToOpen | undefined;
interface IWorkspaceProvider {
    /**
     * The initial workspace to open.
     */
    readonly workspace: IWorkspace;
    /**
     * Arbitrary payload from the `IWorkspaceProvider.open` call.
     */
    readonly payload?: object;
    /**
     * Return `true` if the provided [workspace](#IWorkspaceProvider.workspace) is trusted, `false` if not trusted, `undefined` if unknown.
     */
    readonly trusted: boolean | undefined;
    /**
     * Asks to open a workspace in the current or a new window.
     *
     * @param workspace the workspace to open.
     * @param options optional options for the workspace to open.
     * - `reuse`: whether to open inside the current window or a new window
     * - `payload`: arbitrary payload that should be made available
     * to the opening window via the `IWorkspaceProvider.payload` property.
     * @param payload optional payload to send to the workspace to open.
     *
     * @returns true if successfully opened, false otherwise.
     */
    open(workspace: IWorkspace, options?: {
        reuse?: boolean;
        payload?: object;
    }): Promise<boolean>;
}

export { IWorkspace, IWorkspaceProvider };
