import { Event } from '../../../../base/common/event.js';
import { CancellationToken } from '../../../../base/common/cancellation.js';
import { IWriteFileOptions, IFileStatWithMetadata } from '../../../../platform/files/common/files.js';
import { IMarkdownString } from '../../../../base/common/htmlContent.js';
import { VSBufferReadableStream } from '../../../../base/common/buffer.js';
import { IWorkingCopySaveEvent } from './workingCopy.js';
import { IResourceWorkingCopy } from './resourceWorkingCopy.js';
import { IFileWorkingCopyModel, IFileWorkingCopy } from './fileWorkingCopy.js';

/**
 * The underlying model of a stored file working copy provides some
 * methods for the stored file working copy to function. The model is
 * typically only available after the working copy has been
 * resolved via it's `resolve()` method.
 */
interface IStoredFileWorkingCopyModel extends IFileWorkingCopyModel {
    readonly onDidChangeContent: Event<IStoredFileWorkingCopyModelContentChangedEvent>;
    /**
     * A version ID of the model. If a `onDidChangeContent` is fired
     * from the model and the last known saved `versionId` matches
     * with the `model.versionId`, the stored file working copy will
     * discard any dirty state.
     *
     * A use case is the following:
     * - a stored file working copy gets edited and thus dirty
     * - the user triggers undo to revert the changes
     * - at this point the `versionId` should match the one we had saved
     *
     * This requires the model to be aware of undo/redo operations.
     */
    readonly versionId: unknown;
    /**
     * Close the current undo-redo element. This offers a way
     * to create an undo/redo stop point.
     *
     * This method may for example be called right before the
     * save is triggered so that the user can always undo back
     * to the state before saving.
     */
    pushStackElement(): void;
    /**
     * Optionally allows a stored file working copy model to
     * implement the `save` method. This allows to implement
     * a more efficient save logic compared to the default
     * which is to ask the model for a `snapshot` and then
     * writing that to the model's resource.
     */
    save?(options: IWriteFileOptions, token: CancellationToken): Promise<IFileStatWithMetadata>;
}
interface IStoredFileWorkingCopyModelContentChangedEvent {
    /**
     * Flag that indicates that this event was generated while undoing.
     */
    readonly isUndoing: boolean;
    /**
     * Flag that indicates that this event was generated while redoing.
     */
    readonly isRedoing: boolean;
}
/**
 * A stored file based `IWorkingCopy` is backed by a `URI` from a
 * known file system provider. Given this assumption, a lot
 * of functionality can be built on top, such as saving in
 * a secure way to prevent data loss.
 */
interface IStoredFileWorkingCopy<M extends IStoredFileWorkingCopyModel> extends IResourceWorkingCopy, IFileWorkingCopy<M> {
    /**
     * An event for when a stored file working copy was resolved.
     */
    readonly onDidResolve: Event<void>;
    /**
     * An event for when a stored file working copy was saved successfully.
     */
    readonly onDidSave: Event<IStoredFileWorkingCopySaveEvent>;
    /**
     * An event indicating that a stored file working copy save operation failed.
     */
    readonly onDidSaveError: Event<void>;
    /**
     * An event for when the readonly state of the stored file working copy changes.
     */
    readonly onDidChangeReadonly: Event<void>;
    /**
     * Resolves a stored file working copy.
     */
    resolve(options?: IStoredFileWorkingCopyResolveOptions): Promise<void>;
    /**
     * Explicitly sets the working copy to be modified.
     */
    markModified(): void;
    /**
     * Whether the stored file working copy is in the provided `state`
     * or not.
     *
     * @param state the `FileWorkingCopyState` to check on.
     */
    hasState(state: StoredFileWorkingCopyState): boolean;
    /**
     * Allows to join a state change away from the provided `state`.
     *
     * @param state currently only `FileWorkingCopyState.PENDING_SAVE`
     * can be awaited on to resolve.
     */
    joinState(state: StoredFileWorkingCopyState.PENDING_SAVE): Promise<void>;
    /**
     * Whether we have a resolved model or not.
     */
    isResolved(): this is IResolvedStoredFileWorkingCopy<M>;
    /**
     * Whether the stored file working copy is readonly or not.
     */
    isReadonly(): boolean | IMarkdownString;
}
interface IResolvedStoredFileWorkingCopy<M extends IStoredFileWorkingCopyModel> extends IStoredFileWorkingCopy<M> {
    /**
     * A resolved stored file working copy has a resolved model.
     */
    readonly model: M;
}
/**
 * States the stored file working copy can be in.
 */
declare const enum StoredFileWorkingCopyState {
    /**
     * A stored file working copy is saved.
     */
    SAVED = 0,
    /**
     * A stored file working copy is dirty.
     */
    DIRTY = 1,
    /**
     * A stored file working copy is currently being saved but
     * this operation has not completed yet.
     */
    PENDING_SAVE = 2,
    /**
     * A stored file working copy is in conflict mode when changes
     * cannot be saved because the underlying file has changed.
     * Stored file working copies in conflict mode are always dirty.
     */
    CONFLICT = 3,
    /**
     * A stored file working copy is in orphan state when the underlying
     * file has been deleted.
     */
    ORPHAN = 4,
    /**
     * Any error that happens during a save that is not causing
     * the `StoredFileWorkingCopyState.CONFLICT` state.
     * Stored file working copies in error mode are always dirty.
     */
    ERROR = 5
}
interface IStoredFileWorkingCopyResolveOptions {
    /**
     * The contents to use for the stored file working copy if known. If not
     * provided, the contents will be retrieved from the underlying
     * resource or backup if present.
     *
     * If contents are provided, the stored file working copy will be marked
     * as dirty right from the beginning.
     */
    readonly contents?: VSBufferReadableStream;
    /**
     * Go to disk bypassing any cache of the stored file working copy if any.
     */
    readonly forceReadFromFile?: boolean;
}
interface IStoredFileWorkingCopySaveEvent extends IWorkingCopySaveEvent {
    /**
     * The resolved stat from the save operation.
     */
    readonly stat: IFileStatWithMetadata;
}

export { IResolvedStoredFileWorkingCopy, IStoredFileWorkingCopy, IStoredFileWorkingCopyModel, IStoredFileWorkingCopyModelContentChangedEvent, IStoredFileWorkingCopyResolveOptions, IStoredFileWorkingCopySaveEvent, StoredFileWorkingCopyState };
