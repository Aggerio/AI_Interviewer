import { createDecorator } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { isEditorInput } from '../../../common/editor.js';
const IEditorGroupsService = ( createDecorator('editorGroupsService'));
var GroupDirection;
( (function(GroupDirection) {
    GroupDirection[GroupDirection["UP"] = 0] = "UP";
    GroupDirection[GroupDirection["DOWN"] = 1] = "DOWN";
    GroupDirection[GroupDirection["LEFT"] = 2] = "LEFT";
    GroupDirection[GroupDirection["RIGHT"] = 3] = "RIGHT";
})(GroupDirection || (GroupDirection = {})));
var GroupOrientation;
( (function(GroupOrientation) {
    GroupOrientation[GroupOrientation["HORIZONTAL"] = 0] = "HORIZONTAL";
    GroupOrientation[GroupOrientation["VERTICAL"] = 1] = "VERTICAL";
})(GroupOrientation || (GroupOrientation = {})));
var GroupLocation;
( (function(GroupLocation) {
    GroupLocation[GroupLocation["FIRST"] = 0] = "FIRST";
    GroupLocation[GroupLocation["LAST"] = 1] = "LAST";
    GroupLocation[GroupLocation["NEXT"] = 2] = "NEXT";
    GroupLocation[GroupLocation["PREVIOUS"] = 3] = "PREVIOUS";
})(GroupLocation || (GroupLocation = {})));
var GroupsArrangement;
( (function(GroupsArrangement) {
    GroupsArrangement[GroupsArrangement["MAXIMIZE"] = 0] = "MAXIMIZE";
    GroupsArrangement[GroupsArrangement["EVEN"] = 1] = "EVEN";
    GroupsArrangement[GroupsArrangement["TOGGLE"] = 2] = "TOGGLE";
})(GroupsArrangement || (GroupsArrangement = {})));
var MergeGroupMode;
( (function(MergeGroupMode) {
    MergeGroupMode[MergeGroupMode["COPY_EDITORS"] = 0] = "COPY_EDITORS";
    MergeGroupMode[MergeGroupMode["MOVE_EDITORS"] = 1] = "MOVE_EDITORS";
})(MergeGroupMode || (MergeGroupMode = {})));
function isEditorReplacement(replacement) {
    const candidate = replacement;
    return isEditorInput(candidate?.editor) && isEditorInput(candidate?.replacement);
}
var GroupsOrder;
( (function(GroupsOrder) {
    GroupsOrder[GroupsOrder["CREATION_TIME"] = 0] = "CREATION_TIME";
    GroupsOrder[GroupsOrder["MOST_RECENTLY_ACTIVE"] = 1] = "MOST_RECENTLY_ACTIVE";
    GroupsOrder[GroupsOrder["GRID_APPEARANCE"] = 2] = "GRID_APPEARANCE";
})(GroupsOrder || (GroupsOrder = {})));
function isEditorGroup(obj) {
    const group = obj;
    return !!group && typeof group.id === 'number' && Array.isArray(group.editors);
}
function preferredSideBySideGroupDirection(configurationService) {
    const openSideBySideDirection = configurationService.getValue('workbench.editor.openSideBySideDirection');
    if (openSideBySideDirection === 'down') {
        return 1 ;
    }
    return 3 ;
}
export { GroupDirection, GroupLocation, GroupOrientation, GroupsArrangement, GroupsOrder, IEditorGroupsService, MergeGroupMode, isEditorGroup, isEditorReplacement, preferredSideBySideGroupDirection };
