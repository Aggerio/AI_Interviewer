import { Event } from '../../../../base/common/event.js';
import { ILanguageSupport, IEncodingSupport } from '../../textfile/common/textfiles.js';
import { ITextEditorModel } from '../../../../editor/common/services/resolverService.js';
import { IWorkingCopy } from '../../workingCopy/common/workingCopy.js';

interface IUntitledTextEditorModel extends ITextEditorModel, ILanguageSupport, IEncodingSupport, IWorkingCopy {
    /**
     * Emits an event when the encoding of this untitled model changes.
     */
    readonly onDidChangeEncoding: Event<void>;
    /**
     * Emits an event when the name of this untitled model changes.
     */
    readonly onDidChangeName: Event<void>;
    /**
     * Emits an event when this untitled model is reverted.
     */
    readonly onDidRevert: Event<void>;
    /**
     * Whether this untitled text model has an associated file path.
     */
    readonly hasAssociatedFilePath: boolean;
    /**
     * Whether this model has an explicit language or not.
     */
    readonly hasLanguageSetExplicitly: boolean;
    /**
     * Sets the encoding to use for this untitled model.
     */
    setEncoding(encoding: string): Promise<void>;
    /**
     * Resolves the untitled model.
     */
    resolve(): Promise<void>;
}

export { IUntitledTextEditorModel };
