import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import '../../../../../../override/vs/platform/dialogs/common/dialogs.js';
import { createDecorator } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';
import { IURLService } from '../../../../platform/url/common/url.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { Extensions } from '../../../common/contributions.js';
import { registerAction2, Action2, MenuId } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { IQuickInputService } from 'monaco-editor/esm/vs/platform/quickinput/common/quickInput.js';
import { IsWebContext } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkeys.js';
const USER_TRUSTED_EXTENSIONS_STORAGE_KEY = 'extensionUrlHandler.confirmedExtensions';
function isExtensionId(value) {
    return /^[a-z0-9][a-z0-9\-]*\.[a-z0-9][a-z0-9\-]*$/i.test(value);
}
class UserTrustedExtensionIdStorage {
    get extensions() {
        const userTrustedExtensionIdsJson = this.storageService.get(USER_TRUSTED_EXTENSIONS_STORAGE_KEY, 0 , '[]');
        try {
            return JSON.parse(userTrustedExtensionIdsJson);
        }
        catch {
            return [];
        }
    }
    constructor(storageService) {
        this.storageService = storageService;
    }
    has(id) {
        return this.extensions.indexOf(id) > -1;
    }
    add(id) {
        this.set([...this.extensions, id]);
    }
    set(ids) {
        this.storageService.store(USER_TRUSTED_EXTENSIONS_STORAGE_KEY, JSON.stringify(ids), 0 , 1 );
    }
}
const IExtensionUrlHandler = ( createDecorator('extensionUrlHandler'));
let ExtensionUrlBootstrapHandler = class ExtensionUrlBootstrapHandler {
    static { this._cache = []; }
    static get cache() {
        ExtensionUrlBootstrapHandler.disposable.dispose();
        const result = ExtensionUrlBootstrapHandler._cache;
        ExtensionUrlBootstrapHandler._cache = [];
        return result;
    }
    constructor(urlService) {
        ExtensionUrlBootstrapHandler.disposable = urlService.registerHandler(this);
    }
    async handleURL(uri, options) {
        if (!isExtensionId(uri.authority)) {
            return false;
        }
        ExtensionUrlBootstrapHandler._cache.push([uri, options]);
        return true;
    }
};
ExtensionUrlBootstrapHandler = ( __decorate([
    ( __param(0, IURLService))
], ExtensionUrlBootstrapHandler));
const workbenchRegistry = ( Registry.as(Extensions.Workbench));
workbenchRegistry.registerWorkbenchContribution(ExtensionUrlBootstrapHandler, 2 );
class ManageAuthorizedExtensionURIsAction extends Action2 {
    constructor() {
        super({
            id: 'workbench.extensions.action.manageAuthorizedExtensionURIs',
            title: { value: ( localize('manage', "Manage Authorized Extension URIs...")), original: 'Manage Authorized Extension URIs...' },
            category: { value: ( localize('extensions', "Extensions")), original: 'Extensions' },
            menu: {
                id: MenuId.CommandPalette,
                when: ( IsWebContext.toNegated())
            }
        });
    }
    async run(accessor) {
        const storageService = accessor.get(IStorageService);
        const quickInputService = accessor.get(IQuickInputService);
        const storage = ( new UserTrustedExtensionIdStorage(storageService));
        const items = ( storage.extensions.map(label => ({ label, picked: true })));
        if (items.length === 0) {
            await quickInputService.pick([{ label: ( localize('no', 'There are currently no authorized extension URIs.')) }]);
            return;
        }
        const result = await quickInputService.pick(items, { canPickMany: true });
        if (!result) {
            return;
        }
        storage.set(( result.map(item => item.label)));
    }
}
registerAction2(ManageAuthorizedExtensionURIsAction);
export { IExtensionUrlHandler };
