import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import '../../../../../../override/vs/platform/dialogs/common/dialogs.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { ILogService } from 'monaco-editor/esm/vs/platform/log/common/log.js';
import { IRemoteAuthorityResolverService } from '../../../../platform/remote/common/remoteAuthorityResolver.js';
import { IWorkbenchExtensionEnablementService } from '../../extensionManagement/common/extensionManagement.js';
import { WebWorkerExtensionHost } from './webWorkerExtensionHost.js';
import { checkEnabledAndProposedAPI } from '../common/abstractExtensionService.js';
import { extensionRunningPreferenceToString, extensionHostKindToString } from '../common/extensionHostKind.js';
import { filterExtensionDescriptions } from '../common/extensionRunningLocationTracker.js';
import { RemoteExtensionHost } from '../common/remoteExtensionHost.js';
import { IRemoteAgentService } from '../../remote/common/remoteAgentService.js';
let BrowserExtensionHostFactory = class BrowserExtensionHostFactory {
    constructor(_extensionsProposedApi, _scanWebExtensions, _getExtensions, _instantiationService, _remoteAgentService, _remoteAuthorityResolverService, _extensionEnablementService) {
        this._extensionsProposedApi = _extensionsProposedApi;
        this._scanWebExtensions = _scanWebExtensions;
        this._getExtensions = _getExtensions;
        this._instantiationService = _instantiationService;
        this._remoteAgentService = _remoteAgentService;
        this._remoteAuthorityResolverService = _remoteAuthorityResolverService;
        this._extensionEnablementService = _extensionEnablementService;
    }
    createExtensionHost(runningLocations, runningLocation, isInitialStart) {
        switch (runningLocation.kind) {
            case 1 : {
                return null;
            }
            case 2 : {
                const startup = ((isInitialStart ? 2  : 1) );
                return this._instantiationService.createInstance(WebWorkerExtensionHost, runningLocation, startup, this._createLocalExtensionHostDataProvider(runningLocations, runningLocation, isInitialStart));
            }
            case 3 : {
                const remoteAgentConnection = this._remoteAgentService.getConnection();
                if (remoteAgentConnection) {
                    return this._instantiationService.createInstance(RemoteExtensionHost, runningLocation, this._createRemoteExtensionHostDataProvider(runningLocations, remoteAgentConnection.remoteAuthority));
                }
                return null;
            }
        }
    }
    _createLocalExtensionHostDataProvider(runningLocations, desiredRunningLocation, isInitialStart) {
        return {
            getInitData: async () => {
                if (isInitialStart) {
                    const localExtensions = checkEnabledAndProposedAPI(this._extensionEnablementService, this._extensionsProposedApi, await this._scanWebExtensions(),  true);
                    const runningLocation = runningLocations.computeRunningLocation(localExtensions, [], false);
                    const myExtensions = filterExtensionDescriptions(localExtensions, runningLocation, extRunningLocation => desiredRunningLocation.equals(extRunningLocation));
                    return {
                        allExtensions: localExtensions,
                        myExtensions: ( myExtensions.map(extension => extension.identifier))
                    };
                }
                else {
                    const allExtensions = await this._getExtensions();
                    const myExtensions = runningLocations.filterByRunningLocation(allExtensions, desiredRunningLocation);
                    return {
                        allExtensions: allExtensions,
                        myExtensions: ( myExtensions.map(extension => extension.identifier))
                    };
                }
            }
        };
    }
    _createRemoteExtensionHostDataProvider(runningLocations, remoteAuthority) {
        return {
            remoteAuthority: remoteAuthority,
            getInitData: async () => {
                const allExtensions = await this._getExtensions();
                const remoteEnv = await this._remoteAgentService.getEnvironment();
                if (!remoteEnv) {
                    throw new Error('Cannot provide init data for remote extension host!');
                }
                const myExtensions = runningLocations.filterByExtensionHostKind(allExtensions, 3 );
                const initData = {
                    connectionData: this._remoteAuthorityResolverService.getConnectionData(remoteAuthority),
                    pid: remoteEnv.pid,
                    appRoot: remoteEnv.appRoot,
                    extensionHostLogsPath: remoteEnv.extensionHostLogsPath,
                    globalStorageHome: remoteEnv.globalStorageHome,
                    workspaceStorageHome: remoteEnv.workspaceStorageHome,
                    allExtensions: allExtensions,
                    myExtensions: ( myExtensions.map(extension => extension.identifier)),
                };
                return initData;
            }
        };
    }
};
BrowserExtensionHostFactory = ( __decorate([
    ( __param(3, IInstantiationService)),
    ( __param(4, IRemoteAgentService)),
    ( __param(5, IRemoteAuthorityResolverService)),
    ( __param(6, IWorkbenchExtensionEnablementService))
], BrowserExtensionHostFactory));
let BrowserExtensionHostKindPicker = class BrowserExtensionHostKindPicker {
    constructor(_logService) {
        this._logService = _logService;
    }
    pickExtensionHostKind(extensionId, extensionKinds, isInstalledLocally, isInstalledRemotely, preference) {
        const result = BrowserExtensionHostKindPicker.pickRunningLocation(extensionKinds, isInstalledLocally, isInstalledRemotely, preference);
        this._logService.trace(`pickRunningLocation for ${extensionId.value}, extension kinds: [${extensionKinds.join(', ')}], isInstalledLocally: ${isInstalledLocally}, isInstalledRemotely: ${isInstalledRemotely}, preference: ${extensionRunningPreferenceToString(preference)} => ${extensionHostKindToString(result)}`);
        return result;
    }
    static pickRunningLocation(extensionKinds, isInstalledLocally, isInstalledRemotely, preference) {
        const result = [];
        let canRunRemotely = false;
        for (const extensionKind of extensionKinds) {
            if (extensionKind === 'ui' && isInstalledRemotely) {
                if (preference === 2 ) {
                    return 3 ;
                }
                else {
                    canRunRemotely = true;
                }
            }
            if (extensionKind === 'workspace' && isInstalledRemotely) {
                if (preference === 0  || preference === 2 ) {
                    return 3 ;
                }
                else {
                    result.push(3 );
                }
            }
            if (extensionKind === 'web' && (isInstalledLocally || isInstalledRemotely)) {
                if (preference === 0  || preference === 1 ) {
                    return 2 ;
                }
                else {
                    result.push(2 );
                }
            }
        }
        if (canRunRemotely) {
            result.push(3 );
        }
        return (result.length > 0 ? result[0] : null);
    }
};
BrowserExtensionHostKindPicker = ( __decorate([
    ( __param(0, ILogService))
], BrowserExtensionHostKindPicker));
export { BrowserExtensionHostFactory, BrowserExtensionHostKindPicker };
