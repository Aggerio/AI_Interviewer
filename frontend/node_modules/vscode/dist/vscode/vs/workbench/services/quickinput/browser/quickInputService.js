import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { ILayoutService } from 'monaco-editor/esm/vs/platform/layout/browser/layoutService.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';
import { QuickInputService as QuickInputService$1 } from 'monaco-editor/esm/vs/platform/quickinput/browser/quickInputService.js';
import { InQuickPickContextKey } from '../../../browser/quickaccess.js';
import { IHoverService } from '../../hover/browser/hover.js';
let QuickInputService = class QuickInputService extends QuickInputService$1 {
    constructor(configurationService, instantiationService, keybindingService, contextKeyService, themeService, layoutService, hoverService) {
        super(instantiationService, contextKeyService, themeService, layoutService);
        this.configurationService = configurationService;
        this.keybindingService = keybindingService;
        this.hoverService = hoverService;
        this.hoverDelegate = ( new QuickInputHoverDelegate(this.configurationService, this.hoverService));
        this.inQuickInputContext = InQuickPickContextKey.bindTo(this.contextKeyService);
        this.registerListeners();
    }
    registerListeners() {
        this._register(this.onShow(() => this.inQuickInputContext.set(true)));
        this._register(this.onHide(() => this.inQuickInputContext.set(false)));
    }
    createController() {
        return super.createController(this.layoutService, {
            ignoreFocusOut: () => !this.configurationService.getValue('workbench.quickOpen.closeOnFocusLost'),
            backKeybindingLabel: () => this.keybindingService.lookupKeybinding('workbench.action.quickInputBack')?.getLabel() || undefined,
            hoverDelegate: this.hoverDelegate
        });
    }
};
QuickInputService = ( __decorate([
    ( __param(0, IConfigurationService)),
    ( __param(1, IInstantiationService)),
    ( __param(2, IKeybindingService)),
    ( __param(3, IContextKeyService)),
    ( __param(4, IThemeService)),
    ( __param(5, ILayoutService)),
    ( __param(6, IHoverService))
], QuickInputService));
class QuickInputHoverDelegate {
    get delay() {
        if (Date.now() - this.lastHoverHideTime < 200) {
            return 0;
        }
        return this.configurationService.getValue('workbench.hover.delay');
    }
    constructor(configurationService, hoverService) {
        this.configurationService = configurationService;
        this.hoverService = hoverService;
        this.lastHoverHideTime = 0;
        this.placement = 'element';
    }
    showHover(options, focus) {
        return this.hoverService.showHover({
            ...options,
            showHoverHint: true,
            hideOnKeyDown: false,
            skipFadeInAnimation: true,
        }, focus);
    }
    onDidHideHover() {
        this.lastHoverHideTime = Date.now();
    }
}
export { QuickInputService };
