import * as nls from 'monaco-editor/esm/vs/nls.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { Extensions } from 'monaco-editor/esm/vs/platform/jsonschemas/common/jsonContributionRegistry.js';
import { iconsSchemaId } from 'monaco-editor/esm/vs/platform/theme/common/iconRegistry.js';
const fontIdRegex = '^([\\w_-]+)$';
const fontStyleRegex = '^(normal|italic|(oblique[ \\w\\s-]+))$';
const fontWeightRegex = '^(normal|bold|lighter|bolder|(\\d{0-1000}))$';
const fontSizeRegex = '^([\\w .%_-]+)$';
const fontFormatRegex = '^woff|woff2|truetype|opentype|embedded-opentype|svg$';
const schemaId = 'vscode://schemas/product-icon-theme';
const schema = {
    type: 'object',
    allowComments: true,
    allowTrailingCommas: true,
    properties: {
        fonts: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        description: ( nls.localize('schema.id', 'The ID of the font.')),
                        pattern: fontIdRegex,
                        patternErrorMessage: ( nls.localize(
                            'schema.id.formatError',
                            'The ID must only contain letters, numbers, underscore and minus.'
                        ))
                    },
                    src: {
                        type: 'array',
                        description: ( nls.localize('schema.src', 'The location of the font.')),
                        items: {
                            type: 'object',
                            properties: {
                                path: {
                                    type: 'string',
                                    description: ( nls.localize(
                                        'schema.font-path',
                                        'The font path, relative to the current product icon theme file.'
                                    )),
                                },
                                format: {
                                    type: 'string',
                                    description: ( nls.localize('schema.font-format', 'The format of the font.')),
                                    enum: ['woff', 'woff2', 'truetype', 'opentype', 'embedded-opentype', 'svg']
                                }
                            },
                            required: [
                                'path',
                                'format'
                            ]
                        }
                    },
                    weight: {
                        type: 'string',
                        description: ( nls.localize(
                            'schema.font-weight',
                            'The weight of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight for valid values.'
                        )),
                        anyOf: [
                            { enum: ['normal', 'bold', 'lighter', 'bolder'] },
                            { type: 'string', pattern: fontWeightRegex }
                        ]
                    },
                    style: {
                        type: 'string',
                        description: ( nls.localize(
                            'schema.font-style',
                            'The style of the font. See https://developer.mozilla.org/en-US/docs/Web/CSS/font-style for valid values.'
                        )),
                        anyOf: [
                            { enum: ['normal', 'italic', 'oblique'] },
                            { type: 'string', pattern: fontStyleRegex }
                        ]
                    }
                },
                required: [
                    'id',
                    'src'
                ]
            }
        },
        iconDefinitions: {
            description: ( nls.localize('schema.iconDefinitions', 'Association of icon name to a font character.')),
            $ref: iconsSchemaId
        }
    }
};
function registerProductIconThemeSchemas() {
    const schemaRegistry = ( Registry.as(Extensions.JSONContribution));
    schemaRegistry.registerSchema(schemaId, schema);
}
export { fontFormatRegex, fontIdRegex, fontSizeRegex, fontStyleRegex, fontWeightRegex, registerProductIconThemeSchemas };
