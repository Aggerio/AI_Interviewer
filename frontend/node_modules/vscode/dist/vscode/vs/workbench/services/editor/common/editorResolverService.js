import * as glob from 'monaco-editor/esm/vs/base/common/glob.js';
import { Schemas } from 'monaco-editor/esm/vs/base/common/network.js';
import { posix } from 'monaco-editor/esm/vs/base/common/path.js';
import { basename } from 'monaco-editor/esm/vs/base/common/resources.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { workbenchConfigurationNodeBase } from '../../../common/configuration.js';
import { Extensions } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';
import { createDecorator } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
const IEditorResolverService = ( createDecorator('editorResolverService'));
const editorsAssociationsSettingId = 'workbench.editorAssociations';
const configurationRegistry = ( Registry.as(Extensions.Configuration));
const editorAssociationsConfigurationNode = {
    ...workbenchConfigurationNodeBase,
    properties: {
        'workbench.editorAssociations': {
            type: 'object',
            markdownDescription: ( localize(
                'editor.editorAssociations',
                "Configure [glob patterns](https://aka.ms/vscode-glob-patterns) to editors (for example `\"*.hex\": \"hexEditor.hexedit\"`). These have precedence over the default behavior."
            )),
            additionalProperties: {
                type: 'string'
            }
        }
    }
};
configurationRegistry.registerConfiguration(editorAssociationsConfigurationNode);
var RegisteredEditorPriority;
( (function(RegisteredEditorPriority) {
    RegisteredEditorPriority["builtin"] = "builtin";
    RegisteredEditorPriority["option"] = "option";
    RegisteredEditorPriority["exclusive"] = "exclusive";
    RegisteredEditorPriority["default"] = "default";
})(RegisteredEditorPriority || (RegisteredEditorPriority = {})));
function priorityToRank(priority) {
    switch (priority) {
        case RegisteredEditorPriority.exclusive:
            return 5;
        case RegisteredEditorPriority.default:
            return 4;
        case RegisteredEditorPriority.builtin:
            return 3;
        case RegisteredEditorPriority.option:
        default:
            return 1;
    }
}
function globMatchesResource(globPattern, resource) {
    const excludedSchemes = ( new Set([
        Schemas.extension,
        Schemas.webviewPanel,
        Schemas.vscodeWorkspaceTrust,
        Schemas.vscodeSettings
    ]));
    if (( excludedSchemes.has(resource.scheme))) {
        return false;
    }
    const matchOnPath = typeof globPattern === 'string' && globPattern.indexOf(posix.sep) >= 0;
    const target = matchOnPath ? `${resource.scheme}:${resource.path}` : basename(resource);
    return glob.match(typeof globPattern === 'string' ? globPattern.toLowerCase() : globPattern, target.toLowerCase());
}
export { IEditorResolverService, RegisteredEditorPriority, editorsAssociationsSettingId, globMatchesResource, priorityToRank };
