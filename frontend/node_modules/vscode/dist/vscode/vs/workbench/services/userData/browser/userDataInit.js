import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { createDecorator, IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { Extensions } from '../../../common/contributions.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { isWeb } from 'monaco-editor/esm/vs/base/common/platform.js';
import { IExtensionService } from '../../extensions/common/extensions.js';
import { mark } from 'monaco-editor/esm/vs/base/common/performance.js';
const IUserDataInitializationService = ( createDecorator('IUserDataInitializationService'));
let InitializeOtherResourcesContribution = class InitializeOtherResourcesContribution {
    constructor(userDataInitializeService, instantiationService, extensionService) {
        extensionService.whenInstalledExtensionsRegistered().then(() => this.initializeOtherResource(userDataInitializeService, instantiationService));
    }
    async initializeOtherResource(userDataInitializeService, instantiationService) {
        if (await userDataInitializeService.requiresInitialization()) {
            mark('code/willInitOtherUserData');
            await userDataInitializeService.initializeOtherResources(instantiationService);
            mark('code/didInitOtherUserData');
        }
    }
};
InitializeOtherResourcesContribution = ( __decorate([
    ( __param(0, IUserDataInitializationService)),
    ( __param(1, IInstantiationService)),
    ( __param(2, IExtensionService))
], InitializeOtherResourcesContribution));
if (isWeb) {
    const workbenchRegistry = ( Registry.as(Extensions.Workbench));
    workbenchRegistry.registerWorkbenchContribution(InitializeOtherResourcesContribution, 3 );
}
export { IUserDataInitializationService };
