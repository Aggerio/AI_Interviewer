import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { raceCancellation } from 'monaco-editor/esm/vs/base/common/async.js';
import { CancellationTokenSource } from 'monaco-editor/esm/vs/base/common/cancellation.js';
import { ILogService } from 'monaco-editor/esm/vs/platform/log/common/log.js';
import { IProgressService } from 'monaco-editor/esm/vs/platform/progress/common/progress.js';
import { Disposable, toDisposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { insert } from 'monaco-editor/esm/vs/base/common/arrays.js';
let StoredFileWorkingCopySaveParticipant = class StoredFileWorkingCopySaveParticipant extends Disposable {
    get length() { return this.saveParticipants.length; }
    constructor(progressService, logService) {
        super();
        this.progressService = progressService;
        this.logService = logService;
        this.saveParticipants = [];
    }
    addSaveParticipant(participant) {
        const remove = insert(this.saveParticipants, participant);
        return toDisposable(() => remove());
    }
    participate(workingCopy, context, token) {
        const cts = ( new CancellationTokenSource(token));
        return this.progressService.withProgress({
            title: ( localize('saveParticipants', "Saving '{0}'", workingCopy.name)),
            location: 15 ,
            cancellable: true,
            delay: workingCopy.isDirty() ? 3000 : 5000
        }, async (progress) => {
            workingCopy.model?.pushStackElement();
            for (const saveParticipant of this.saveParticipants) {
                if (cts.token.isCancellationRequested || workingCopy.isDisposed()) {
                    break;
                }
                try {
                    const promise = saveParticipant.participate(workingCopy, context, progress, cts.token);
                    await raceCancellation(promise, cts.token);
                }
                catch (err) {
                    this.logService.warn(err);
                }
            }
            workingCopy.model?.pushStackElement();
        }, () => {
            cts.dispose(true);
        });
    }
    dispose() {
        this.saveParticipants.splice(0, this.saveParticipants.length);
    }
};
StoredFileWorkingCopySaveParticipant = ( __decorate([
    ( __param(0, IProgressService)),
    ( __param(1, ILogService))
], StoredFileWorkingCopySaveParticipant));
export { StoredFileWorkingCopySaveParticipant };
