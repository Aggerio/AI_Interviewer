import { IStorage } from '../../../../base/parts/storage/common/storage.js';
import { ILogService } from '../../../../platform/log/common/log.js';
import { AbstractStorageService, StorageScope } from '../../../../platform/storage/common/storage.js';
import { IUserDataProfile } from '../../../../platform/userDataProfile/common/userDataProfile.js';
import { IAnyWorkspaceIdentifier } from '../../../../platform/workspace/common/workspace.js';
import { IUserDataProfileService } from '../../userDataProfile/common/userDataProfile.js';

declare class BrowserStorageService extends AbstractStorageService {
    private readonly workspace;
    private readonly userDataProfileService;
    private readonly logService;
    private static BROWSER_DEFAULT_FLUSH_INTERVAL;
    private applicationStorage;
    private applicationStorageDatabase;
    private readonly applicationStoragePromise;
    private profileStorage;
    private profileStorageDatabase;
    private profileStorageProfile;
    private readonly profileStorageDisposables;
    private workspaceStorage;
    private workspaceStorageDatabase;
    get hasPendingUpdate(): boolean;
    constructor(workspace: IAnyWorkspaceIdentifier, userDataProfileService: IUserDataProfileService, logService: ILogService);
    private registerListeners;
    protected doInitialize(): Promise<void>;
    private createApplicationStorage;
    private createProfileStorage;
    private createWorkspaceStorage;
    private updateIsNew;
    protected getStorage(scope: StorageScope): IStorage | undefined;
    protected getLogDetails(scope: StorageScope): string | undefined;
    protected switchToProfile(toProfile: IUserDataProfile): Promise<void>;
    protected switchToWorkspace(toWorkspace: IAnyWorkspaceIdentifier, preserveData: boolean): Promise<void>;
    protected shouldFlushWhenIdle(): boolean;
    close(): void;
    clear(): Promise<void>;
    hasScope(scope: IAnyWorkspaceIdentifier | IUserDataProfile): boolean;
}

export { BrowserStorageService };
