import { ServiceIdentifier } from '../../../../platform/instantiation/common/instantiation.js';
import { Event } from '../../../../base/common/event.js';
import { URI } from '../../../../base/common/uri.js';
import { IBaseFileStat } from '../../../../platform/files/common/files.js';
import { IMarkdownString } from '../../../../base/common/htmlContent.js';

interface IAutoSaveConfiguration {
    readonly autoSaveDelay?: number;
    readonly autoSaveFocusChange: boolean;
    readonly autoSaveApplicationChange: boolean;
}
declare const enum AutoSaveMode {
    OFF = 0,
    AFTER_SHORT_DELAY = 1,
    AFTER_LONG_DELAY = 2,
    ON_FOCUS_CHANGE = 3,
    ON_WINDOW_CHANGE = 4
}
declare const IFilesConfigurationService: ServiceIdentifier<IFilesConfigurationService>;
interface IFilesConfigurationService {
    readonly _serviceBrand: undefined;
    readonly onAutoSaveConfigurationChange: Event<IAutoSaveConfiguration>;
    getAutoSaveConfiguration(): IAutoSaveConfiguration;
    getAutoSaveMode(): AutoSaveMode;
    toggleAutoSave(): Promise<void>;
    readonly onReadonlyChange: Event<void>;
    isReadonly(resource: URI, stat?: IBaseFileStat): boolean | IMarkdownString;
    updateReadonly(resource: URI, readonly: true | false | 'toggle' | 'reset'): Promise<void>;
    readonly onFilesAssociationChange: Event<void>;
    readonly isHotExitEnabled: boolean;
    readonly hotExitConfiguration: string | undefined;
    preventSaveConflicts(resource: URI, language?: string): boolean;
}

export { AutoSaveMode, IAutoSaveConfiguration, IFilesConfigurationService };
