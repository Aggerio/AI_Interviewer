import { ServiceIdentifier } from '../../../../platform/instantiation/common/instantiation.js';
import { Event } from '../../../../base/common/event.js';
import { IOpenEmptyWindowOptions, IWindowOpenable, IOpenWindowOptions } from '../../../../platform/window/common/window.js';

declare const IHostService: ServiceIdentifier<IHostService>;
/**
 * A set of methods supported in both web and native environments.
 *
 * @see {@link INativeHostService} for methods that are specific to native
 * environments.
 */
interface IHostService {
    readonly _serviceBrand: undefined;
    /**
     * Emitted when the window focus changes.
     */
    readonly onDidChangeFocus: Event<boolean>;
    /**
     * Find out if the window has focus or not.
     */
    readonly hasFocus: boolean;
    /**
     * Find out if the window had the last focus.
     */
    hadLastFocus(): Promise<boolean>;
    /**
     * Attempt to bring the window to the foreground and focus it.
     *
     * @param options Pass `force: true` if you want to make the window take
     * focus even if the application does not have focus currently. This option
     * should only be used if it is necessary to steal focus from the current
     * focused application which may not be VSCode. It may not be supported
     * in all environments.
     */
    focus(options?: {
        force: boolean;
    }): Promise<void>;
    /**
     * Opens an empty window. The optional parameter allows to define if
     * a new window should open or the existing one change to an empty.
     */
    openWindow(options?: IOpenEmptyWindowOptions): Promise<void>;
    /**
     * Opens the provided array of openables in a window with the provided options.
     */
    openWindow(toOpen: IWindowOpenable[], options?: IOpenWindowOptions): Promise<void>;
    /**
     * Switch between fullscreen and normal window.
     */
    toggleFullScreen(): Promise<void>;
    /**
     * Restart the entire application.
     */
    restart(): Promise<void>;
    /**
     * Reload the currently active window.
     */
    reload(options?: {
        disableExtensions?: boolean;
    }): Promise<void>;
    /**
     * Attempt to close the active window.
     */
    close(): Promise<void>;
    /**
     * Execute an asynchronous `expectedShutdownTask`. While this task is
     * in progress, attempts to quit the application will not be vetoed with a dialog.
     */
    withExpectedShutdown<T>(expectedShutdownTask: () => Promise<T>): Promise<T>;
}

export { IHostService };
