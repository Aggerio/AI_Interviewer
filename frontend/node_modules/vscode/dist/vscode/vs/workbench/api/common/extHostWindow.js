import { __decorate, __param } from '../../../../../node_modules/tslib/tslib.es6.js';
import { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { MainContext } from './extHost.protocol.js';
import { URI } from 'monaco-editor/esm/vs/base/common/uri.js';
import { Schemas } from 'monaco-editor/esm/vs/base/common/network.js';
import { isFalsyOrWhitespace } from 'monaco-editor/esm/vs/base/common/strings.js';
import { createDecorator } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { IExtHostRpcService } from './extHostRpcService.js';
import { checkProposedApiEnabled } from '../../services/extensions/common/extensions.js';
let ExtHostWindow = class ExtHostWindow {
    static { this.InitialState = {
        focused: true,
        active: true,
    }; }
    getState(extension) {
        const state = this._state;
        return {
            get focused() {
                return state.focused;
            },
            get active() {
                checkProposedApiEnabled(extension, 'windowActivity');
                return state.active;
            },
        };
    }
    constructor(extHostRpc) {
        this._onDidChangeWindowState = ( new Emitter());
        this.onDidChangeWindowState = this._onDidChangeWindowState.event;
        this._state = ExtHostWindow.InitialState;
        this._proxy = ( extHostRpc.getProxy(MainContext.MainThreadWindow));
        this._proxy.$getInitialState().then(({ isFocused, isActive }) => {
            this.onDidChangeWindowProperty('focused', isFocused);
            this.onDidChangeWindowProperty('active', isActive);
        });
    }
    $onDidChangeWindowFocus(value) {
        this.onDidChangeWindowProperty('focused', value);
    }
    $onDidChangeWindowActive(value) {
        this.onDidChangeWindowProperty('active', value);
    }
    onDidChangeWindowProperty(property, value) {
        if (value === this._state[property]) {
            return;
        }
        this._state = { ...this._state, [property]: value };
        this._onDidChangeWindowState.fire(this._state);
    }
    openUri(stringOrUri, options) {
        let uriAsString;
        if (typeof stringOrUri === 'string') {
            uriAsString = stringOrUri;
            try {
                stringOrUri = ( URI.parse(stringOrUri));
            }
            catch (e) {
                return Promise.reject(`Invalid uri - '${stringOrUri}'`);
            }
        }
        if (isFalsyOrWhitespace(stringOrUri.scheme)) {
            return Promise.reject('Invalid scheme - cannot be empty');
        }
        else if (stringOrUri.scheme === Schemas.command) {
            return Promise.reject(`Invalid scheme '${stringOrUri.scheme}'`);
        }
        return this._proxy.$openUri(stringOrUri, uriAsString, options);
    }
    async asExternalUri(uri, options) {
        if (isFalsyOrWhitespace(uri.scheme)) {
            return Promise.reject('Invalid scheme - cannot be empty');
        }
        const result = await this._proxy.$asExternalUri(uri, options);
        return ( URI.from(result));
    }
};
ExtHostWindow = ( __decorate([
    ( __param(0, IExtHostRpcService))
], ExtHostWindow));
const IExtHostWindow = ( createDecorator('IExtHostWindow'));
export { ExtHostWindow, IExtHostWindow };
