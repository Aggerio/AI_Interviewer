import { __decorate, __param } from '../../../../../node_modules/tslib/tslib.es6.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { extHostNamedCustomer } from '../../services/extensions/common/extHostCustomers.js';
import { ICredentialsService } from '../../../platform/credentials/common/credentials.js';
import { ExtHostContext, MainContext } from '../common/extHost.protocol.js';
import { ILogService } from 'monaco-editor/esm/vs/platform/log/common/log.js';
import { SequencerByKey } from 'monaco-editor/esm/vs/base/common/async.js';
import { ISecretStorageService } from '../../../platform/secrets/common/secrets.js';
import { IBrowserWorkbenchEnvironmentService } from '../../services/environment/browser/environmentService.js';
import { IEncryptionService } from '../../../platform/encryption/common/encryptionService.js';
class OldMainThreadSecretState extends Disposable {
    constructor(_proxy, credentialsService, encryptionService, logService) {
        super();
        this._proxy = _proxy;
        this.credentialsService = credentialsService;
        this.encryptionService = encryptionService;
        this.logService = logService;
        this.secretStoragePrefix = this.credentialsService.getSecretStoragePrefix();
        this._register(this.credentialsService.onDidChangePassword(async (e) => {
            const extensionId = e.service?.substring((await this.secretStoragePrefix).length);
            if (extensionId) {
                this._proxy.$onDidChangePassword({ extensionId, key: e.account });
            }
        }));
    }
    async getFullKey(extensionId) {
        return `${await this.secretStoragePrefix}${extensionId}`;
    }
    async $getPassword(extensionId, key) {
        this.logService.trace(`MainThreadSecretState#getPassword: Getting password for ${extensionId} extension: `, key);
        const fullKey = await this.getFullKey(extensionId);
        const password = await this.credentialsService.getPassword(fullKey, key);
        if (!password) {
            this.logService.trace('MainThreadSecretState#getPassword: No password found for: ', key);
            return undefined;
        }
        let decrypted;
        try {
            this.logService.trace('MainThreadSecretState#getPassword: Decrypting password for: ', key);
            decrypted = await this.encryptionService.decrypt(password);
        }
        catch (e) {
            this.logService.error(e);
            this.logService.trace('MainThreadSecretState#getPassword: Trying migration for: ', key);
            const encryptedForSet = await this.encryptionService.encrypt(password);
            await this.credentialsService.setPassword(fullKey, key, encryptedForSet);
            const passwordEncrypted = await this.credentialsService.getPassword(fullKey, key);
            decrypted = passwordEncrypted && (await this.encryptionService.decrypt(passwordEncrypted));
        }
        if (decrypted) {
            try {
                const value = JSON.parse(decrypted);
                if (value.extensionId === extensionId) {
                    this.logService.trace('MainThreadSecretState#getPassword: Password found for: ', key);
                    return value.content;
                }
            }
            catch (parseError) {
                this.logService.error(parseError);
                throw new Error('Unable to parse decrypted password');
            }
        }
        this.logService.trace('MainThreadSecretState#getPassword: No password found for: ', key);
        return undefined;
    }
    async $setPassword(extensionId, key, value) {
        this.logService.trace(`MainThreadSecretState#setPassword: Setting password for ${extensionId} extension: `, key);
        const fullKey = await this.getFullKey(extensionId);
        const toEncrypt = JSON.stringify({
            extensionId,
            content: value
        });
        this.logService.trace('MainThreadSecretState#setPassword: Encrypting password for: ', key);
        const encrypted = await this.encryptionService.encrypt(toEncrypt);
        this.logService.trace('MainThreadSecretState#setPassword: Storing password for: ', key);
        return await this.credentialsService.setPassword(fullKey, key, encrypted);
    }
    async $deletePassword(extensionId, key) {
        try {
            const fullKey = await this.getFullKey(extensionId);
            await this.credentialsService.deletePassword(fullKey, key);
        }
        catch (_) {
            throw new Error('Cannot delete password');
        }
    }
}
let MainThreadSecretState = class MainThreadSecretState extends Disposable {
    constructor(extHostContext, secretStorageService, logService, credentialsService, encryptionService, environmentService) {
        super();
        this.secretStorageService = secretStorageService;
        this.logService = logService;
        this.credentialsService = credentialsService;
        this.encryptionService = encryptionService;
        this._sequencer = ( new SequencerByKey());
        this.secretStoragePrefix = this.credentialsService.getSecretStoragePrefix();
        this._proxy = ( extHostContext.getProxy(ExtHostContext.ExtHostSecretState));
        if (environmentService.options?.credentialsProvider && !environmentService.options?.secretStorageProvider) {
            this._oldMainThreadSecretState = this._register(( new OldMainThreadSecretState(this._proxy, credentialsService, encryptionService, logService)));
        }
        this._register(this.secretStorageService.onDidChangeSecret((e) => {
            try {
                const { extensionId, key } = this.parseKey(e);
                if (extensionId && key) {
                    this._proxy.$onDidChangePassword({ extensionId, key });
                }
            }
            catch (e) {
            }
        }));
    }
    $getPassword(extensionId, key) {
        this.logService.trace(`[mainThreadSecretState] Getting password for ${extensionId} extension: `, key);
        return this._sequencer.queue(extensionId, () => this.doGetPassword(extensionId, key));
    }
    async doGetPassword(extensionId, key) {
        if (this._oldMainThreadSecretState) {
            return await this._oldMainThreadSecretState.$getPassword(extensionId, key);
        }
        const fullKey = this.getKey(extensionId, key);
        const password = await this.secretStorageService.get(fullKey);
        if (!password) {
            this.logService.trace('[mainThreadSecretState] No password found for: ', extensionId, key);
            const password = await this.getAndDeleteOldPassword(extensionId, key);
            return password;
        }
        this.logService.trace('[mainThreadSecretState] Password found for: ', extensionId, key);
        return password;
    }
    $setPassword(extensionId, key, value) {
        this.logService.trace(`[mainThreadSecretState] Setting password for ${extensionId} extension: `, key);
        return this._sequencer.queue(extensionId, () => this.doSetPassword(extensionId, key, value));
    }
    async doSetPassword(extensionId, key, value) {
        if (this._oldMainThreadSecretState) {
            return await this._oldMainThreadSecretState.$setPassword(extensionId, key, value);
        }
        const fullKey = this.getKey(extensionId, key);
        await this.secretStorageService.set(fullKey, value);
        this.logService.trace('[mainThreadSecretState] Password set for: ', extensionId, key);
    }
    $deletePassword(extensionId, key) {
        this.logService.trace(`[mainThreadSecretState] Deleting password for ${extensionId} extension: `, key);
        return this._sequencer.queue(extensionId, () => this.doDeletePassword(extensionId, key));
    }
    async doDeletePassword(extensionId, key) {
        if (this._oldMainThreadSecretState) {
            return await this._oldMainThreadSecretState.$deletePassword(extensionId, key);
        }
        const fullKey = this.getKey(extensionId, key);
        await this.secretStorageService.delete(fullKey);
        this.logService.trace('[mainThreadSecretState] Password deleted for: ', extensionId, key);
    }
    getKey(extensionId, key) {
        return JSON.stringify({ extensionId, key });
    }
    parseKey(key) {
        return JSON.parse(key);
    }
    async getAndDeleteOldPassword(extensionId, key) {
        const password = await this.getOldPassword(extensionId, key);
        if (password) {
            const fullKey = this.getKey(extensionId, key);
            this.logService.trace('[mainThreadSecretState] Setting old password to new location for: ', extensionId, key);
            await this.secretStorageService.set(fullKey, password);
            this.logService.trace('[mainThreadSecretState] Old Password set to new location for: ', extensionId, key);
            if (this.secretStorageService.type === 'persisted') {
                this.logService.trace('[mainThreadSecretState] Deleting old password for since it was persisted in the new location: ', extensionId, key);
                await this.deleteOldPassword(extensionId, key);
            }
        }
        return password;
    }
    async getOldPassword(extensionId, key) {
        this.logService.trace(`[mainThreadSecretState] Getting old password for ${extensionId} extension: `, key);
        const fullKey = `${await this.secretStoragePrefix}${extensionId}`;
        const password = await this.credentialsService.getPassword(fullKey, key);
        if (!password) {
            this.logService.trace('[mainThreadSecretState] No old password found for: ', extensionId, key);
            return undefined;
        }
        let decrypted;
        try {
            this.logService.trace('[mainThreadSecretState] Decrypting old password for: ', extensionId, key);
            decrypted = await this.encryptionService.decrypt(password);
        }
        catch (e) {
            this.logService.error(e);
            this.logService.trace('[mainThreadSecretState] Trying old migration for: ', extensionId, key);
            const encryptedForSet = await this.encryptionService.encrypt(password);
            await this.credentialsService.setPassword(fullKey, key, encryptedForSet);
            const passwordEncrypted = await this.credentialsService.getPassword(fullKey, key);
            decrypted = passwordEncrypted && (await this.encryptionService.decrypt(passwordEncrypted));
        }
        if (decrypted) {
            try {
                const value = JSON.parse(decrypted);
                if (value.extensionId === extensionId) {
                    this.logService.trace('[mainThreadSecretState] Old password found for: ', extensionId, key);
                    return value.content;
                }
            }
            catch (parseError) {
                this.logService.error(parseError);
                return undefined;
            }
        }
        this.logService.trace('[mainThreadSecretState] No old password found for: ', extensionId, key);
        return undefined;
    }
    async deleteOldPassword(extensionId, key) {
        try {
            const fullKey = `${await this.secretStoragePrefix}${extensionId}`;
            this.logService.trace(`[mainThreadSecretState] Deleting old password for ${extensionId} extension: `, key);
            await this.credentialsService.deletePassword(fullKey, key);
            this.logService.trace('[mainThreadSecretState] Old password deleted for: ', extensionId, key);
        }
        catch (_) {
            throw new Error('Cannot delete password');
        }
    }
};
MainThreadSecretState = __decorate([
    extHostNamedCustomer(MainContext.MainThreadSecretState),
    ( __param(1, ISecretStorageService)),
    ( __param(2, ILogService)),
    ( __param(3, ICredentialsService)),
    ( __param(4, IEncryptionService)),
    ( __param(5, IBrowserWorkbenchEnvironmentService))
], MainThreadSecretState);
export { MainThreadSecretState };
