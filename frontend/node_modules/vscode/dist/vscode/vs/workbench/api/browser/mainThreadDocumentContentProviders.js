import { __decorate, __param } from '../../../../../node_modules/tslib/tslib.es6.js';
import { onUnexpectedError } from 'monaco-editor/esm/vs/base/common/errors.js';
import { DisposableMap, dispose } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { URI } from 'monaco-editor/esm/vs/base/common/uri.js';
import { EditOperation } from 'monaco-editor/esm/vs/editor/common/core/editOperation.js';
import { Range } from 'monaco-editor/esm/vs/editor/common/core/range.js';
import { IEditorWorkerService } from 'monaco-editor/esm/vs/editor/common/services/editorWorker.js';
import { IModelService } from 'monaco-editor/esm/vs/editor/common/services/model.js';
import { ILanguageService } from 'monaco-editor/esm/vs/editor/common/languages/language.js';
import { ITextModelService } from 'monaco-editor/esm/vs/editor/common/services/resolverService.js';
import { extHostNamedCustomer } from '../../services/extensions/common/extHostCustomers.js';
import { ExtHostContext, MainContext } from '../common/extHost.protocol.js';
import { CancellationTokenSource } from 'monaco-editor/esm/vs/base/common/cancellation.js';
let MainThreadDocumentContentProviders = class MainThreadDocumentContentProviders {
    constructor(extHostContext, _textModelResolverService, _languageService, _modelService, _editorWorkerService) {
        this._textModelResolverService = _textModelResolverService;
        this._languageService = _languageService;
        this._modelService = _modelService;
        this._editorWorkerService = _editorWorkerService;
        this._resourceContentProvider = ( new DisposableMap());
        this._pendingUpdate = ( new Map());
        this._proxy = ( extHostContext.getProxy(ExtHostContext.ExtHostDocumentContentProviders));
    }
    dispose() {
        this._resourceContentProvider.dispose();
        dispose(( this._pendingUpdate.values()));
    }
    $registerTextContentProvider(handle, scheme) {
        const registration = this._textModelResolverService.registerTextModelContentProvider(scheme, {
            provideTextContent: (uri) => {
                return this._proxy.$provideTextDocumentContent(handle, uri).then(value => {
                    if (typeof value === 'string') {
                        const firstLineText = value.substr(0, 1 + value.search(/\r?\n/));
                        const languageSelection = this._languageService.createByFilepathOrFirstLine(uri, firstLineText);
                        return this._modelService.createModel(value, languageSelection, uri);
                    }
                    return null;
                });
            }
        });
        this._resourceContentProvider.set(handle, registration);
    }
    $unregisterTextContentProvider(handle) {
        this._resourceContentProvider.deleteAndDispose(handle);
    }
    $onVirtualDocumentChange(uri, value) {
        const model = this._modelService.getModel(URI.revive(uri));
        if (!model) {
            return;
        }
        const pending = this._pendingUpdate.get(model.id);
        pending?.cancel();
        const myToken = ( new CancellationTokenSource());
        this._pendingUpdate.set(model.id, myToken);
        this._editorWorkerService.computeMoreMinimalEdits(model.uri, [{ text: value, range: model.getFullModelRange() }]).then(edits => {
            this._pendingUpdate.delete(model.id);
            if (myToken.token.isCancellationRequested) {
                return;
            }
            if (edits && edits.length > 0) {
                model.applyEdits(( edits.map(edit => EditOperation.replace(Range.lift(edit.range), edit.text))));
            }
        }).catch(onUnexpectedError);
    }
};
MainThreadDocumentContentProviders = __decorate([
    extHostNamedCustomer(MainContext.MainThreadDocumentContentProviders),
    ( __param(1, ITextModelService)),
    ( __param(2, ILanguageService)),
    ( __param(3, IModelService)),
    ( __param(4, IEditorWorkerService))
], MainThreadDocumentContentProviders);
export { MainThreadDocumentContentProviders };
