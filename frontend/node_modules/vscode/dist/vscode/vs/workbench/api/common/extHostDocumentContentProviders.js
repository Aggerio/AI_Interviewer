import { onUnexpectedError } from 'monaco-editor/esm/vs/base/common/errors.js';
import { URI } from 'monaco-editor/esm/vs/base/common/uri.js';
import { Disposable } from './extHostTypes.js';
import { MainContext } from './extHost.protocol.js';
import { Schemas } from 'monaco-editor/esm/vs/base/common/network.js';
import { CancellationToken } from 'monaco-editor/esm/vs/base/common/cancellation.js';
import { splitLines } from 'monaco-editor/esm/vs/base/common/strings.js';
class ExtHostDocumentContentProvider {
    static { this._handlePool = 0; }
    constructor(mainContext, _documentsAndEditors, _logService) {
        this._documentsAndEditors = _documentsAndEditors;
        this._logService = _logService;
        this._documentContentProviders = ( new Map());
        this._proxy = ( mainContext.getProxy(MainContext.MainThreadDocumentContentProviders));
    }
    registerTextDocumentContentProvider(scheme, provider) {
        if (( Object.keys(Schemas)).indexOf(scheme) >= 0) {
            throw new Error(`scheme '${scheme}' already registered`);
        }
        const handle = ExtHostDocumentContentProvider._handlePool++;
        this._documentContentProviders.set(handle, provider);
        this._proxy.$registerTextContentProvider(handle, scheme);
        let subscription;
        if (typeof provider.onDidChange === 'function') {
            subscription = provider.onDidChange(uri => {
                if (uri.scheme !== scheme) {
                    this._logService.warn(`Provider for scheme '${scheme}' is firing event for schema '${uri.scheme}' which will be IGNORED`);
                    return;
                }
                if (this._documentsAndEditors.getDocument(uri)) {
                    this.$provideTextDocumentContent(handle, uri).then(value => {
                        if (!value && typeof value !== 'string') {
                            return;
                        }
                        const document = this._documentsAndEditors.getDocument(uri);
                        if (!document) {
                            return;
                        }
                        const lines = splitLines(value);
                        if (!document.equalLines(lines)) {
                            return this._proxy.$onVirtualDocumentChange(uri, value);
                        }
                    }, onUnexpectedError);
                }
            });
        }
        return ( new Disposable(() => {
            if (this._documentContentProviders.delete(handle)) {
                this._proxy.$unregisterTextContentProvider(handle);
            }
            if (subscription) {
                subscription.dispose();
                subscription = undefined;
            }
        }));
    }
    $provideTextDocumentContent(handle, uri) {
        const provider = this._documentContentProviders.get(handle);
        if (!provider) {
            return Promise.reject(( new Error(`unsupported uri-scheme: ${uri.scheme}`)));
        }
        return Promise.resolve(provider.provideTextDocumentContent(URI.revive(uri), CancellationToken.None));
    }
}
export { ExtHostDocumentContentProvider };
