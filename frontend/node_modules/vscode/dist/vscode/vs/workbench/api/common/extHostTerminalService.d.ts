import { ServiceIdentifier } from '../../../platform/instantiation/common/instantiation.js';
import * as vscode from 'vscode';
import { Event } from '../../../base/common/event.js';
import { ExtHostTerminalServiceShape, ExtHostTerminalIdentifier } from './extHost.protocol.js';
import { IDisposable } from '../../../base/common/lifecycle.js';
import { IExtensionDescription } from '../../../platform/extensions/common/extensions.js';
import { TerminalLocation } from '../../../platform/terminal/common/terminal.js';

type IEnvironmentVariableCollection = vscode.EnvironmentVariableCollection & {
    getScopedEnvironmentVariableCollection(scope: vscode.EnvironmentVariableScope | undefined): vscode.EnvironmentVariableCollection;
};
interface ITerminalInternalOptions {
    isFeatureTerminal?: boolean;
    useShellEnvironment?: boolean;
    resolvedExtHostIdentifier?: ExtHostTerminalIdentifier;
    /**
     * This location is different from the API location because it can include splitActiveTerminal,
     * a property we resolve internally
     */
    location?: TerminalLocation | {
        viewColumn: number;
        preserveState?: boolean;
    } | {
        splitActiveTerminal: boolean;
    };
}

interface IExtHostTerminalService extends ExtHostTerminalServiceShape, IDisposable {
    readonly _serviceBrand: undefined;
    activeTerminal: vscode.Terminal | undefined;
    terminals: vscode.Terminal[];
    onDidCloseTerminal: Event<vscode.Terminal>;
    onDidOpenTerminal: Event<vscode.Terminal>;
    onDidChangeActiveTerminal: Event<vscode.Terminal | undefined>;
    onDidChangeTerminalDimensions: Event<vscode.TerminalDimensionsChangeEvent>;
    onDidChangeTerminalState: Event<vscode.Terminal>;
    onDidWriteTerminalData: Event<vscode.TerminalDataWriteEvent>;
    onDidChangeShell: Event<string>;
    createTerminal(name?: string, shellPath?: string, shellArgs?: readonly string[] | string): vscode.Terminal;
    createTerminalFromOptions(options: vscode.TerminalOptions, internalOptions?: ITerminalInternalOptions): vscode.Terminal;
    createExtensionTerminal(options: vscode.ExtensionTerminalOptions): vscode.Terminal;
    attachPtyToTerminal(id: number, pty: vscode.Pseudoterminal): void;
    getDefaultShell(useAutomationShell: boolean): string;
    getDefaultShellArgs(useAutomationShell: boolean): string[] | string;
    registerLinkProvider(provider: vscode.TerminalLinkProvider): vscode.Disposable;
    registerProfileProvider(extension: IExtensionDescription, id: string, provider: vscode.TerminalProfileProvider): vscode.Disposable;
    registerTerminalQuickFixProvider(id: string, extensionId: string, provider: vscode.TerminalQuickFixProvider): vscode.Disposable;
    getEnvironmentVariableCollection(extension: IExtensionDescription): IEnvironmentVariableCollection;
}
declare const IExtHostTerminalService: ServiceIdentifier<IExtHostTerminalService>;

export { IExtHostTerminalService, ITerminalInternalOptions };
