import { __decorate, __param } from '../../../../../node_modules/tslib/tslib.es6.js';
import { Disposable, DisposableMap } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { ExtHostContext, MainContext } from '../common/extHost.protocol.js';
import { extHostNamedCustomer } from '../../services/extensions/common/extHostCustomers.js';
import { ISemanticSimilarityService } from '../../services/semanticSimilarity/common/semanticSimilarityService.js';
let MainThreadSemanticSimilarity = class MainThreadSemanticSimilarity extends Disposable {
    constructor(context, _semanticSimilarityService) {
        super();
        this._semanticSimilarityService = _semanticSimilarityService;
        this._registrations = this._register(( new DisposableMap()));
        this._proxy = ( context.getProxy(ExtHostContext.ExtHostSemanticSimilarity));
    }
    $registerSemanticSimilarityProvider(handle) {
        const provider = {
            provideSimilarityScore: (string1, comparisons, token) => {
                return this._proxy.$provideSimilarityScore(handle, string1, comparisons, token);
            },
        };
        this._registrations.set(handle, this._semanticSimilarityService.registerSemanticSimilarityProvider(provider));
    }
    $unregisterSemanticSimilarityProvider(handle) {
        this._registrations.deleteAndDispose(handle);
    }
};
MainThreadSemanticSimilarity = __decorate([
    extHostNamedCustomer(MainContext.MainThreadSemanticSimilarity),
    ( __param(1, ISemanticSimilarityService))
], MainThreadSemanticSimilarity);
export { MainThreadSemanticSimilarity };
