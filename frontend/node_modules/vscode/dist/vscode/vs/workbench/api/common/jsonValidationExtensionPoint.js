import * as nls from 'monaco-editor/esm/vs/nls.js';
import { ExtensionsRegistry } from '../../services/extensions/common/extensionsRegistry.js';
import * as resources from 'monaco-editor/esm/vs/base/common/resources.js';
import { isString } from 'monaco-editor/esm/vs/base/common/types.js';
const configurationExtPoint = ( ExtensionsRegistry.registerExtensionPoint({
    extensionPoint: 'jsonValidation',
    defaultExtensionKind: ['workspace', 'web'],
    jsonSchema: {
        description: ( nls.localize('contributes.jsonValidation', 'Contributes json schema configuration.')),
        type: 'array',
        defaultSnippets: [{ body: [{ fileMatch: '${1:file.json}', url: '${2:url}' }] }],
        items: {
            type: 'object',
            defaultSnippets: [{ body: { fileMatch: '${1:file.json}', url: '${2:url}' } }],
            properties: {
                fileMatch: {
                    type: ['string', 'array'],
                    description: ( nls.localize(
                        'contributes.jsonValidation.fileMatch',
                        'The file pattern (or an array of patterns) to match, for example "package.json" or "*.launch". Exclusion patterns start with \'!\''
                    )),
                    items: {
                        type: ['string']
                    }
                },
                url: {
                    description: ( nls.localize(
                        'contributes.jsonValidation.url',
                        'A schema URL (\'http:\', \'https:\') or relative path to the extension folder (\'./\').'
                    )),
                    type: 'string'
                }
            }
        }
    }
}));
class JSONValidationExtensionPoint {
    constructor() {
        configurationExtPoint.setHandler((extensions) => {
            for (const extension of extensions) {
                const extensionValue = extension.value;
                const collector = extension.collector;
                const extensionLocation = extension.description.extensionLocation;
                if (!extensionValue || !Array.isArray(extensionValue)) {
                    collector.error(( nls.localize('invalid.jsonValidation', "'configuration.jsonValidation' must be a array")));
                    return;
                }
                extensionValue.forEach(extension => {
                    if (!isString(extension.fileMatch) && !(Array.isArray(extension.fileMatch) && extension.fileMatch.every(isString))) {
                        collector.error(( nls.localize(
                            'invalid.fileMatch',
                            "'configuration.jsonValidation.fileMatch' must be defined as a string or an array of strings."
                        )));
                        return;
                    }
                    const uri = extension.url;
                    if (!isString(uri)) {
                        collector.error(( nls.localize(
                            'invalid.url',
                            "'configuration.jsonValidation.url' must be a URL or relative path"
                        )));
                        return;
                    }
                    if (uri.startsWith('./')) {
                        try {
                            const colorThemeLocation = resources.joinPath(extensionLocation, uri);
                            if (!resources.isEqualOrParent(colorThemeLocation, extensionLocation)) {
                                collector.warn(( nls.localize(
                                    'invalid.path.1',
                                    "Expected `contributes.{0}.url` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.",
                                    configurationExtPoint.name,
                                    ( colorThemeLocation.toString()),
                                    extensionLocation.path
                                )));
                            }
                        }
                        catch (e) {
                            collector.error(( nls.localize(
                                'invalid.url.fileschema',
                                "'configuration.jsonValidation.url' is an invalid relative URL: {0}",
                                e.message
                            )));
                        }
                    }
                    else if (!/^[^:/?#]+:\/\//.test(uri)) {
                        collector.error(( nls.localize(
                            'invalid.url.schema',
                            "'configuration.jsonValidation.url' must be an absolute URL or start with './'  to reference schemas located in the extension."
                        )));
                        return;
                    }
                });
            }
        });
    }
}
export { JSONValidationExtensionPoint };
