import { illegalArgument } from 'monaco-editor/esm/vs/base/common/errors.js';
import { NotebookRange as NotebookRange$1 } from './extHostTypeConverters.js';
import { NotebookRange, NotebookEditorRevealType } from './extHostTypes.js';
class ExtHostNotebookEditor {
    static { this.apiEditorsToExtHost = ( new WeakMap()); }
    constructor(id, _proxy, notebookData, visibleRanges, selections, viewColumn) {
        this.id = id;
        this._proxy = _proxy;
        this.notebookData = notebookData;
        this._selections = [];
        this._visibleRanges = [];
        this._visible = false;
        this._selections = selections;
        this._visibleRanges = visibleRanges;
        this._viewColumn = viewColumn;
    }
    get apiEditor() {
        if (!this._editor) {
            const that = this;
            this._editor = {
                get notebook() {
                    return that.notebookData.apiNotebook;
                },
                get selection() {
                    return that._selections[0];
                },
                set selection(selection) {
                    this.selections = [selection];
                },
                get selections() {
                    return that._selections;
                },
                set selections(value) {
                    if (!Array.isArray(value) || !value.every(NotebookRange.isNotebookRange)) {
                        throw illegalArgument('selections');
                    }
                    that._selections = value;
                    that._trySetSelections(value);
                },
                get visibleRanges() {
                    return that._visibleRanges;
                },
                revealRange(range, revealType) {
                    that._proxy.$tryRevealRange(that.id, NotebookRange$1.from(range), revealType ?? NotebookEditorRevealType.Default);
                },
                get viewColumn() {
                    return that._viewColumn;
                },
            };
            ExtHostNotebookEditor.apiEditorsToExtHost.set(this._editor, this);
        }
        return this._editor;
    }
    get visible() {
        return this._visible;
    }
    _acceptVisibility(value) {
        this._visible = value;
    }
    _acceptVisibleRanges(value) {
        this._visibleRanges = value;
    }
    _acceptSelections(selections) {
        this._selections = selections;
    }
    _trySetSelections(value) {
        this._proxy.$trySetSelections(this.id, ( value.map(NotebookRange$1.from)));
    }
    _acceptViewColumn(value) {
        this._viewColumn = value;
    }
}
export { ExtHostNotebookEditor };
