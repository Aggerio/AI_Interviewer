import { __decorate, __param } from '../../../../../node_modules/tslib/tslib.es6.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import * as nls from 'monaco-editor/esm/vs/nls.js';
import { extHostNamedCustomer } from '../../services/extensions/common/extHostCustomers.js';
import { getAuthenticationProviderActivationEvent, addAccountUsage, readAllowedExtensions, readAccountUsages, removeAccountUsage } from '../../services/authentication/browser/authenticationService.js';
import { IAuthenticationService } from '../../services/authentication/common/authentication.js';
import { ExtHostContext, MainContext } from '../common/extHost.protocol.js';
import '../../../../../override/vs/platform/dialogs/common/dialogs.js';
import { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';
import Severity from 'monaco-editor/esm/vs/base/common/severity.js';
import { IQuickInputService } from 'monaco-editor/esm/vs/platform/quickinput/common/quickInput.js';
import { INotificationService } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';
import { fromNow } from '../../../base/common/date.js';
import { IExtensionService } from '../../services/extensions/common/extensions.js';
import { ITelemetryService } from 'monaco-editor/esm/vs/platform/telemetry/common/telemetry.js';
import { IDialogService } from '../../../platform/dialogs/common/dialogs.js';
class MainThreadAuthenticationProvider extends Disposable {
    constructor(_proxy, id, label, supportsMultipleAccounts, notificationService, storageService, quickInputService, dialogService) {
        super();
        this._proxy = _proxy;
        this.id = id;
        this.label = label;
        this.supportsMultipleAccounts = supportsMultipleAccounts;
        this.notificationService = notificationService;
        this.storageService = storageService;
        this.quickInputService = quickInputService;
        this.dialogService = dialogService;
    }
    manageTrustedExtensions(accountName) {
        const allowedExtensions = readAllowedExtensions(this.storageService, this.id, accountName);
        if (!allowedExtensions.length) {
            this.dialogService.info(( nls.localize('noTrustedExtensions', "This account has not been used by any extensions.")));
            return;
        }
        const quickPick = this.quickInputService.createQuickPick();
        quickPick.canSelectMany = true;
        quickPick.customButton = true;
        quickPick.customLabel = ( nls.localize('manageTrustedExtensions.cancel', 'Cancel'));
        const usages = readAccountUsages(this.storageService, this.id, accountName);
        const items = ( allowedExtensions.map(extension => {
            const usage = usages.find(usage => extension.id === usage.extensionId);
            return {
                label: extension.name,
                description: usage
                    ? ( nls.localize(
                    { key: 'accountLastUsedDate', comment: ['The placeholder {0} is a string with time information, such as "3 days ago"'] },
                    "Last used this account {0}",
                    fromNow(usage.lastUsed, true)
                ))
                    : ( nls.localize('notUsed', "Has not used this account")),
                extension
            };
        }));
        quickPick.items = items;
        quickPick.selectedItems = items.filter(item => item.extension.allowed === undefined || item.extension.allowed);
        quickPick.title = ( nls.localize('manageTrustedExtensions', "Manage Trusted Extensions"));
        quickPick.placeholder = ( nls.localize('manageExtensions', "Choose which extensions can access this account"));
        quickPick.onDidAccept(() => {
            const updatedAllowedList = ( quickPick.items
                .map(i => i.extension));
            this.storageService.store(`${this.id}-${accountName}`, JSON.stringify(updatedAllowedList), -1 , 0 );
            quickPick.dispose();
        });
        quickPick.onDidChangeSelection((changed) => {
            quickPick.items.forEach(item => {
                if (item.extension) {
                    item.extension.allowed = false;
                }
            });
            changed.forEach((item) => item.extension.allowed = true);
        });
        quickPick.onDidHide(() => {
            quickPick.dispose();
        });
        quickPick.onDidCustom(() => {
            quickPick.hide();
        });
        quickPick.show();
    }
    async removeAccountSessions(accountName, sessions) {
        const accountUsages = readAccountUsages(this.storageService, this.id, accountName);
        const { confirmed } = await this.dialogService.confirm({
            type: Severity.Info,
            message: accountUsages.length
                ? ( nls.localize(
                'signOutMessage',
                "The account '{0}' has been used by: \n\n{1}\n\n Sign out from these extensions?",
                accountName,
                ( accountUsages.map(usage => usage.extensionName)).join('\n')
            ))
                : ( nls.localize('signOutMessageSimple', "Sign out of '{0}'?", accountName)),
            primaryButton: ( nls.localize({ key: 'signOut', comment: ['&& denotes a mnemonic'] }, "&&Sign Out"))
        });
        if (confirmed) {
            const removeSessionPromises = ( sessions.map(session => this.removeSession(session.id)));
            await Promise.all(removeSessionPromises);
            removeAccountUsage(this.storageService, this.id, accountName);
            this.storageService.remove(`${this.id}-${accountName}`, -1 );
        }
    }
    async getSessions(scopes) {
        return this._proxy.$getSessions(this.id, scopes);
    }
    createSession(scopes, options) {
        return this._proxy.$createSession(this.id, scopes, options);
    }
    async removeSession(sessionId) {
        await this._proxy.$removeSession(this.id, sessionId);
        this.notificationService.info(( nls.localize('signedOut', "Successfully signed out.")));
    }
}
let MainThreadAuthentication = class MainThreadAuthentication extends Disposable {
    constructor(extHostContext, authenticationService, dialogService, storageService, notificationService, quickInputService, extensionService, telemetryService) {
        super();
        this.authenticationService = authenticationService;
        this.dialogService = dialogService;
        this.storageService = storageService;
        this.notificationService = notificationService;
        this.quickInputService = quickInputService;
        this.extensionService = extensionService;
        this.telemetryService = telemetryService;
        this._proxy = ( extHostContext.getProxy(ExtHostContext.ExtHostAuthentication));
        this._register(this.authenticationService.onDidChangeSessions(e => {
            this._proxy.$onDidChangeAuthenticationSessions(e.providerId, e.label);
        }));
        this._proxy.$setProviders(this.authenticationService.declaredProviders);
        this._register(this.authenticationService.onDidChangeDeclaredProviders(e => {
            this._proxy.$setProviders(e);
        }));
    }
    async $registerAuthenticationProvider(id, label, supportsMultipleAccounts) {
        const provider = ( new MainThreadAuthenticationProvider(
            this._proxy,
            id,
            label,
            supportsMultipleAccounts,
            this.notificationService,
            this.storageService,
            this.quickInputService,
            this.dialogService
        ));
        this.authenticationService.registerAuthenticationProvider(id, provider);
    }
    $unregisterAuthenticationProvider(id) {
        this.authenticationService.unregisterAuthenticationProvider(id);
    }
    $ensureProvider(id) {
        return this.extensionService.activateByEvent(getAuthenticationProviderActivationEvent(id), 1 );
    }
    $sendDidChangeSessions(id, event) {
        this.authenticationService.sessionsUpdate(id, event);
    }
    $removeSession(providerId, sessionId) {
        return this.authenticationService.removeSession(providerId, sessionId);
    }
    async loginPrompt(providerName, extensionName, recreatingSession, detail) {
        const message = recreatingSession
            ? ( nls.localize(
            'confirmRelogin',
            "The extension '{0}' wants you to sign in again using {1}.",
            extensionName,
            providerName
        ))
            : ( nls.localize(
            'confirmLogin',
            "The extension '{0}' wants to sign in using {1}.",
            extensionName,
            providerName
        ));
        const { confirmed } = await this.dialogService.confirm({
            type: Severity.Info,
            message,
            detail,
            primaryButton: ( nls.localize({ key: 'allow', comment: ['&& denotes a mnemonic'] }, "&&Allow"))
        });
        return confirmed;
    }
    async doGetSession(providerId, scopes, extensionId, extensionName, options) {
        const sessions = await this.authenticationService.getSessions(providerId, scopes, true);
        const supportsMultipleAccounts = this.authenticationService.supportsMultipleAccounts(providerId);
        if (options.forceNewSession && options.createIfNone) {
            throw new Error('Invalid combination of options. Please remove one of the following: forceNewSession, createIfNone');
        }
        if (options.forceNewSession && options.silent) {
            throw new Error('Invalid combination of options. Please remove one of the following: forceNewSession, silent');
        }
        if (options.createIfNone && options.silent) {
            throw new Error('Invalid combination of options. Please remove one of the following: createIfNone, silent');
        }
        if (!options.forceNewSession && sessions.length) {
            if (supportsMultipleAccounts) {
                if (options.clearSessionPreference) {
                    this.authenticationService.removeSessionPreference(providerId, extensionId, scopes);
                }
                else {
                    const existingSessionPreference = this.authenticationService.getSessionPreference(providerId, extensionId, scopes);
                    if (existingSessionPreference) {
                        const matchingSession = sessions.find(session => session.id === existingSessionPreference);
                        if (matchingSession && this.authenticationService.isAccessAllowed(providerId, matchingSession.account.label, extensionId)) {
                            return matchingSession;
                        }
                    }
                }
            }
            else if (this.authenticationService.isAccessAllowed(providerId, sessions[0].account.label, extensionId)) {
                return sessions[0];
            }
        }
        if (options.createIfNone || options.forceNewSession) {
            const providerName = this.authenticationService.getLabel(providerId);
            const detail = (typeof options.forceNewSession === 'object') ? options.forceNewSession.detail : undefined;
            const recreatingSession = !!(options.forceNewSession && sessions.length);
            const isAllowed = await this.loginPrompt(providerName, extensionName, recreatingSession, detail);
            if (!isAllowed) {
                throw new Error('User did not consent to login.');
            }
            let session;
            if (sessions?.length && !options.forceNewSession && supportsMultipleAccounts) {
                session = await this.authenticationService.selectSession(providerId, extensionId, extensionName, scopes, sessions);
            }
            else {
                let sessionToRecreate;
                if (typeof options.forceNewSession === 'object' && options.forceNewSession.sessionToRecreate) {
                    sessionToRecreate = options.forceNewSession.sessionToRecreate;
                }
                else {
                    const sessionIdToRecreate = this.authenticationService.getSessionPreference(providerId, extensionId, scopes);
                    sessionToRecreate = sessionIdToRecreate ? sessions.find(session => session.id === sessionIdToRecreate) : undefined;
                }
                session = await this.authenticationService.createSession(providerId, scopes, { activateImmediate: true, sessionToRecreate });
            }
            this.authenticationService.updateAllowedExtension(providerId, session.account.label, extensionId, extensionName, true);
            this.authenticationService.updateSessionPreference(providerId, extensionId, session);
            return session;
        }
        const validSession = sessions.find(session => this.authenticationService.isAccessAllowed(providerId, session.account.label, extensionId));
        if (validSession) {
            if (!this.authenticationService.getSessionPreference(providerId, extensionId, scopes)) {
                if (this.storageService.get(`${extensionName}-${providerId}`, -1 )) {
                    this.storageService.remove(`${extensionName}-${providerId}`, -1 );
                }
                this.authenticationService.updateAllowedExtension(providerId, validSession.account.label, extensionId, extensionName, true);
                this.authenticationService.updateSessionPreference(providerId, extensionId, validSession);
            }
            return validSession;
        }
        if (!options.silent) {
            sessions.length
                ? this.authenticationService.requestSessionAccess(providerId, extensionId, extensionName, scopes, sessions)
                : await this.authenticationService.requestNewSession(providerId, scopes, extensionId, extensionName);
        }
        return undefined;
    }
    async $getSession(providerId, scopes, extensionId, extensionName, options) {
        const session = await this.doGetSession(providerId, scopes, extensionId, extensionName, options);
        if (session) {
            this.sendProviderUsageTelemetry(extensionId, providerId);
            addAccountUsage(this.storageService, providerId, session.account.label, extensionId, extensionName);
        }
        return session;
    }
    async $getSessions(providerId, scopes, extensionId, extensionName) {
        const sessions = await this.authenticationService.getSessions(providerId, [...scopes], true);
        const accessibleSessions = sessions.filter(s => this.authenticationService.isAccessAllowed(providerId, s.account.label, extensionId));
        if (accessibleSessions.length) {
            this.sendProviderUsageTelemetry(extensionId, providerId);
            for (const session of accessibleSessions) {
                addAccountUsage(this.storageService, providerId, session.account.label, extensionId, extensionName);
            }
        }
        return accessibleSessions;
    }
    sendProviderUsageTelemetry(extensionId, providerId) {
        this.telemetryService.publicLog2('authentication.providerUsage', { providerId, extensionId });
    }
};
MainThreadAuthentication = __decorate([
    extHostNamedCustomer(MainContext.MainThreadAuthentication),
    ( __param(1, IAuthenticationService)),
    ( __param(2, IDialogService)),
    ( __param(3, IStorageService)),
    ( __param(4, INotificationService)),
    ( __param(5, IQuickInputService)),
    ( __param(6, IExtensionService)),
    ( __param(7, ITelemetryService))
], MainThreadAuthentication);
export { MainThreadAuthentication, MainThreadAuthenticationProvider };
