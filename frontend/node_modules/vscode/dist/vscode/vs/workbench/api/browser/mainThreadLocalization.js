import { __decorate, __param } from '../../../../../node_modules/tslib/tslib.es6.js';
import { MainContext } from '../common/extHost.protocol.js';
import { extHostNamedCustomer } from '../../services/extensions/common/extHostCustomers.js';
import { URI } from 'monaco-editor/esm/vs/base/common/uri.js';
import { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { ILanguagePackService } from '../../../platform/languagePacks/common/languagePacks.js';
let MainThreadLocalization = class MainThreadLocalization extends Disposable {
    constructor(extHostContext, fileService, languagePackService) {
        super();
        this.fileService = fileService;
        this.languagePackService = languagePackService;
    }
    async $fetchBuiltInBundleUri(id, language) {
        try {
            const uri = await this.languagePackService.getBuiltInExtensionTranslationsUri(id, language);
            return uri;
        }
        catch (e) {
            return undefined;
        }
    }
    async $fetchBundleContents(uriComponents) {
        const contents = await this.fileService.readFile(URI.revive(uriComponents));
        return ( contents.value.toString());
    }
};
MainThreadLocalization = __decorate([
    extHostNamedCustomer(MainContext.MainThreadLocalization),
    ( __param(1, IFileService)),
    ( __param(2, ILanguagePackService))
], MainThreadLocalization);
export { MainThreadLocalization };
