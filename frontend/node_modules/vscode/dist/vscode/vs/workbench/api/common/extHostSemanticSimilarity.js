import { MainContext } from './extHost.protocol.js';
import { Disposable } from './extHostTypes.js';
class ExtHostSemanticSimilarity {
    constructor(mainContext) {
        this._semanticSimilarityProviders = ( new Map());
        this._nextHandle = 0;
        this._proxy = ( mainContext.getProxy(MainContext.MainThreadSemanticSimilarity));
    }
    async $provideSimilarityScore(handle, string1, comparisons, token) {
        if (this._semanticSimilarityProviders.size === 0) {
            throw new Error('No semantic similarity providers registered');
        }
        const provider = this._semanticSimilarityProviders.get(handle);
        if (!provider) {
            throw new Error('Semantic similarity provider not found');
        }
        const result = await provider.provideSimilarityScore(string1, comparisons, token);
        return result;
    }
    registerSemanticSimilarityProvider(extension, provider) {
        const handle = this._nextHandle;
        this._nextHandle++;
        this._semanticSimilarityProviders.set(handle, provider);
        this._proxy.$registerSemanticSimilarityProvider(handle);
        return ( new Disposable(() => {
            this._proxy.$unregisterSemanticSimilarityProvider(handle);
            this._semanticSimilarityProviders.delete(handle);
        }));
    }
}
export { ExtHostSemanticSimilarity };
