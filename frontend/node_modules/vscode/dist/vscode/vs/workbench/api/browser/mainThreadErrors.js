import { __decorate } from '../../../../../node_modules/tslib/tslib.es6.js';
import { ErrorNoTelemetry, onUnexpectedError } from 'monaco-editor/esm/vs/base/common/errors.js';
import { extHostNamedCustomer } from '../../services/extensions/common/extHostCustomers.js';
import { MainContext } from '../common/extHost.protocol.js';
let MainThreadErrors = class MainThreadErrors {
    dispose() {
    }
    $onUnexpectedError(err) {
        if (err && err.$isError) {
            const { name, message, stack } = err;
            err = err.noTelemetry ? ( new ErrorNoTelemetry()) : ( new Error());
            err.message = message;
            err.name = name;
            err.stack = stack;
        }
        onUnexpectedError(err);
    }
};
MainThreadErrors = __decorate([
    extHostNamedCustomer(MainContext.MainThreadErrors)
], MainThreadErrors);
export { MainThreadErrors };
