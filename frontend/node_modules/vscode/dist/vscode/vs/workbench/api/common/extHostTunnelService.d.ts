import { ServiceIdentifier } from '../../../platform/instantiation/common/instantiation.js';
import { IDisposable } from '../../../base/common/lifecycle.js';
import { IExtensionDescription } from '../../../platform/extensions/common/extensions.js';
import * as vscode from 'vscode';
import { TunnelOptions } from '../../../platform/tunnel/common/tunnel.js';
import { ExtHostTunnelServiceShape, PortAttributesSelector } from './extHost.protocol.js';

interface IExtHostTunnelService extends ExtHostTunnelServiceShape {
    readonly _serviceBrand: undefined;
    openTunnel(extension: IExtensionDescription, forward: TunnelOptions): Promise<vscode.Tunnel | undefined>;
    getTunnels(): Promise<vscode.TunnelDescription[]>;
    onDidChangeTunnels: vscode.Event<void>;
    setTunnelFactory(provider: vscode.RemoteAuthorityResolver | undefined): Promise<IDisposable>;
    registerPortsAttributesProvider(portSelector: PortAttributesSelector, provider: vscode.PortAttributesProvider): IDisposable;
    registerTunnelProvider(provider: vscode.TunnelProvider, information: vscode.TunnelInformation): Promise<IDisposable>;
}
declare const IExtHostTunnelService: ServiceIdentifier<IExtHostTunnelService>;

export { IExtHostTunnelService };
