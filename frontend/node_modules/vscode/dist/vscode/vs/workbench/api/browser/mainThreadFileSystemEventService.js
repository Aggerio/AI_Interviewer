import { __decorate, __param } from '../../../../../node_modules/tslib/tslib.es6.js';
import { DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';
import { extHostCustomer } from '../../services/extensions/common/extHostCustomers.js';
import { ExtHostContext } from '../common/extHost.protocol.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { IWorkingCopyFileService } from '../../services/workingCopy/common/workingCopyFileService.js';
import { IBulkEditService } from 'monaco-editor/esm/vs/editor/browser/services/bulkEditService.js';
import { IProgressService } from 'monaco-editor/esm/vs/platform/progress/common/progress.js';
import { raceCancellation } from 'monaco-editor/esm/vs/base/common/async.js';
import { CancellationTokenSource } from 'monaco-editor/esm/vs/base/common/cancellation.js';
import '../../../../../override/vs/platform/dialogs/common/dialogs.js';
import Severity from 'monaco-editor/esm/vs/base/common/severity.js';
import { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';
import { registerAction2, Action2 } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { ILogService } from 'monaco-editor/esm/vs/platform/log/common/log.js';
import { IEnvironmentService } from 'monaco-editor/esm/vs/platform/environment/common/environment.js';
import { IUriIdentityService } from 'monaco-editor/esm/vs/platform/uriIdentity/common/uriIdentity.js';
import { reviveWorkspaceEditDto } from './mainThreadBulkEdits.js';
import { IDialogService } from '../../../platform/dialogs/common/dialogs.js';
var MainThreadFileSystemEventService_1;
let MainThreadFileSystemEventService = class MainThreadFileSystemEventService {
    static { MainThreadFileSystemEventService_1 = this; }
    static { this.MementoKeyAdditionalEdits = `file.particpants.additionalEdits`; }
    constructor(extHostContext, fileService, workingCopyFileService, bulkEditService, progressService, dialogService, storageService, logService, envService, uriIdentService) {
        this._listener = ( new DisposableStore());
        const proxy = ( extHostContext.getProxy(ExtHostContext.ExtHostFileSystemEventService));
        this._listener.add(fileService.onDidFilesChange(event => {
            proxy.$onFileEvent({
                created: event.rawAdded,
                changed: event.rawUpdated,
                deleted: event.rawDeleted
            });
        }));
        const fileOperationParticipant = new (class {
            async participate(files, operation, undoInfo, timeout, token) {
                if (undoInfo?.isUndoing) {
                    return;
                }
                const cts = ( new CancellationTokenSource(token));
                const timer = setTimeout(() => cts.cancel(), timeout);
                const data = await progressService.withProgress({
                    location: 15 ,
                    title: this._progressLabel(operation),
                    cancellable: true,
                    delay: Math.min(timeout / 2, 3000)
                }, () => {
                    const onWillEvent = proxy.$onWillRunFileOperation(operation, files, timeout, cts.token);
                    return raceCancellation(onWillEvent, cts.token);
                }, () => {
                    cts.cancel();
                }).finally(() => {
                    cts.dispose();
                    clearTimeout(timer);
                });
                if (!data || data.edit.edits.length === 0) {
                    return;
                }
                const needsConfirmation = ( data.edit.edits.some(edit => edit.metadata?.needsConfirmation));
                let showPreview = storageService.getBoolean(MainThreadFileSystemEventService_1.MementoKeyAdditionalEdits, 0 );
                if (envService.extensionTestsLocationURI) {
                    showPreview = false;
                }
                if (showPreview === undefined) {
                    let message;
                    if (data.extensionNames.length === 1) {
                        if (operation === 0 ) {
                            message = ( localize(
                                'ask.1.create',
                                "Extension '{0}' wants to make refactoring changes with this file creation",
                                data.extensionNames[0]
                            ));
                        }
                        else if (operation === 3 ) {
                            message = ( localize(
                                'ask.1.copy',
                                "Extension '{0}' wants to make refactoring changes with this file copy",
                                data.extensionNames[0]
                            ));
                        }
                        else if (operation === 2 ) {
                            message = ( localize(
                                'ask.1.move',
                                "Extension '{0}' wants to make refactoring changes with this file move",
                                data.extensionNames[0]
                            ));
                        }
                        else  {
                            message = ( localize(
                                'ask.1.delete',
                                "Extension '{0}' wants to make refactoring changes with this file deletion",
                                data.extensionNames[0]
                            ));
                        }
                    }
                    else {
                        if (operation === 0 ) {
                            message = ( localize(
                                { key: 'ask.N.create', comment: ['{0} is a number, e.g "3 extensions want..."'] },
                                "{0} extensions want to make refactoring changes with this file creation",
                                data.extensionNames.length
                            ));
                        }
                        else if (operation === 3 ) {
                            message = ( localize(
                                { key: 'ask.N.copy', comment: ['{0} is a number, e.g "3 extensions want..."'] },
                                "{0} extensions want to make refactoring changes with this file copy",
                                data.extensionNames.length
                            ));
                        }
                        else if (operation === 2 ) {
                            message = ( localize(
                                { key: 'ask.N.move', comment: ['{0} is a number, e.g "3 extensions want..."'] },
                                "{0} extensions want to make refactoring changes with this file move",
                                data.extensionNames.length
                            ));
                        }
                        else  {
                            message = ( localize(
                                { key: 'ask.N.delete', comment: ['{0} is a number, e.g "3 extensions want..."'] },
                                "{0} extensions want to make refactoring changes with this file deletion",
                                data.extensionNames.length
                            ));
                        }
                    }
                    if (needsConfirmation) {
                        const { confirmed } = await dialogService.confirm({
                            type: Severity.Info,
                            message,
                            primaryButton: ( localize('preview', "Show &&Preview")),
                            cancelButton: ( localize('cancel', "Skip Changes"))
                        });
                        showPreview = true;
                        if (!confirmed) {
                            return;
                        }
                    }
                    else {
                        let Choice;
                        ( (function(Choice) {
                            Choice[Choice["OK"] = 0] = "OK";
                            Choice[Choice["Preview"] = 1] = "Preview";
                            Choice[Choice["Cancel"] = 2] = "Cancel";
                        })(Choice || (Choice = {})));
                        const { result, checkboxChecked } = await dialogService.prompt({
                            type: Severity.Info,
                            message,
                            buttons: [
                                {
                                    label: ( localize({ key: 'ok', comment: ['&& denotes a mnemonic'] }, "&&OK")),
                                    run: () => Choice.OK
                                },
                                {
                                    label: ( localize({ key: 'preview', comment: ['&& denotes a mnemonic'] }, "Show &&Preview")),
                                    run: () => Choice.Preview
                                }
                            ],
                            cancelButton: {
                                label: ( localize('cancel', "Skip Changes")),
                                run: () => Choice.Cancel
                            },
                            checkbox: { label: ( localize('again', "Don't ask again")) }
                        });
                        if (result === Choice.Cancel) {
                            return;
                        }
                        showPreview = result === Choice.Preview;
                        if (checkboxChecked) {
                            storageService.store(MainThreadFileSystemEventService_1.MementoKeyAdditionalEdits, showPreview, 0 , 0 );
                        }
                    }
                }
                logService.info('[onWill-handler] applying additional workspace edit from extensions', data.extensionNames);
                await bulkEditService.apply(reviveWorkspaceEditDto(data.edit, uriIdentService), { undoRedoGroupId: undoInfo?.undoRedoGroupId, showPreview });
            }
            _progressLabel(operation) {
                switch (operation) {
                    case 0 :
                        return ( localize('msg-create', "Running 'File Create' participants..."));
                    case 2 :
                        return ( localize('msg-rename', "Running 'File Rename' participants..."));
                    case 3 :
                        return ( localize('msg-copy', "Running 'File Copy' participants..."));
                    case 1 :
                        return ( localize('msg-delete', "Running 'File Delete' participants..."));
                    case 4 :
                        return ( localize('msg-write', "Running 'File Write' participants..."));
                }
            }
        });
        this._listener.add(workingCopyFileService.addFileOperationParticipant(fileOperationParticipant));
        this._listener.add(workingCopyFileService.onDidRunWorkingCopyFileOperation(e => proxy.$onDidRunFileOperation(e.operation, e.files)));
    }
    dispose() {
        this._listener.dispose();
    }
};
MainThreadFileSystemEventService = MainThreadFileSystemEventService_1 = __decorate([
    extHostCustomer,
    ( __param(1, IFileService)),
    ( __param(2, IWorkingCopyFileService)),
    ( __param(3, IBulkEditService)),
    ( __param(4, IProgressService)),
    ( __param(5, IDialogService)),
    ( __param(6, IStorageService)),
    ( __param(7, ILogService)),
    ( __param(8, IEnvironmentService)),
    ( __param(9, IUriIdentityService))
], MainThreadFileSystemEventService);
registerAction2(class ResetMemento extends Action2 {
    constructor() {
        super({
            id: 'files.participants.resetChoice',
            title: {
                value: ( localize('label', "Reset choice for 'File operation needs preview'")),
                original: `Reset choice for 'File operation needs preview'`
            },
            f1: true
        });
    }
    run(accessor) {
        accessor.get(IStorageService).remove(MainThreadFileSystemEventService.MementoKeyAdditionalEdits, 0 );
    }
});
export { MainThreadFileSystemEventService };
