import { __decorate, __param } from '../../../../../node_modules/tslib/tslib.es6.js';
import { CancellationToken } from 'monaco-editor/esm/vs/base/common/cancellation.js';
import { dispose, DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { URI } from 'monaco-editor/esm/vs/base/common/uri.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { ITelemetryService } from 'monaco-editor/esm/vs/platform/telemetry/common/telemetry.js';
import { extHostNamedCustomer } from '../../services/extensions/common/extHostCustomers.js';
import { ISearchService } from '../../services/search/common/search.js';
import { ExtHostContext, MainContext } from '../common/extHost.protocol.js';
let MainThreadSearch = class MainThreadSearch {
    constructor(extHostContext, _searchService, _telemetryService, _configurationService) {
        this._searchService = _searchService;
        this._telemetryService = _telemetryService;
        this._searchProvider = ( new Map());
        this._proxy = ( extHostContext.getProxy(ExtHostContext.ExtHostSearch));
        this._proxy.$enableExtensionHostSearch();
    }
    dispose() {
        this._searchProvider.forEach(value => value.dispose());
        this._searchProvider.clear();
    }
    $registerTextSearchProvider(handle, scheme) {
        this._searchProvider.set(handle, ( new RemoteSearchProvider(
            this._searchService,
            1 ,
            scheme,
            handle,
            this._proxy
        )));
    }
    $registerFileSearchProvider(handle, scheme) {
        this._searchProvider.set(handle, ( new RemoteSearchProvider(
            this._searchService,
            0 ,
            scheme,
            handle,
            this._proxy
        )));
    }
    $unregisterProvider(handle) {
        dispose(this._searchProvider.get(handle));
        this._searchProvider.delete(handle);
    }
    $handleFileMatch(handle, session, data) {
        const provider = this._searchProvider.get(handle);
        if (!provider) {
            throw new Error('Got result for unknown provider');
        }
        provider.handleFindMatch(session, data);
    }
    $handleTextMatch(handle, session, data) {
        const provider = this._searchProvider.get(handle);
        if (!provider) {
            throw new Error('Got result for unknown provider');
        }
        provider.handleFindMatch(session, data);
    }
    $handleTelemetry(eventName, data) {
        this._telemetryService.publicLog(eventName, data);
    }
};
MainThreadSearch = __decorate([
    extHostNamedCustomer(MainContext.MainThreadSearch),
    ( __param(1, ISearchService)),
    ( __param(2, ITelemetryService)),
    ( __param(3, IConfigurationService))
], MainThreadSearch);
class SearchOperation {
    static { this._idPool = 0; }
    constructor(progress, id = ++SearchOperation._idPool, matches = ( new Map())) {
        this.progress = progress;
        this.id = id;
        this.matches = matches;
    }
    addMatch(match) {
        const existingMatch = this.matches.get(( match.resource.toString()));
        if (existingMatch) {
            if (existingMatch.results && match.results) {
                existingMatch.results.push(...match.results);
            }
        }
        else {
            this.matches.set(( match.resource.toString()), match);
        }
        this.progress?.(match);
    }
}
class RemoteSearchProvider {
    constructor(searchService, type, _scheme, _handle, _proxy) {
        this._scheme = _scheme;
        this._handle = _handle;
        this._proxy = _proxy;
        this._registrations = ( new DisposableStore());
        this._searches = ( new Map());
        this._registrations.add(searchService.registerSearchResultProvider(this._scheme, type, this));
    }
    dispose() {
        this._registrations.dispose();
    }
    fileSearch(query, token = CancellationToken.None) {
        return this.doSearch(query, undefined, token);
    }
    textSearch(query, onProgress, token = CancellationToken.None) {
        return this.doSearch(query, onProgress, token);
    }
    doSearch(query, onProgress, token = CancellationToken.None) {
        if (!query.folderQueries.length) {
            throw new Error('Empty folderQueries');
        }
        const search = ( new SearchOperation(onProgress));
        this._searches.set(search.id, search);
        const searchP = query.type === 1
            ? this._proxy.$provideFileSearchResults(this._handle, search.id, query, token)
            : this._proxy.$provideTextSearchResults(this._handle, search.id, query, token);
        return Promise.resolve(searchP).then((result) => {
            this._searches.delete(search.id);
            return { results: Array.from(( search.matches.values())), stats: result.stats, limitHit: result.limitHit, messages: result.messages };
        }, err => {
            this._searches.delete(search.id);
            return Promise.reject(err);
        });
    }
    clearCache(cacheKey) {
        return Promise.resolve(this._proxy.$clearCache(cacheKey));
    }
    handleFindMatch(session, dataOrUri) {
        const searchOp = this._searches.get(session);
        if (!searchOp) {
            return;
        }
        dataOrUri.forEach(result => {
            if (result.results) {
                searchOp.addMatch({
                    resource: URI.revive(result.resource),
                    results: result.results
                });
            }
            else {
                searchOp.addMatch({
                    resource: URI.revive(result)
                });
            }
        });
    }
}
export { MainThreadSearch };
