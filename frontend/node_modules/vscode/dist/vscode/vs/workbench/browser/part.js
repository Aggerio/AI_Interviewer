import './media/part.css.js';
import { Component } from '../common/component.js';
import { size, Dimension } from 'monaco-editor/esm/vs/base/browser/dom.js';
import { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { assertIsDefined } from 'monaco-editor/esm/vs/base/common/types.js';
class Part extends Component {
    get dimension() { return this._dimension; }
    constructor(id, options, themeService, storageService, layoutService) {
        super(id, themeService, storageService);
        this.options = options;
        this.layoutService = layoutService;
        this._onDidVisibilityChange = this._register(( new Emitter()));
        this.onDidVisibilityChange = this._onDidVisibilityChange.event;
        this._onDidChange = this._register(( new Emitter()));
        layoutService.registerPart(this);
    }
    onThemeChange(theme) {
        if (this.parent) {
            super.onThemeChange(theme);
        }
    }
    updateStyles() {
        super.updateStyles();
    }
    create(parent, options) {
        this.parent = parent;
        this.titleArea = this.createTitleArea(parent, options);
        this.contentArea = this.createContentArea(parent, options);
        this.partLayout = ( new PartLayout(this.options, this.contentArea));
        this.updateStyles();
    }
    getContainer() {
        return this.parent;
    }
    createTitleArea(parent, options) {
        return undefined;
    }
    getTitleArea() {
        return this.titleArea;
    }
    createContentArea(parent, options) {
        return undefined;
    }
    getContentArea() {
        return this.contentArea;
    }
    layoutContents(width, height) {
        const partLayout = assertIsDefined(this.partLayout);
        return partLayout.layout(width, height);
    }
    get onDidChange() { return this._onDidChange.event; }
    layout(width, height, _top, _left) {
        this._dimension = ( new Dimension(width, height));
    }
    setVisible(visible) {
        this._onDidVisibilityChange.fire(visible);
    }
}
class PartLayout {
    static { this.TITLE_HEIGHT = 35; }
    constructor(options, contentArea) {
        this.options = options;
        this.contentArea = contentArea;
    }
    layout(width, height) {
        let titleSize;
        if (this.options.hasTitle) {
            titleSize = ( new Dimension(width, Math.min(height, PartLayout.TITLE_HEIGHT)));
        }
        else {
            titleSize = Dimension.None;
        }
        let contentWidth = width;
        if (this.options && typeof this.options.borderWidth === 'function') {
            contentWidth -= this.options.borderWidth();
        }
        const contentSize = ( new Dimension(contentWidth, height - titleSize.height));
        if (this.contentArea) {
            size(this.contentArea, contentSize.width, contentSize.height);
        }
        return { titleSize, contentSize };
    }
}
export { Part };
