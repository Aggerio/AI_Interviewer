import { IAction } from '../../../../base/common/actions.js';
import { Event } from '../../../../base/common/event.js';
import { CompositePart, ICompositeTitleLabel } from '../compositePart.js';
import { IWorkbenchLayoutService, Parts } from '../../../services/layout/browser/layoutService.js';
import { IStorageService } from '../../../../platform/storage/common/storage.js';
import { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';
import { ITelemetryService } from '../../../../platform/telemetry/common/telemetry.js';
import { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';
import { IThemeService } from '../../../../platform/theme/common/themeService.js';
import { IActivityHoverOptions } from '../compositeBarActions.js';
import { IBadge } from '../../../services/activity/common/activity.js';
import { INotificationService } from '../../../../platform/notification/common/notification.js';
import { Dimension } from '../../../../base/browser/dom.js';
import { IDisposable } from '../../../../base/common/lifecycle.js';
import { IContextKeyService, IContextKey } from '../../../../platform/contextkey/common/contextkey.js';
import { IExtensionService } from '../../../services/extensions/common/extensions.js';
import { IViewDescriptorService, ViewContainerLocation } from '../../../common/views.js';
import { IPaneComposite } from '../../../common/panecomposite.js';
import { PaneComposite, PaneCompositeDescriptor } from '../../panecomposite.js';
import { IMenuService } from '../../../../platform/actions/common/actions.js';
import { IPaneCompositePart, IPaneCompositeSelectorPart } from '../paneCompositePart.js';
import { IPartOptions } from '../../part.js';
import { ICommandService } from '../../../../platform/commands/common/commands.js';

interface IPanelPartOptions extends IPartOptions {
    hasTitle: true;
    borderWidth?: (() => number);
    useIcons?: boolean;
}
declare abstract class BasePanelPart extends CompositePart<PaneComposite> implements IPaneCompositePart, IPaneCompositeSelectorPart {
    private readonly viewDescriptorService;
    protected readonly contextKeyService: IContextKeyService;
    private readonly extensionService;
    private readonly partId;
    private readonly pinnedPanelsKey;
    private readonly placeholdeViewContainersKey;
    private readonly backgroundColor;
    private readonly viewContainerLocation;
    private readonly activePanelContextKey;
    private panelFocusContextKey;
    private readonly panelOptions;
    private static readonly MIN_COMPOSITE_BAR_WIDTH;
    readonly _serviceBrand: undefined;
    readonly minimumWidth: number;
    readonly maximumWidth: number;
    readonly minimumHeight: number;
    readonly maximumHeight: number;
    readonly snap = true;
    get preferredHeight(): number | undefined;
    get preferredWidth(): number | undefined;
    get onDidPaneCompositeOpen(): Event<IPaneComposite>;
    readonly onDidPaneCompositeClose: Event<IPaneComposite>;
    private compositeBar;
    private readonly compositeActions;
    private globalToolBar;
    private globalActions;
    private readonly panelDisposables;
    private blockOpeningPanel;
    protected contentDimension: Dimension | undefined;
    private extensionsRegistered;
    private panelRegistry;
    private dndHandler;
    private readonly enabledViewContainersContextKeys;
    constructor(notificationService: INotificationService, storageService: IStorageService, contextMenuService: IContextMenuService, layoutService: IWorkbenchLayoutService, keybindingService: IKeybindingService, instantiationService: IInstantiationService, themeService: IThemeService, viewDescriptorService: IViewDescriptorService, contextKeyService: IContextKeyService, extensionService: IExtensionService, partId: Parts.PANEL_PART | Parts.AUXILIARYBAR_PART, activePanelSettingsKey: string, pinnedPanelsKey: string, placeholdeViewContainersKey: string, panelRegistryId: string, backgroundColor: string, viewContainerLocation: ViewContainerLocation, activePanelContextKey: IContextKey<string>, panelFocusContextKey: IContextKey<boolean>, panelOptions: IPanelPartOptions);
    protected abstract getActivityHoverOptions(): IActivityHoverOptions;
    protected abstract fillExtraContextMenuActions(actions: IAction[]): void;
    private getContextMenuActionsForComposite;
    private onDidRegisterPanels;
    private onDidDeregisterPanel;
    private updateActivity;
    private toActivity;
    private static toActivity;
    private showOrHideViewContainer;
    private shouldBeHidden;
    private registerListeners;
    private onDidRegisterExtensions;
    private hideComposite;
    private onPanelOpen;
    private onPanelClose;
    create(parent: HTMLElement): void;
    private createEmptyPanelMessage;
    protected createTitleArea(parent: HTMLElement): HTMLElement;
    updateStyles(): void;
    doOpenPanel(id: string, focus?: boolean): PaneComposite | undefined;
    openPaneComposite(id?: string, focus?: boolean): Promise<PaneComposite | undefined>;
    showActivity(panelId: string, badge: IBadge, clazz?: string): IDisposable;
    getPaneComposite(panelId: string): PaneCompositeDescriptor | undefined;
    getPaneComposites(): PaneCompositeDescriptor[];
    getPinnedPaneCompositeIds(): string[];
    getVisiblePaneCompositeIds(): string[];
    getActivePaneComposite(): IPaneComposite | undefined;
    getLastActivePaneCompositeId(): string;
    hideActivePaneComposite(): void;
    protected createTitleLabel(parent: HTMLElement): ICompositeTitleLabel;
    protected onTitleAreaUpdate(compositeId: string): void;
    layout(width: number, height: number, top: number, left: number): void;
    private layoutCompositeBar;
    private emptyPanelMessageElement;
    private layoutEmptyMessage;
    private getViewContainer;
    private updateGlobalToolbarActions;
    private getCompositeActions;
    protected removeComposite(compositeId: string): boolean;
    protected getToolbarWidth(): number;
    private onDidStorageValueChange;
    private saveCachedPanels;
    private getCachedPanels;
    private _cachedPanelsValue;
    private get cachedPanelsValue();
    private set cachedPanelsValue(value);
    private getStoredCachedPanelsValue;
    private setStoredCachedViewletsValue;
    private getPlaceholderViewContainers;
    private setPlaceholderViewContainers;
    private _placeholderViewContainersValue;
    private get placeholderViewContainersValue();
    private set placeholderViewContainersValue(value);
    private getStoredPlaceholderViewContainersValue;
    private setStoredPlaceholderViewContainersValue;
}
declare class PanelPart extends BasePanelPart {
    private commandService;
    private menuService;
    static readonly activePanelSettingsKey = "workbench.panelpart.activepanelid";
    constructor(notificationService: INotificationService, storageService: IStorageService, telemetryService: ITelemetryService, contextMenuService: IContextMenuService, layoutService: IWorkbenchLayoutService, keybindingService: IKeybindingService, instantiationService: IInstantiationService, themeService: IThemeService, viewDescriptorService: IViewDescriptorService, contextKeyService: IContextKeyService, extensionService: IExtensionService, commandService: ICommandService, menuService: IMenuService);
    updateStyles(): void;
    protected getActivityHoverOptions(): IActivityHoverOptions;
    protected fillExtraContextMenuActions(actions: IAction[]): void;
    layout(width: number, height: number, top: number, left: number): void;
    toJSON(): object;
}

export { BasePanelPart, PanelPart };
