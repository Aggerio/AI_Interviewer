import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import './media/titlecontrol.css.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { DataTransfers, applyDragImage } from 'monaco-editor/esm/vs/base/browser/dnd.js';
import { addDisposableListener, EventType } from 'monaco-editor/esm/vs/base/browser/dom.js';
import { StandardMouseEvent } from 'monaco-editor/esm/vs/base/browser/mouseEvent.js';
import { prepareActions } from 'monaco-editor/esm/vs/base/browser/ui/actionbar/actionbar.js';
import { ActionRunner } from 'monaco-editor/esm/vs/base/common/actions.js';
import { DisposableStore, dispose } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { createActionViewItem, createAndFillInActionBarActions } from 'monaco-editor/esm/vs/platform/actions/browser/menuEntryActionViewItem.js';
import { MenuId, IMenuService } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { IContextMenuService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';
import { INotificationService } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';
import { IQuickInputService } from 'monaco-editor/esm/vs/platform/quickinput/common/quickInput.js';
import { listActiveSelectionBackground, listActiveSelectionForeground } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';
import { Themable, IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';
import { DraggedEditorGroupIdentifier, fillEditorsDragData } from '../../dnd.js';
import { EditorPane } from './editorPane.js';
import { BreadcrumbsConfig } from './breadcrumbs.js';
import { BreadcrumbsControl } from './breadcrumbsControl.js';
import { EditorResourceAccessor, SideBySideEditor } from '../../../common/editor.js';
import { ResourceContextKey, ActiveEditorPinnedContext, ActiveEditorFirstInGroupContext, ActiveEditorLastInGroupContext, ActiveEditorStickyContext, ActiveEditorAvailableEditorIdsContext, ActiveEditorCanSplitInGroupContext, SideBySideEditorActiveContext, ActiveEditorGroupLockedContext, applyAvailableEditorIds } from '../../../common/contextkeys.js';
import { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';
import { assertIsDefined, withUndefinedAsNull, withNullAsUndefined } from 'monaco-editor/esm/vs/base/common/types.js';
import { isFirefox } from 'monaco-editor/esm/vs/base/browser/browser.js';
import { isCancellationError } from 'monaco-editor/esm/vs/base/common/errors.js';
import { SideBySideEditorInput } from '../../../common/editor/sideBySideEditorInput.js';
import { WorkbenchToolBar } from 'monaco-editor/esm/vs/platform/actions/browser/toolbar.js';
import { LocalSelectionTransfer } from 'monaco-editor/esm/vs/platform/dnd/browser/dnd.js';
import { IEditorResolverService } from '../../../services/editor/common/editorResolverService.js';
class EditorCommandsContextActionRunner extends ActionRunner {
    constructor(context) {
        super();
        this.context = context;
    }
    run(action, context) {
        let mergedContext = this.context;
        if (context?.preserveFocus) {
            mergedContext = {
                ...this.context,
                preserveFocus: true
            };
        }
        return super.run(action, mergedContext);
    }
}
let TitleControl = class TitleControl extends Themable {
    constructor(parent, accessor, group, contextMenuService, instantiationService, contextKeyService, keybindingService, notificationService, menuService, quickInputService, themeService, configurationService, fileService, editorResolverService) {
        super(themeService);
        this.accessor = accessor;
        this.group = group;
        this.contextMenuService = contextMenuService;
        this.instantiationService = instantiationService;
        this.contextKeyService = contextKeyService;
        this.keybindingService = keybindingService;
        this.notificationService = notificationService;
        this.menuService = menuService;
        this.quickInputService = quickInputService;
        this.configurationService = configurationService;
        this.fileService = fileService;
        this.editorResolverService = editorResolverService;
        this.editorTransfer = LocalSelectionTransfer.getInstance();
        this.groupTransfer = LocalSelectionTransfer.getInstance();
        this.treeItemsTransfer = LocalSelectionTransfer.getInstance();
        this.breadcrumbsControl = undefined;
        this.editorToolBarMenuDisposables = this._register(( new DisposableStore()));
        this.resourceContext = this._register(instantiationService.createInstance(ResourceContextKey));
        this.editorPinnedContext = ActiveEditorPinnedContext.bindTo(contextKeyService);
        this.editorIsFirstContext = ActiveEditorFirstInGroupContext.bindTo(contextKeyService);
        this.editorIsLastContext = ActiveEditorLastInGroupContext.bindTo(contextKeyService);
        this.editorStickyContext = ActiveEditorStickyContext.bindTo(contextKeyService);
        this.editorAvailableEditorIds = ActiveEditorAvailableEditorIdsContext.bindTo(this.contextKeyService);
        this.editorCanSplitInGroupContext = ActiveEditorCanSplitInGroupContext.bindTo(contextKeyService);
        this.sideBySideEditorContext = SideBySideEditorActiveContext.bindTo(contextKeyService);
        this.groupLockedContext = ActiveEditorGroupLockedContext.bindTo(contextKeyService);
        this.renderDropdownAsChildElement = false;
        this.create(parent);
    }
    createBreadcrumbsControl(container, options) {
        const config = this._register(BreadcrumbsConfig.IsEnabled.bindTo(this.configurationService));
        this._register(config.onDidChange(() => {
            const value = config.getValue();
            if (!value && this.breadcrumbsControl) {
                this.breadcrumbsControl.dispose();
                this.breadcrumbsControl = undefined;
                this.handleBreadcrumbsEnablementChange();
            }
            else if (value && !this.breadcrumbsControl) {
                this.breadcrumbsControl = this.instantiationService.createInstance(BreadcrumbsControl, container, options, this.group);
                this.breadcrumbsControl.update();
                this.handleBreadcrumbsEnablementChange();
            }
        }));
        if (config.getValue()) {
            this.breadcrumbsControl = this.instantiationService.createInstance(BreadcrumbsControl, container, options, this.group);
        }
        this._register(this.fileService.onDidChangeFileSystemProviderRegistrations(e => {
            if (this.breadcrumbsControl?.model && this.breadcrumbsControl.model.resource.scheme !== e.scheme) {
                return;
            }
            if (this.breadcrumbsControl?.update()) {
                this.handleBreadcrumbsEnablementChange();
            }
        }));
    }
    createEditorActionsToolBar(container) {
        const context = { groupId: this.group.id };
        this.editorActionsToolbar = this._register(this.instantiationService.createInstance(WorkbenchToolBar, container, {
            actionViewItemProvider: action => this.actionViewItemProvider(action),
            orientation: 0 ,
            ariaLabel: ( localize('ariaLabelEditorActions', "Editor actions")),
            getKeyBinding: action => this.getKeybinding(action),
            actionRunner: this._register(( new EditorCommandsContextActionRunner(context))),
            anchorAlignmentProvider: () => 1 ,
            renderDropdownAsChildElement: this.renderDropdownAsChildElement,
            telemetrySource: 'editorPart',
            resetMenu: MenuId.EditorTitle,
            maxNumberOfItems: 9
        }));
        this.editorActionsToolbar.context = context;
        this._register(this.editorActionsToolbar.actionRunner.onDidRun(e => {
            if (e.error && !isCancellationError(e.error)) {
                this.notificationService.error(e.error);
            }
        }));
    }
    actionViewItemProvider(action) {
        const activeEditorPane = this.group.activeEditorPane;
        if (activeEditorPane instanceof EditorPane) {
            const result = activeEditorPane.getActionViewItem(action);
            if (result) {
                return result;
            }
        }
        return createActionViewItem(this.instantiationService, action, { menuAsChild: this.renderDropdownAsChildElement });
    }
    updateEditorActionsToolbar() {
        const { primary, secondary } = this.prepareEditorActions(this.getEditorActions());
        const editorActionsToolbar = assertIsDefined(this.editorActionsToolbar);
        editorActionsToolbar.setActions(prepareActions(primary), prepareActions(secondary));
    }
    getEditorActions() {
        const primary = [];
        const secondary = [];
        this.editorToolBarMenuDisposables.clear();
        this.contextKeyService.bufferChangeEvents(() => {
            const activeEditor = this.group.activeEditor;
            this.resourceContext.set(withUndefinedAsNull(EditorResourceAccessor.getOriginalUri(activeEditor, { supportSideBySide: SideBySideEditor.PRIMARY })));
            this.editorPinnedContext.set(activeEditor ? this.group.isPinned(activeEditor) : false);
            this.editorIsFirstContext.set(activeEditor ? this.group.isFirst(activeEditor) : false);
            this.editorIsLastContext.set(activeEditor ? this.group.isLast(activeEditor) : false);
            this.editorStickyContext.set(activeEditor ? this.group.isSticky(activeEditor) : false);
            applyAvailableEditorIds(this.editorAvailableEditorIds, activeEditor, this.editorResolverService);
            this.editorCanSplitInGroupContext.set(activeEditor ? activeEditor.hasCapability(32 ) : false);
            this.sideBySideEditorContext.set(activeEditor?.typeId === SideBySideEditorInput.ID);
            this.groupLockedContext.set(this.group.isLocked);
        });
        const activeEditorPane = this.group.activeEditorPane;
        if (activeEditorPane instanceof EditorPane) {
            const scopedContextKeyService = this.getEditorPaneAwareContextKeyService();
            const titleBarMenu = this.menuService.createMenu(MenuId.EditorTitle, scopedContextKeyService, { emitEventsForSubmenuChanges: true, eventDebounceDelay: 0 });
            this.editorToolBarMenuDisposables.add(titleBarMenu);
            this.editorToolBarMenuDisposables.add(titleBarMenu.onDidChange(() => {
                this.updateEditorActionsToolbar();
            }));
            const shouldInlineGroup = (action, group) => group === 'navigation' && action.actions.length <= 1;
            createAndFillInActionBarActions(titleBarMenu, { arg: this.resourceContext.get(), shouldForwardArgs: true }, { primary, secondary }, 'navigation', shouldInlineGroup);
        }
        return { primary, secondary };
    }
    getEditorPaneAwareContextKeyService() {
        return this.group.activeEditorPane?.scopedContextKeyService ?? this.contextKeyService;
    }
    clearEditorActionsToolbar() {
        this.editorActionsToolbar?.setActions([], []);
    }
    enableGroupDragging(element) {
        this._register(addDisposableListener(element, EventType.DRAG_START, e => {
            if (e.target !== element) {
                return;
            }
            this.groupTransfer.setData([( new DraggedEditorGroupIdentifier(this.group.id))], DraggedEditorGroupIdentifier.prototype);
            if (e.dataTransfer) {
                e.dataTransfer.effectAllowed = 'copyMove';
            }
            let hasDataTransfer = false;
            if (this.accessor.partOptions.showTabs) {
                hasDataTransfer = this.doFillResourceDataTransfers(this.group.getEditors(1 ), e);
            }
            else {
                if (this.group.activeEditor) {
                    hasDataTransfer = this.doFillResourceDataTransfers([this.group.activeEditor], e);
                }
            }
            if (!hasDataTransfer && isFirefox) {
                e.dataTransfer?.setData(DataTransfers.TEXT, String(this.group.label));
            }
            if (this.group.activeEditor) {
                let label = this.group.activeEditor.getName();
                if (this.accessor.partOptions.showTabs && this.group.count > 1) {
                    label = ( localize('draggedEditorGroup', "{0} (+{1})", label, this.group.count - 1));
                }
                applyDragImage(e, label, 'monaco-editor-group-drag-image', this.getColor(listActiveSelectionBackground), this.getColor(listActiveSelectionForeground));
            }
        }));
        this._register(addDisposableListener(element, EventType.DRAG_END, () => {
            this.groupTransfer.clearData(DraggedEditorGroupIdentifier.prototype);
        }));
    }
    doFillResourceDataTransfers(editors, e) {
        if (editors.length) {
            this.instantiationService.invokeFunction(fillEditorsDragData, ( editors.map(editor => ({ editor, groupId: this.group.id }))), e);
            return true;
        }
        return false;
    }
    onContextMenu(editor, e, node) {
        const currentResourceContext = this.resourceContext.get();
        this.resourceContext.set(withUndefinedAsNull(EditorResourceAccessor.getOriginalUri(editor, { supportSideBySide: SideBySideEditor.PRIMARY })));
        const currentPinnedContext = !!this.editorPinnedContext.get();
        this.editorPinnedContext.set(this.group.isPinned(editor));
        const currentEditorIsFirstContext = !!this.editorIsFirstContext.get();
        this.editorIsFirstContext.set(this.group.isFirst(editor));
        const currentEditorIsLastContext = !!this.editorIsLastContext.get();
        this.editorIsLastContext.set(this.group.isLast(editor));
        const currentStickyContext = !!this.editorStickyContext.get();
        this.editorStickyContext.set(this.group.isSticky(editor));
        const currentGroupLockedContext = !!this.groupLockedContext.get();
        this.groupLockedContext.set(this.group.isLocked);
        const currentEditorCanSplitContext = !!this.editorCanSplitInGroupContext.get();
        this.editorCanSplitInGroupContext.set(editor.hasCapability(32 ));
        const currentSideBySideEditorContext = !!this.sideBySideEditorContext.get();
        this.sideBySideEditorContext.set(editor.typeId === SideBySideEditorInput.ID);
        const currentEditorAvailableEditorIds = this.editorAvailableEditorIds.get() ?? '';
        applyAvailableEditorIds(this.editorAvailableEditorIds, editor, this.editorResolverService);
        let anchor = node;
        if (e instanceof MouseEvent) {
            anchor = ( new StandardMouseEvent(e));
        }
        this.contextMenuService.showContextMenu({
            getAnchor: () => anchor,
            menuId: MenuId.EditorTitleContext,
            menuActionOptions: { shouldForwardArgs: true, arg: this.resourceContext.get() },
            contextKeyService: this.contextKeyService,
            getActionsContext: () => ({ groupId: this.group.id, editorIndex: this.group.getIndexOfEditor(editor) }),
            getKeyBinding: action => this.getKeybinding(action),
            onHide: () => {
                this.resourceContext.set(currentResourceContext || null);
                this.editorPinnedContext.set(currentPinnedContext);
                this.editorIsFirstContext.set(currentEditorIsFirstContext);
                this.editorIsLastContext.set(currentEditorIsLastContext);
                this.editorStickyContext.set(currentStickyContext);
                this.groupLockedContext.set(currentGroupLockedContext);
                this.editorCanSplitInGroupContext.set(currentEditorCanSplitContext);
                this.sideBySideEditorContext.set(currentSideBySideEditorContext);
                this.editorAvailableEditorIds.set(currentEditorAvailableEditorIds);
                this.accessor.activeGroup.focus();
            }
        });
    }
    getKeybinding(action) {
        return this.keybindingService.lookupKeybinding(action.id, this.getEditorPaneAwareContextKeyService());
    }
    getKeybindingLabel(action) {
        const keybinding = this.getKeybinding(action);
        return keybinding ? withNullAsUndefined(keybinding.getLabel()) : undefined;
    }
    dispose() {
        dispose(this.breadcrumbsControl);
        this.breadcrumbsControl = undefined;
        super.dispose();
    }
};
TitleControl = ( __decorate([
    ( __param(3, IContextMenuService)),
    ( __param(4, IInstantiationService)),
    ( __param(5, IContextKeyService)),
    ( __param(6, IKeybindingService)),
    ( __param(7, INotificationService)),
    ( __param(8, IMenuService)),
    ( __param(9, IQuickInputService)),
    ( __param(10, IThemeService)),
    ( __param(11, IConfigurationService)),
    ( __param(12, IFileService)),
    ( __param(13, IEditorResolverService))
], TitleControl));
export { EditorCommandsContextActionRunner, TitleControl };
