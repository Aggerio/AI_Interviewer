import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import './media/auxiliaryBarPart.css.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { IContextMenuService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';
import { INotificationService } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';
import { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';
import { contrastBorder } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';
import { IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';
import { Extensions } from '../../panecomposite.js';
import { BasePanelPart } from '../panel/panelPart.js';
import { ActiveAuxiliaryContext, AuxiliaryBarFocusContext } from '../../../common/contextkeys.js';
import { SIDE_BAR_BACKGROUND, SIDE_BAR_BORDER, SIDE_BAR_FOREGROUND } from '../../../common/theme.js';
import { IViewDescriptorService } from '../../../common/views.js';
import { IExtensionService } from '../../../services/extensions/common/extensions.js';
import { IWorkbenchLayoutService } from '../../../services/layout/browser/layoutService.js';
import { Separator, toAction } from 'monaco-editor/esm/vs/base/common/actions.js';
import { ToggleAuxiliaryBarAction } from './auxiliaryBarActions.js';
import { assertIsDefined } from 'monaco-editor/esm/vs/base/common/types.js';
import { ToggleSidebarPositionAction } from '../../actions/layoutActions.js';
import { ICommandService } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';
let AuxiliaryBarPart = class AuxiliaryBarPart extends BasePanelPart {
    static { this.activePanelSettingsKey = 'workbench.auxiliarybar.activepanelid'; }
    static { this.pinnedPanelsKey = 'workbench.auxiliarybar.pinnedPanels'; }
    static { this.placeholdeViewContainersKey = 'workbench.auxiliarybar.placeholderPanels'; }
    constructor(notificationService, storageService, contextMenuService, layoutService, keybindingService, instantiationService, themeService, viewDescriptorService, contextKeyService, extensionService, commandService) {
        super(notificationService, storageService, contextMenuService, layoutService, keybindingService, instantiationService, themeService, viewDescriptorService, contextKeyService, extensionService, "workbench.parts.auxiliarybar" , AuxiliaryBarPart.activePanelSettingsKey, AuxiliaryBarPart.pinnedPanelsKey, AuxiliaryBarPart.placeholdeViewContainersKey, Extensions.Auxiliary, SIDE_BAR_BACKGROUND, 2 , ActiveAuxiliaryContext.bindTo(contextKeyService), AuxiliaryBarFocusContext.bindTo(contextKeyService), {
            useIcons: true,
            hasTitle: true,
            borderWidth: () => (this.getColor(SIDE_BAR_BORDER) || this.getColor(contrastBorder)) ? 1 : 0,
        });
        this.commandService = commandService;
        this.minimumWidth = 170;
        this.maximumWidth = Number.POSITIVE_INFINITY;
        this.minimumHeight = 0;
        this.maximumHeight = Number.POSITIVE_INFINITY;
        this.priority = 1 ;
    }
    updateStyles() {
        super.updateStyles();
        const container = assertIsDefined(this.getContainer());
        const borderColor = this.getColor(SIDE_BAR_BORDER) || this.getColor(contrastBorder);
        const isPositionLeft = this.layoutService.getSideBarPosition() === 1 ;
        container.style.color = this.getColor(SIDE_BAR_FOREGROUND) || '';
        container.style.borderLeftColor = borderColor ?? '';
        container.style.borderRightColor = borderColor ?? '';
        container.style.borderLeftStyle = borderColor && !isPositionLeft ? 'solid' : 'none';
        container.style.borderRightStyle = borderColor && isPositionLeft ? 'solid' : 'none';
        container.style.borderLeftWidth = borderColor && !isPositionLeft ? '1px' : '0px';
        container.style.borderRightWidth = borderColor && isPositionLeft ? '1px' : '0px';
    }
    getActivityHoverOptions() {
        return {
            position: () => 2
        };
    }
    fillExtraContextMenuActions(actions) {
        const currentPositionRight = this.layoutService.getSideBarPosition() === 0 ;
        actions.push(...[
            ( new Separator()),
            toAction({ id: ToggleSidebarPositionAction.ID, label: currentPositionRight ? ( localize('move second side bar left', "Move Secondary Side Bar Left")) : ( localize('move second side bar right', "Move Secondary Side Bar Right")), run: () => this.commandService.executeCommand(ToggleSidebarPositionAction.ID) }),
            toAction({ id: ToggleAuxiliaryBarAction.ID, label: ( localize('hide second side bar', "Hide Secondary Side Bar")), run: () => this.commandService.executeCommand(ToggleAuxiliaryBarAction.ID) })
        ]);
    }
    toJSON() {
        return {
            type: "workbench.parts.auxiliarybar"
        };
    }
};
AuxiliaryBarPart = ( __decorate([
    ( __param(0, INotificationService)),
    ( __param(1, IStorageService)),
    ( __param(2, IContextMenuService)),
    ( __param(3, IWorkbenchLayoutService)),
    ( __param(4, IKeybindingService)),
    ( __param(5, IInstantiationService)),
    ( __param(6, IThemeService)),
    ( __param(7, IViewDescriptorService)),
    ( __param(8, IContextKeyService)),
    ( __param(9, IExtensionService)),
    ( __param(10, ICommandService))
], AuxiliaryBarPart));
export { AuxiliaryBarPart };
