import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { withNullAsUndefined, assertIsDefined } from 'monaco-editor/esm/vs/base/common/types.js';
import { isTextEditorViewState } from '../../../common/editor.js';
import { applyTextEditorOptions } from '../../../common/editor/editorOptions.js';
import { TextResourceEditorInput } from '../../../common/editor/textResourceEditorInput.js';
import { BaseTextEditorModel } from '../../../common/editor/textEditorModel.js';
import { UntitledTextEditorInput } from '../../../services/untitled/common/untitledTextEditorInput.js';
import { AbstractTextCodeEditor } from './textCodeEditor.js';
import { ITelemetryService } from 'monaco-editor/esm/vs/platform/telemetry/common/telemetry.js';
import { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';
import { ITextResourceConfigurationService } from 'monaco-editor/esm/vs/editor/common/services/textResourceConfiguration.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';
import { IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';
import { IEditorService } from '../../../services/editor/common/editorService.js';
import { IModelService } from 'monaco-editor/esm/vs/editor/common/services/model.js';
import { ILanguageService } from 'monaco-editor/esm/vs/editor/common/languages/language.js';
import { PLAINTEXT_LANGUAGE_ID } from 'monaco-editor/esm/vs/editor/common/languages/modesRegistry.js';
import { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';
let AbstractTextResourceEditor = class AbstractTextResourceEditor extends AbstractTextCodeEditor {
    constructor(id, telemetryService, instantiationService, storageService, textResourceConfigurationService, themeService, editorGroupService, editorService, fileService) {
        super(id, telemetryService, instantiationService, storageService, textResourceConfigurationService, themeService, editorService, editorGroupService, fileService);
    }
    async setInput(input, options, context, token) {
        await super.setInput(input, options, context, token);
        const resolvedModel = await input.resolve(options);
        if (token.isCancellationRequested) {
            return undefined;
        }
        if (!(resolvedModel instanceof BaseTextEditorModel)) {
            throw new Error('Unable to open file as text');
        }
        const control = assertIsDefined(this.editorControl);
        const textEditorModel = resolvedModel.textEditorModel;
        control.setModel(textEditorModel);
        if (!isTextEditorViewState(options?.viewState)) {
            const editorViewState = this.loadEditorViewState(input, context);
            if (editorViewState) {
                if (options?.selection) {
                    editorViewState.cursorState = [];
                }
                control.restoreViewState(editorViewState);
            }
        }
        if (options) {
            applyTextEditorOptions(options, control, 1 );
        }
        control.updateOptions(this.getReadonlyConfiguration(resolvedModel.isReadonly()));
    }
    revealLastLine() {
        const control = this.editorControl;
        if (!control) {
            return;
        }
        const model = control.getModel();
        if (model) {
            const lastLine = model.getLineCount();
            control.revealPosition({ lineNumber: lastLine, column: model.getLineMaxColumn(lastLine) }, 0 );
        }
    }
    clearInput() {
        super.clearInput();
        this.editorControl?.setModel(null);
    }
    tracksEditorViewState(input) {
        return input instanceof UntitledTextEditorInput || input instanceof TextResourceEditorInput;
    }
};
AbstractTextResourceEditor = ( __decorate([
    ( __param(1, ITelemetryService)),
    ( __param(2, IInstantiationService)),
    ( __param(3, IStorageService)),
    ( __param(4, ITextResourceConfigurationService)),
    ( __param(5, IThemeService)),
    ( __param(6, IEditorGroupsService)),
    ( __param(7, IEditorService)),
    ( __param(8, IFileService))
], AbstractTextResourceEditor));
let TextResourceEditor = class TextResourceEditor extends AbstractTextResourceEditor {
    static { this.ID = 'workbench.editors.textResourceEditor'; }
    constructor(telemetryService, instantiationService, storageService, textResourceConfigurationService, themeService, editorService, editorGroupService, modelService, languageService, fileService) {
        super(TextResourceEditor.ID, telemetryService, instantiationService, storageService, textResourceConfigurationService, themeService, editorGroupService, editorService, fileService);
        this.modelService = modelService;
        this.languageService = languageService;
    }
    createEditorControl(parent, configuration) {
        super.createEditorControl(parent, configuration);
        const control = this.editorControl;
        if (control) {
            this._register(control.onDidPaste(e => this.onDidEditorPaste(e, control)));
        }
    }
    onDidEditorPaste(e, codeEditor) {
        if (this.input instanceof UntitledTextEditorInput && this.input.model.hasLanguageSetExplicitly) {
            return;
        }
        if (e.range.startLineNumber !== 1 || e.range.startColumn !== 1) {
            return;
        }
        if (codeEditor.getOption(89 )) {
            return;
        }
        const textModel = codeEditor.getModel();
        if (!textModel) {
            return;
        }
        const pasteIsWholeContents = textModel.getLineCount() === e.range.endLineNumber && textModel.getLineMaxColumn(e.range.endLineNumber) === e.range.endColumn;
        if (!pasteIsWholeContents) {
            return;
        }
        const currentLanguageId = textModel.getLanguageId();
        if (currentLanguageId !== PLAINTEXT_LANGUAGE_ID) {
            return;
        }
        let candidateLanguage = undefined;
        if (e.languageId) {
            candidateLanguage = { id: e.languageId, source: 'event' };
        }
        else {
            const guess = withNullAsUndefined(this.languageService.guessLanguageIdByFilepathOrFirstLine(textModel.uri, textModel.getLineContent(1).substr(0, 1000 )));
            if (guess) {
                candidateLanguage = { id: guess, source: 'guess' };
            }
        }
        if (candidateLanguage && candidateLanguage.id !== PLAINTEXT_LANGUAGE_ID) {
            if (this.input instanceof UntitledTextEditorInput && candidateLanguage.source === 'event') {
                this.input.model.setLanguageId(candidateLanguage.id);
            }
            else {
                textModel.setLanguage(this.languageService.createById(candidateLanguage.id));
            }
            const opts = this.modelService.getCreationOptions(textModel.getLanguageId(), textModel.uri, textModel.isForSimpleWidget);
            textModel.detectIndentation(opts.insertSpaces, opts.tabSize);
        }
    }
};
TextResourceEditor = ( __decorate([
    ( __param(0, ITelemetryService)),
    ( __param(1, IInstantiationService)),
    ( __param(2, IStorageService)),
    ( __param(3, ITextResourceConfigurationService)),
    ( __param(4, IThemeService)),
    ( __param(5, IEditorService)),
    ( __param(6, IEditorGroupsService)),
    ( __param(7, IModelService)),
    ( __param(8, ILanguageService)),
    ( __param(9, IFileService))
], TextResourceEditor));
export { AbstractTextResourceEditor, TextResourceEditor };
