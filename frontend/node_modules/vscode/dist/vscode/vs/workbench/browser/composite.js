import { ActionRunner } from 'monaco-editor/esm/vs/base/common/actions.js';
import { Component } from '../common/component.js';
import { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { trackFocus } from 'monaco-editor/esm/vs/base/browser/dom.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { assertIsDefined } from 'monaco-editor/esm/vs/base/common/types.js';
class Composite extends Component {
    get onDidFocus() {
        if (!this._onDidFocus) {
            this._onDidFocus = this.registerFocusTrackEvents().onDidFocus;
        }
        return this._onDidFocus.event;
    }
    fireOnDidFocus() {
        this._onDidFocus?.fire();
    }
    get onDidBlur() {
        if (!this._onDidBlur) {
            this._onDidBlur = this.registerFocusTrackEvents().onDidBlur;
        }
        return this._onDidBlur.event;
    }
    hasFocus() {
        return this._hasFocus;
    }
    registerFocusTrackEvents() {
        const container = assertIsDefined(this.getContainer());
        const focusTracker = this._register(trackFocus(container));
        const onDidFocus = this._onDidFocus = this._register(( new Emitter()));
        this._register(focusTracker.onDidFocus(() => {
            this._hasFocus = true;
            onDidFocus.fire();
        }));
        const onDidBlur = this._onDidBlur = this._register(( new Emitter()));
        this._register(focusTracker.onDidBlur(() => {
            this._hasFocus = false;
            onDidBlur.fire();
        }));
        return { onDidFocus, onDidBlur };
    }
    get telemetryService() { return this._telemetryService; }
    constructor(id, telemetryService, themeService, storageService) {
        super(id, themeService, storageService);
        this._onTitleAreaUpdate = this._register(( new Emitter()));
        this.onTitleAreaUpdate = this._onTitleAreaUpdate.event;
        this._hasFocus = false;
        this._telemetryService = telemetryService;
        this.visible = false;
    }
    getTitle() {
        return undefined;
    }
    create(parent) {
        this.parent = parent;
    }
    getContainer() {
        return this.parent;
    }
    setVisible(visible) {
        if (this.visible !== !!visible) {
            this.visible = visible;
        }
    }
    focus() {
    }
    updateStyles() {
        super.updateStyles();
    }
    getMenuIds() {
        return [];
    }
    getActions() {
        return [];
    }
    getSecondaryActions() {
        return [];
    }
    getContextMenuActions() {
        return [];
    }
    getActionViewItem(action) {
        return undefined;
    }
    getActionsContext() {
        return null;
    }
    getActionRunner() {
        if (!this.actionRunner) {
            this.actionRunner = this._register(( new ActionRunner()));
        }
        return this.actionRunner;
    }
    updateTitleArea() {
        this._onTitleAreaUpdate.fire();
    }
    isVisible() {
        return this.visible;
    }
    getControl() {
        return undefined;
    }
}
class CompositeDescriptor {
    constructor(ctor, id, name, cssClass, order, requestedIndex) {
        this.ctor = ctor;
        this.id = id;
        this.name = name;
        this.cssClass = cssClass;
        this.order = order;
        this.requestedIndex = requestedIndex;
    }
    instantiate(instantiationService) {
        return instantiationService.createInstance(this.ctor);
    }
}
class CompositeRegistry extends Disposable {
    constructor() {
        super(...arguments);
        this._onDidRegister = this._register(( new Emitter()));
        this.onDidRegister = this._onDidRegister.event;
        this._onDidDeregister = this._register(( new Emitter()));
        this.onDidDeregister = this._onDidDeregister.event;
        this.composites = [];
    }
    registerComposite(descriptor) {
        if (this.compositeById(descriptor.id)) {
            return;
        }
        this.composites.push(descriptor);
        this._onDidRegister.fire(descriptor);
    }
    deregisterComposite(id) {
        const descriptor = this.compositeById(id);
        if (!descriptor) {
            return;
        }
        this.composites.splice(this.composites.indexOf(descriptor), 1);
        this._onDidDeregister.fire(descriptor);
    }
    getComposite(id) {
        return this.compositeById(id);
    }
    getComposites() {
        return this.composites.slice(0);
    }
    compositeById(id) {
        return this.composites.find(composite => composite.id === id);
    }
}
export { Composite, CompositeDescriptor, CompositeRegistry };
