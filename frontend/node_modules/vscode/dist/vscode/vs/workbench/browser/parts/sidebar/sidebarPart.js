import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import './media/sidebarpart.css.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { CompositePart } from '../compositePart.js';
import { Extensions } from '../../panecomposite.js';
import { IWorkbenchLayoutService } from '../../../services/layout/browser/layoutService.js';
import { SidebarFocusContext, ActiveViewletContext } from '../../../common/contextkeys.js';
import { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';
import { IContextMenuService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';
import { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { Event, Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';
import { contrastBorder } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';
import { SIDE_BAR_TITLE_FOREGROUND, SIDE_BAR_BORDER, SIDE_BAR_BACKGROUND, SIDE_BAR_FOREGROUND, SIDE_BAR_DRAG_AND_DROP_BACKGROUND } from '../../../common/theme.js';
import { INotificationService } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';
import { trackFocus, addDisposableListener, EventType } from 'monaco-editor/esm/vs/base/browser/dom.js';
import { StandardMouseEvent } from 'monaco-editor/esm/vs/base/browser/mouseEvent.js';
import { IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { IExtensionService } from '../../../services/extensions/common/extensions.js';
import { assertIsDefined } from 'monaco-editor/esm/vs/base/common/types.js';
import { CompositeDragAndDropObserver } from '../../dnd.js';
import { IViewDescriptorService } from '../../../common/views.js';
import { Gesture, EventType as EventType$1 } from 'monaco-editor/esm/vs/base/browser/touch.js';
let SidebarPart = class SidebarPart extends CompositePart {
    static { this.activeViewletSettingsKey = 'workbench.sidebar.activeviewletid'; }
    get preferredWidth() {
        const viewlet = this.getActivePaneComposite();
        if (!viewlet) {
            return;
        }
        const width = viewlet.getOptimalWidth();
        if (typeof width !== 'number') {
            return;
        }
        return Math.max(width, 300);
    }
    get onDidPaneCompositeRegister() { return this.viewletRegistry.onDidRegister; }
    get onDidPaneCompositeOpen() { return ( Event.map(this.onDidCompositeOpen.event, compositeEvent => compositeEvent.composite)); }
    get onDidPaneCompositeClose() { return this.onDidCompositeClose.event; }
    constructor(notificationService, storageService, contextMenuService, layoutService, keybindingService, instantiationService, themeService, viewDescriptorService, contextKeyService, extensionService) {
        super(notificationService, storageService, contextMenuService, layoutService, keybindingService, instantiationService, themeService, ( Registry.as(Extensions.Viewlets)), SidebarPart.activeViewletSettingsKey, viewDescriptorService.getDefaultViewContainer(0 ).id, 'sideBar', 'viewlet', SIDE_BAR_TITLE_FOREGROUND, "workbench.parts.sidebar" , { hasTitle: true, borderWidth: () => (this.getColor(SIDE_BAR_BORDER) || this.getColor(contrastBorder)) ? 1 : 0 });
        this.viewDescriptorService = viewDescriptorService;
        this.contextKeyService = contextKeyService;
        this.extensionService = extensionService;
        this.minimumWidth = 170;
        this.maximumWidth = Number.POSITIVE_INFINITY;
        this.minimumHeight = 0;
        this.maximumHeight = Number.POSITIVE_INFINITY;
        this.priority = 1 ;
        this.snap = true;
        this._onDidViewletDeregister = this._register(( new Emitter()));
        this.onDidPaneCompositeDeregister = this._onDidViewletDeregister.event;
        this.viewletRegistry = ( Registry.as(Extensions.Viewlets));
        this.sideBarFocusContextKey = SidebarFocusContext.bindTo(this.contextKeyService);
        this.activeViewletContextKey = ActiveViewletContext.bindTo(this.contextKeyService);
        this.blockOpeningViewlet = false;
        this.registerListeners();
    }
    registerListeners() {
        this._register(this.onDidPaneCompositeOpen(viewlet => {
            this.activeViewletContextKey.set(viewlet.getId());
        }));
        this._register(this.onDidPaneCompositeClose(viewlet => {
            if (this.activeViewletContextKey.get() === viewlet.getId()) {
                this.activeViewletContextKey.reset();
            }
        }));
        this._register(this.registry.onDidDeregister(async (viewletDescriptor) => {
            const activeContainers = this.viewDescriptorService.getViewContainersByLocation(0 )
                .filter(container => this.viewDescriptorService.getViewContainerModel(container).activeViewDescriptors.length > 0);
            if (activeContainers.length) {
                if (this.getActiveComposite()?.getId() === viewletDescriptor.id) {
                    const defaultViewletId = this.viewDescriptorService.getDefaultViewContainer(0 )?.id;
                    const containerToOpen = activeContainers.filter(c => c.id === defaultViewletId)[0] || activeContainers[0];
                    await this.openPaneComposite(containerToOpen.id);
                }
            }
            else {
                this.layoutService.setPartHidden(true, "workbench.parts.sidebar" );
            }
            this.removeComposite(viewletDescriptor.id);
            this._onDidViewletDeregister.fire(viewletDescriptor);
        }));
    }
    create(parent) {
        this.element = parent;
        super.create(parent);
        const focusTracker = this._register(trackFocus(parent));
        this._register(focusTracker.onDidFocus(() => this.sideBarFocusContextKey.set(true)));
        this._register(focusTracker.onDidBlur(() => this.sideBarFocusContextKey.set(false)));
    }
    createTitleArea(parent) {
        const titleArea = super.createTitleArea(parent);
        this._register(addDisposableListener(titleArea, EventType.CONTEXT_MENU, e => {
            this.onTitleAreaContextMenu(( new StandardMouseEvent(e)));
        }));
        this._register(Gesture.addTarget(titleArea));
        this._register(addDisposableListener(titleArea, EventType$1.Contextmenu, e => {
            this.onTitleAreaContextMenu(( new StandardMouseEvent(e)));
        }));
        this.titleLabelElement.draggable = true;
        const draggedItemProvider = () => {
            const activeViewlet = this.getActivePaneComposite();
            return { type: 'composite', id: activeViewlet.getId() };
        };
        this._register(CompositeDragAndDropObserver.INSTANCE.registerDraggable(this.titleLabelElement, draggedItemProvider, {}));
        return titleArea;
    }
    updateStyles() {
        super.updateStyles();
        const container = assertIsDefined(this.getContainer());
        container.style.backgroundColor = this.getColor(SIDE_BAR_BACKGROUND) || '';
        container.style.color = this.getColor(SIDE_BAR_FOREGROUND) || '';
        const borderColor = this.getColor(SIDE_BAR_BORDER) || this.getColor(contrastBorder);
        const isPositionLeft = this.layoutService.getSideBarPosition() === 0 ;
        container.style.borderRightWidth = borderColor && isPositionLeft ? '1px' : '';
        container.style.borderRightStyle = borderColor && isPositionLeft ? 'solid' : '';
        container.style.borderRightColor = isPositionLeft ? borderColor || '' : '';
        container.style.borderLeftWidth = borderColor && !isPositionLeft ? '1px' : '';
        container.style.borderLeftStyle = borderColor && !isPositionLeft ? 'solid' : '';
        container.style.borderLeftColor = !isPositionLeft ? borderColor || '' : '';
        container.style.outlineColor = this.getColor(SIDE_BAR_DRAG_AND_DROP_BACKGROUND) ?? '';
    }
    layout(width, height, top, left) {
        if (!this.layoutService.isVisible("workbench.parts.sidebar" )) {
            return;
        }
        super.layout(width, height, top, left);
    }
    getActivePaneComposite() {
        return this.getActiveComposite();
    }
    getLastActivePaneCompositeId() {
        return this.getLastActiveCompositeId();
    }
    hideActivePaneComposite() {
        this.hideActiveComposite();
    }
    async openPaneComposite(id, focus) {
        if (typeof id === 'string' && this.getPaneComposite(id)) {
            return this.doOpenViewlet(id, focus);
        }
        await this.extensionService.whenInstalledExtensionsRegistered();
        if (typeof id === 'string' && this.getPaneComposite(id)) {
            return this.doOpenViewlet(id, focus);
        }
        return undefined;
    }
    getPaneComposites() {
        return this.viewletRegistry.getPaneComposites().sort((v1, v2) => {
            if (typeof v1.order !== 'number') {
                return -1;
            }
            if (typeof v2.order !== 'number') {
                return 1;
            }
            return v1.order - v2.order;
        });
    }
    getPaneComposite(id) {
        return this.getPaneComposites().filter(viewlet => viewlet.id === id)[0];
    }
    doOpenViewlet(id, focus) {
        if (this.blockOpeningViewlet) {
            return undefined;
        }
        if (!this.layoutService.isVisible("workbench.parts.sidebar" )) {
            try {
                this.blockOpeningViewlet = true;
                this.layoutService.setPartHidden(false, "workbench.parts.sidebar" );
            }
            finally {
                this.blockOpeningViewlet = false;
            }
        }
        return this.openComposite(id, focus);
    }
    getTitleAreaDropDownAnchorAlignment() {
        return this.layoutService.getSideBarPosition() === 0  ? 0  : 1 ;
    }
    onTitleAreaContextMenu(event) {
        const activeViewlet = this.getActivePaneComposite();
        if (activeViewlet) {
            const contextMenuActions = activeViewlet ? activeViewlet.getContextMenuActions() : [];
            if (contextMenuActions.length) {
                this.contextMenuService.showContextMenu({
                    getAnchor: () => event,
                    getActions: () => contextMenuActions.slice(),
                    getActionViewItem: action => this.actionViewItemProvider(action),
                    actionRunner: activeViewlet.getActionRunner(),
                    skipTelemetry: true
                });
            }
        }
    }
    toJSON() {
        return {
            type: "workbench.parts.sidebar"
        };
    }
};
SidebarPart = ( __decorate([
    ( __param(0, INotificationService)),
    ( __param(1, IStorageService)),
    ( __param(2, IContextMenuService)),
    ( __param(3, IWorkbenchLayoutService)),
    ( __param(4, IKeybindingService)),
    ( __param(5, IInstantiationService)),
    ( __param(6, IThemeService)),
    ( __param(7, IViewDescriptorService)),
    ( __param(8, IContextKeyService)),
    ( __param(9, IExtensionService))
], SidebarPart));
export { SidebarPart };
