import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { NotificationPriority, INotificationService } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';
import { ITelemetryService } from 'monaco-editor/esm/vs/platform/telemetry/common/telemetry.js';
import { hash } from 'monaco-editor/esm/vs/base/common/hash.js';
function notificationToMetrics(message, source, silent) {
    return {
        id: ( hash(( message.toString())).toString()),
        silent,
        source: source || 'core'
    };
}
let NotificationsTelemetry = class NotificationsTelemetry extends Disposable {
    constructor(telemetryService, notificationService) {
        super();
        this.telemetryService = telemetryService;
        this.notificationService = notificationService;
        this.registerListeners();
    }
    registerListeners() {
        this._register(this.notificationService.onDidAddNotification(notification => {
            const source = notification.source && typeof notification.source !== 'string' ? notification.source.id : notification.source;
            this.telemetryService.publicLog2('notification:show', notificationToMetrics(notification.message, source, notification.priority === NotificationPriority.SILENT));
        }));
        this._register(this.notificationService.onDidRemoveNotification(notification => {
            const source = notification.source && typeof notification.source !== 'string' ? notification.source.id : notification.source;
            this.telemetryService.publicLog2('notification:close', notificationToMetrics(notification.message, source, notification.priority === NotificationPriority.SILENT));
        }));
    }
};
NotificationsTelemetry = ( __decorate([
    ( __param(0, ITelemetryService)),
    ( __param(1, INotificationService))
], NotificationsTelemetry));
export { NotificationsTelemetry, notificationToMetrics };
