import { localize } from 'monaco-editor/esm/vs/nls.js';
import { Action2, MenuId, registerAction2 } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { Categories } from 'monaco-editor/esm/vs/platform/action/common/actionCommonCategories.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { IWorkbenchLayoutService, positionToString } from '../../services/layout/browser/layoutService.js';
import { KeyChord } from 'monaco-editor/esm/vs/base/common/keyCodes.js';
import { isMacintosh, isNative } from 'monaco-editor/esm/vs/base/common/platform.js';
import { IsMacNativeContext } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkeys.js';
import { KeybindingsRegistry } from 'monaco-editor/esm/vs/platform/keybinding/common/keybindingsRegistry.js';
import { ContextKeyExpr, IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import '../../../../../override/vs/platform/dialogs/common/dialogs.js';
import { ToggleAuxiliaryBarAction } from '../parts/auxiliarybar/auxiliaryBarActions.js';
import { TogglePanelAction } from '../parts/panel/panelActions.js';
import { SideBarVisibleContext, InEditorZenModeContext, AuxiliaryBarVisibleContext, PanelVisibleContext, PanelAlignmentContext, IsFullscreenContext, IsCenteredLayoutContext } from '../../common/contextkeys.js';
import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';
import { registerIcon } from 'monaco-editor/esm/vs/platform/theme/common/iconRegistry.js';
const menubarIcon = registerIcon('menuBar', Codicon.layoutMenubar, ( localize('menuBarIcon', "Represents the menu bar")));
const activityBarLeftIcon = registerIcon('activity-bar-left', Codicon.layoutActivitybarLeft, ( localize('activityBarLeft', "Represents the activity bar in the left position")));
const activityBarRightIcon = registerIcon('activity-bar-right', Codicon.layoutActivitybarRight, ( localize('activityBarRight', "Represents the activity bar in the right position")));
const panelLeftIcon = registerIcon('panel-left', Codicon.layoutSidebarLeft, ( localize('panelLeft', "Represents a side bar in the left position")));
registerIcon('panel-left-off', Codicon.layoutSidebarLeftOff, ( localize('panelLeftOff', "Represents a side bar in the left position toggled off")));
const panelRightIcon = registerIcon('panel-right', Codicon.layoutSidebarRight, ( localize('panelRight', "Represents side bar in the right position")));
registerIcon('panel-right-off', Codicon.layoutSidebarRightOff, ( localize('panelRightOff', "Represents side bar in the right position toggled off")));
const panelIcon = registerIcon('panel-bottom', Codicon.layoutPanel, ( localize('panelBottom', "Represents the bottom panel")));
const statusBarIcon = registerIcon('statusBar', Codicon.layoutStatusbar, ( localize('statusBarIcon', "Represents the status bar")));
const panelAlignmentLeftIcon = registerIcon('panel-align-left', Codicon.layoutPanelLeft, ( localize('panelBottomLeft', "Represents the bottom panel alignment set to the left")));
const panelAlignmentRightIcon = registerIcon('panel-align-right', Codicon.layoutPanelRight, ( localize(
    'panelBottomRight',
    "Represents the bottom panel alignment set to the right"
)));
const panelAlignmentCenterIcon = registerIcon('panel-align-center', Codicon.layoutPanelCenter, ( localize(
    'panelBottomCenter',
    "Represents the bottom panel alignment set to the center"
)));
const panelAlignmentJustifyIcon = registerIcon('panel-align-justify', Codicon.layoutPanelJustify, ( localize(
    'panelBottomJustify',
    "Represents the bottom panel alignment set to justified"
)));
const fullscreenIcon = registerIcon('fullscreen', Codicon.screenFull, ( localize('fullScreenIcon', "Represents full screen")));
const centerLayoutIcon = registerIcon('centerLayoutIcon', Codicon.layoutCentered, ( localize('centerLayoutIcon', "Represents centered layout mode")));
const zenModeIcon = registerIcon('zenMode', Codicon.target, ( localize('zenModeIcon', "Represents zen mode")));
class ToggleActivityBarVisibilityAction extends Action2 {
    static { this.ID = 'workbench.action.toggleActivityBarVisibility'; }
    static { this.activityBarVisibleKey = 'workbench.activityBar.visible'; }
    constructor() {
        super({
            id: ToggleActivityBarVisibilityAction.ID,
            title: {
                value: ( localize('toggleActivityBar', "Toggle Activity Bar Visibility")),
                mnemonicTitle: ( localize(
                    { key: 'miActivityBar', comment: ['&& denotes a mnemonic'] },
                    "&&Activity Bar"
                )),
                original: 'Toggle Activity Bar Visibility'
            },
            category: Categories.View,
            f1: true,
            toggled: ( ContextKeyExpr.equals('config.workbench.activityBar.visible', true)),
            menu: [{
                    id: MenuId.MenubarAppearanceMenu,
                    group: '2_workbench_layout',
                    order: 4
                }]
        });
    }
    run(accessor) {
        const layoutService = accessor.get(IWorkbenchLayoutService);
        const configurationService = accessor.get(IConfigurationService);
        const visibility = layoutService.isVisible("workbench.parts.activitybar" );
        const newVisibilityValue = !visibility;
        configurationService.updateValue(ToggleActivityBarVisibilityAction.activityBarVisibleKey, newVisibilityValue);
    }
}
const sidebarPositionConfigurationKey = 'workbench.sideBar.location';
class MoveSidebarPositionAction extends Action2 {
    constructor(id, title, position) {
        super({
            id,
            title,
            f1: false
        });
        this.position = position;
    }
    async run(accessor) {
        const layoutService = accessor.get(IWorkbenchLayoutService);
        const configurationService = accessor.get(IConfigurationService);
        const position = layoutService.getSideBarPosition();
        if (position !== this.position) {
            return configurationService.updateValue(sidebarPositionConfigurationKey, positionToString(this.position));
        }
    }
}
class MoveSidebarRightAction extends MoveSidebarPositionAction {
    static { this.ID = 'workbench.action.moveSideBarRight'; }
    constructor() {
        super(MoveSidebarRightAction.ID, {
            value: ( localize('moveSidebarRight', "Move Primary Side Bar Right")),
            original: 'Move Primary Side Bar Right'
        }, 1 );
    }
}
class MoveSidebarLeftAction extends MoveSidebarPositionAction {
    static { this.ID = 'workbench.action.moveSideBarLeft'; }
    constructor() {
        super(MoveSidebarLeftAction.ID, {
            value: ( localize('moveSidebarLeft', "Move Primary Side Bar Left")),
            original: 'Move Primary Side Bar Left'
        }, 0 );
    }
}
class ToggleSidebarPositionAction extends Action2 {
    static { this.ID = 'workbench.action.toggleSidebarPosition'; }
    static { this.LABEL = ( localize('toggleSidebarPosition', "Toggle Primary Side Bar Position")); }
    static getLabel(layoutService) {
        return layoutService.getSideBarPosition() === 0  ? ( localize('moveSidebarRight', "Move Primary Side Bar Right")) : ( localize('moveSidebarLeft', "Move Primary Side Bar Left"));
    }
    constructor() {
        super({
            id: ToggleSidebarPositionAction.ID,
            title: { value: ( localize('toggleSidebarPosition', "Toggle Primary Side Bar Position")), original: 'Toggle Primary Side Bar Position' },
            category: Categories.View,
            f1: true
        });
    }
    run(accessor) {
        const layoutService = accessor.get(IWorkbenchLayoutService);
        const configurationService = accessor.get(IConfigurationService);
        const position = layoutService.getSideBarPosition();
        const newPositionValue = ((position === 0) ) ? 'right' : 'left';
        return configurationService.updateValue(sidebarPositionConfigurationKey, newPositionValue);
    }
}
registerIcon('configure-layout-icon', Codicon.layout, ( localize('cofigureLayoutIcon', 'Icon represents workbench layout configuration.')));
class ToggleSidebarVisibilityAction extends Action2 {
    static { this.ID = 'workbench.action.toggleSidebarVisibility'; }
    constructor() {
        super({
            id: ToggleSidebarVisibilityAction.ID,
            title: { value: ( localize('toggleSidebar', "Toggle Primary Side Bar Visibility")), original: 'Toggle Primary Side Bar Visibility' },
            toggled: {
                condition: SideBarVisibleContext,
                title: ( localize('primary sidebar', "Primary Side Bar")),
                mnemonicTitle: ( localize(
                    { key: 'primary sidebar mnemonic', comment: ['&& denotes a mnemonic'] },
                    "&&Primary Side Bar"
                )),
            },
            category: Categories.View,
            f1: true,
            keybinding: {
                weight: 200 ,
                primary: 2048  | 32
            },
            menu: [
                {
                    id: MenuId.LayoutControlMenuSubmenu,
                    group: '0_workbench_layout',
                    order: 0
                },
                {
                    id: MenuId.MenubarAppearanceMenu,
                    group: '2_workbench_layout',
                    order: 1
                }
            ]
        });
    }
    run(accessor) {
        const layoutService = accessor.get(IWorkbenchLayoutService);
        layoutService.setPartHidden(layoutService.isVisible("workbench.parts.sidebar" ), "workbench.parts.sidebar" );
    }
}
class ToggleStatusbarVisibilityAction extends Action2 {
    static { this.ID = 'workbench.action.toggleStatusbarVisibility'; }
    static { this.statusbarVisibleKey = 'workbench.statusBar.visible'; }
    constructor() {
        super({
            id: ToggleStatusbarVisibilityAction.ID,
            title: {
                value: ( localize('toggleStatusbar', "Toggle Status Bar Visibility")),
                mnemonicTitle: ( localize({ key: 'miStatusbar', comment: ['&& denotes a mnemonic'] }, "S&&tatus Bar")),
                original: 'Toggle Status Bar Visibility'
            },
            category: Categories.View,
            f1: true,
            toggled: ( ContextKeyExpr.equals('config.workbench.statusBar.visible', true)),
            menu: [{
                    id: MenuId.MenubarAppearanceMenu,
                    group: '2_workbench_layout',
                    order: 3
                }]
        });
    }
    run(accessor) {
        const layoutService = accessor.get(IWorkbenchLayoutService);
        const configurationService = accessor.get(IConfigurationService);
        const visibility = layoutService.isVisible("workbench.parts.statusbar" );
        const newVisibilityValue = !visibility;
        return configurationService.updateValue(ToggleStatusbarVisibilityAction.statusbarVisibleKey, newVisibilityValue);
    }
}
class ToggleTabsVisibilityAction extends Action2 {
    static { this.ID = 'workbench.action.toggleTabsVisibility'; }
    constructor() {
        super({
            id: ToggleTabsVisibilityAction.ID,
            title: {
                value: ( localize('toggleTabs', "Toggle Tab Visibility")),
                original: 'Toggle Tab Visibility'
            },
            category: Categories.View,
            f1: true
        });
    }
    run(accessor) {
        const configurationService = accessor.get(IConfigurationService);
        const visibility = configurationService.getValue('workbench.editor.showTabs');
        const newVisibilityValue = !visibility;
        return configurationService.updateValue('workbench.editor.showTabs', newVisibilityValue);
    }
}
registerAction2(ToggleTabsVisibilityAction);
KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'workbench.action.exitZenMode',
    weight: 100  - 1000,
    handler(accessor) {
        const layoutService = accessor.get(IWorkbenchLayoutService);
        const contextKeyService = accessor.get(IContextKeyService);
        if (InEditorZenModeContext.getValue(contextKeyService)) {
            layoutService.toggleZenMode();
        }
    },
    when: InEditorZenModeContext,
    primary: KeyChord(9 , 9 )
});
class BaseResizeViewAction extends Action2 {
    static { this.RESIZE_INCREMENT = 60; }
    resizePart(widthChange, heightChange, layoutService, partToResize) {
        let part;
        if (partToResize === undefined) {
            const isEditorFocus = layoutService.hasFocus("workbench.parts.editor" );
            const isSidebarFocus = layoutService.hasFocus("workbench.parts.sidebar" );
            const isPanelFocus = layoutService.hasFocus("workbench.parts.panel" );
            const isAuxiliaryBarFocus = layoutService.hasFocus("workbench.parts.auxiliarybar" );
            if (isSidebarFocus) {
                part = "workbench.parts.sidebar" ;
            }
            else if (isPanelFocus) {
                part = "workbench.parts.panel" ;
            }
            else if (isEditorFocus) {
                part = "workbench.parts.editor" ;
            }
            else if (isAuxiliaryBarFocus) {
                part = "workbench.parts.auxiliarybar" ;
            }
        }
        else {
            part = partToResize;
        }
        if (part) {
            layoutService.resizePart(part, widthChange, heightChange);
        }
    }
}
const CreateToggleLayoutItem = (id, active, label, visualIcon) => {
    return {
        id,
        active,
        label,
        visualIcon,
        activeIcon: Codicon.eye,
        inactiveIcon: Codicon.eyeClosed,
        activeAriaLabel: ( localize('selectToHide', "Select to Hide")),
        inactiveAriaLabel: ( localize('selectToShow', "Select to Show")),
        useButtons: true,
    };
};
const CreateOptionLayoutItem = (id, active, label, visualIcon) => {
    return {
        id,
        active,
        label,
        visualIcon,
        activeIcon: Codicon.check,
        activeAriaLabel: ( localize('active', "Active")),
        useButtons: false
    };
};
const MenuBarToggledContext = ( ContextKeyExpr.and(( IsMacNativeContext.toNegated()), ( ContextKeyExpr.notEquals('config.window.menuBarVisibility', 'hidden')), ( ContextKeyExpr.notEquals('config.window.menuBarVisibility', 'toggle')), ( ContextKeyExpr.notEquals('config.window.menuBarVisibility', 'compact'))));
const ToggleVisibilityActions = [];
if (!isMacintosh || !isNative) {
    ToggleVisibilityActions.push(CreateToggleLayoutItem('workbench.action.toggleMenuBar', MenuBarToggledContext, ( localize('menuBar', "Menu Bar")), menubarIcon));
}
ToggleVisibilityActions.push(...[
    CreateToggleLayoutItem(ToggleActivityBarVisibilityAction.ID, ( ContextKeyExpr.equals('config.workbench.activityBar.visible', true)), ( localize('activityBar', "Activity Bar")), { whenA: ( ContextKeyExpr.equals('config.workbench.sideBar.location', 'left')), iconA: activityBarLeftIcon, iconB: activityBarRightIcon }),
    CreateToggleLayoutItem(ToggleSidebarVisibilityAction.ID, SideBarVisibleContext, ( localize('sideBar', "Primary Side Bar")), { whenA: ( ContextKeyExpr.equals('config.workbench.sideBar.location', 'left')), iconA: panelLeftIcon, iconB: panelRightIcon }),
    CreateToggleLayoutItem(ToggleAuxiliaryBarAction.ID, AuxiliaryBarVisibleContext, ( localize('secondarySideBar', "Secondary Side Bar")), { whenA: ( ContextKeyExpr.equals('config.workbench.sideBar.location', 'left')), iconA: panelRightIcon, iconB: panelLeftIcon }),
    CreateToggleLayoutItem(TogglePanelAction.ID, PanelVisibleContext, ( localize('panel', "Panel")), panelIcon),
    CreateToggleLayoutItem(ToggleStatusbarVisibilityAction.ID, ( ContextKeyExpr.equals('config.workbench.statusBar.visible', true)), ( localize('statusBar', "Status Bar")), statusBarIcon),
]);
const MoveSideBarActions = [
    CreateOptionLayoutItem(MoveSidebarLeftAction.ID, ( ContextKeyExpr.equals('config.workbench.sideBar.location', 'left')), ( localize('leftSideBar', "Left")), panelLeftIcon),
    CreateOptionLayoutItem(MoveSidebarRightAction.ID, ( ContextKeyExpr.equals('config.workbench.sideBar.location', 'right')), ( localize('rightSideBar', "Right")), panelRightIcon),
];
const AlignPanelActions = [
    CreateOptionLayoutItem('workbench.action.alignPanelLeft', ( PanelAlignmentContext.isEqualTo('left')), ( localize('leftPanel', "Left")), panelAlignmentLeftIcon),
    CreateOptionLayoutItem('workbench.action.alignPanelRight', ( PanelAlignmentContext.isEqualTo('right')), ( localize('rightPanel', "Right")), panelAlignmentRightIcon),
    CreateOptionLayoutItem('workbench.action.alignPanelCenter', ( PanelAlignmentContext.isEqualTo('center')), ( localize('centerPanel', "Center")), panelAlignmentCenterIcon),
    CreateOptionLayoutItem('workbench.action.alignPanelJustify', ( PanelAlignmentContext.isEqualTo('justify')), ( localize('justifyPanel', "Justify")), panelAlignmentJustifyIcon),
];
const MiscLayoutOptions = [
    CreateOptionLayoutItem('workbench.action.toggleFullScreen', IsFullscreenContext, ( localize('fullscreen', "Full Screen")), fullscreenIcon),
    CreateOptionLayoutItem('workbench.action.toggleZenMode', InEditorZenModeContext, ( localize('zenMode', "Zen Mode")), zenModeIcon),
    CreateOptionLayoutItem('workbench.action.toggleCenteredLayout', IsCenteredLayoutContext, ( localize('centeredLayout', "Centered Layout")), centerLayoutIcon),
];
const LayoutContextKeySet = ( new Set());
for (const { active } of [...ToggleVisibilityActions, ...MoveSideBarActions, ...AlignPanelActions, ...MiscLayoutOptions]) {
    for (const key of ( active.keys())) {
        LayoutContextKeySet.add(key);
    }
}
export { ToggleActivityBarVisibilityAction, ToggleSidebarPositionAction, ToggleStatusbarVisibilityAction, ToggleTabsVisibilityAction };
