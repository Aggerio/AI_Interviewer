import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';
import { Event } from '../../../../base/common/event.js';
import { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';
import { CompositePart } from '../compositePart.js';
import { PaneComposite, PaneCompositeDescriptor } from '../../panecomposite.js';
import { IWorkbenchLayoutService } from '../../../services/layout/browser/layoutService.js';
import { IStorageService } from '../../../../platform/storage/common/storage.js';
import { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';
import { IKeybindingService } from '../../../../platform/keybinding/common/keybinding.js';
import { IThemeService } from '../../../../platform/theme/common/themeService.js';
import { INotificationService } from '../../../../platform/notification/common/notification.js';
import { AnchorAlignment } from '../../../../base/browser/ui/contextview/contextview.js';
import { IExtensionService } from '../../../services/extensions/common/extensions.js';
import { LayoutPriority } from '../../../../base/browser/ui/splitview/splitview.js';
import { IViewDescriptorService } from '../../../common/views.js';
import { IPaneComposite } from '../../../common/panecomposite.js';
import { IPaneCompositePart } from '../paneCompositePart.js';

declare class SidebarPart extends CompositePart<PaneComposite> implements IPaneCompositePart {
    private readonly viewDescriptorService;
    private readonly contextKeyService;
    private readonly extensionService;
    readonly _serviceBrand: undefined;
    static readonly activeViewletSettingsKey = "workbench.sidebar.activeviewletid";
    readonly minimumWidth: number;
    readonly maximumWidth: number;
    readonly minimumHeight: number;
    readonly maximumHeight: number;
    readonly priority: LayoutPriority;
    readonly snap = true;
    get preferredWidth(): number | undefined;
    get onDidPaneCompositeRegister(): Event<PaneCompositeDescriptor>;
    private _onDidViewletDeregister;
    readonly onDidPaneCompositeDeregister: Event<PaneCompositeDescriptor>;
    get onDidPaneCompositeOpen(): Event<IPaneComposite>;
    get onDidPaneCompositeClose(): Event<IPaneComposite>;
    private readonly viewletRegistry;
    private readonly sideBarFocusContextKey;
    private readonly activeViewletContextKey;
    private blockOpeningViewlet;
    constructor(notificationService: INotificationService, storageService: IStorageService, contextMenuService: IContextMenuService, layoutService: IWorkbenchLayoutService, keybindingService: IKeybindingService, instantiationService: IInstantiationService, themeService: IThemeService, viewDescriptorService: IViewDescriptorService, contextKeyService: IContextKeyService, extensionService: IExtensionService);
    private registerListeners;
    create(parent: HTMLElement): void;
    protected createTitleArea(parent: HTMLElement): HTMLElement;
    updateStyles(): void;
    layout(width: number, height: number, top: number, left: number): void;
    getActivePaneComposite(): IPaneComposite | undefined;
    getLastActivePaneCompositeId(): string;
    hideActivePaneComposite(): void;
    openPaneComposite(id: string | undefined, focus?: boolean): Promise<IPaneComposite | undefined>;
    getPaneComposites(): PaneCompositeDescriptor[];
    getPaneComposite(id: string): PaneCompositeDescriptor;
    private doOpenViewlet;
    protected getTitleAreaDropDownAnchorAlignment(): AnchorAlignment;
    private onTitleAreaContextMenu;
    toJSON(): object;
}

export { SidebarPart };
