import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { Disposable, DisposableStore, toDisposable, dispose } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { IFilesConfigurationService } from '../../../services/filesConfiguration/common/filesConfigurationService.js';
import { IHostService } from '../../../services/host/browser/host.js';
import { IEditorService } from '../../../services/editor/common/editorService.js';
import { IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';
import { withNullAsUndefined } from 'monaco-editor/esm/vs/base/common/types.js';
import { IWorkingCopyService } from '../../../services/workingCopy/common/workingCopyService.js';
import { ILogService } from 'monaco-editor/esm/vs/platform/log/common/log.js';
let EditorAutoSave = class EditorAutoSave extends Disposable {
    constructor(filesConfigurationService, hostService, editorService, editorGroupService, workingCopyService, logService) {
        super();
        this.filesConfigurationService = filesConfigurationService;
        this.hostService = hostService;
        this.editorService = editorService;
        this.editorGroupService = editorGroupService;
        this.workingCopyService = workingCopyService;
        this.logService = logService;
        this.pendingAutoSavesAfterDelay = ( new Map());
        this.lastActiveEditor = undefined;
        this.lastActiveGroupId = undefined;
        this.lastActiveEditorControlDisposable = this._register(( new DisposableStore()));
        this.onAutoSaveConfigurationChange(filesConfigurationService.getAutoSaveConfiguration(), false);
        for (const dirtyWorkingCopy of this.workingCopyService.dirtyWorkingCopies) {
            this.onDidRegister(dirtyWorkingCopy);
        }
        this.registerListeners();
    }
    registerListeners() {
        this._register(this.hostService.onDidChangeFocus(focused => this.onWindowFocusChange(focused)));
        this._register(this.editorService.onDidActiveEditorChange(() => this.onDidActiveEditorChange()));
        this._register(this.filesConfigurationService.onAutoSaveConfigurationChange(config => this.onAutoSaveConfigurationChange(config, true)));
        this._register(this.workingCopyService.onDidRegister(workingCopy => this.onDidRegister(workingCopy)));
        this._register(this.workingCopyService.onDidUnregister(workingCopy => this.onDidUnregister(workingCopy)));
        this._register(this.workingCopyService.onDidChangeDirty(workingCopy => this.onDidChangeDirty(workingCopy)));
        this._register(this.workingCopyService.onDidChangeContent(workingCopy => this.onDidChangeContent(workingCopy)));
    }
    onWindowFocusChange(focused) {
        if (!focused) {
            this.maybeTriggerAutoSave(4 );
        }
    }
    onDidActiveEditorChange() {
        if (this.lastActiveEditor && typeof this.lastActiveGroupId === 'number') {
            this.maybeTriggerAutoSave(3 , { groupId: this.lastActiveGroupId, editor: this.lastActiveEditor });
        }
        const activeGroup = this.editorGroupService.activeGroup;
        const activeEditor = this.lastActiveEditor = withNullAsUndefined(activeGroup.activeEditor);
        this.lastActiveGroupId = activeGroup.id;
        this.lastActiveEditorControlDisposable.clear();
        const activeEditorPane = this.editorService.activeEditorPane;
        if (activeEditor && activeEditorPane) {
            this.lastActiveEditorControlDisposable.add(activeEditorPane.onDidBlur(() => {
                this.maybeTriggerAutoSave(3 , { groupId: activeGroup.id, editor: activeEditor });
            }));
        }
    }
    maybeTriggerAutoSave(reason, editorIdentifier) {
        if (editorIdentifier?.editor.isReadonly() || editorIdentifier?.editor.hasCapability(4 )) {
            return;
        }
        const mode = this.filesConfigurationService.getAutoSaveMode();
        if ((reason === 4  && ((mode === 3  || mode === 4) )) ||
            ((reason === 3  && mode === 3) )) {
            this.logService.trace(`[editor auto save] triggering auto save with reason ${reason}`);
            if (editorIdentifier) {
                this.editorService.save(editorIdentifier, { reason });
            }
            else {
                this.saveAllDirty({ reason });
            }
        }
    }
    onAutoSaveConfigurationChange(config, fromEvent) {
        this.autoSaveAfterDelay = (typeof config.autoSaveDelay === 'number') && config.autoSaveDelay >= 0 ? config.autoSaveDelay : undefined;
        if (fromEvent) {
            let reason = undefined;
            switch (this.filesConfigurationService.getAutoSaveMode()) {
                case 3 :
                    reason = 3 ;
                    break;
                case 4 :
                    reason = 4 ;
                    break;
                case 1 :
                case 2 :
                    reason = 2 ;
                    break;
            }
            if (reason) {
                this.saveAllDirty({ reason });
            }
        }
    }
    saveAllDirty(options) {
        for (const workingCopy of this.workingCopyService.dirtyWorkingCopies) {
            if (!((workingCopy.capabilities & 2) )) {
                workingCopy.save(options);
            }
        }
    }
    onDidRegister(workingCopy) {
        if (workingCopy.isDirty()) {
            this.scheduleAutoSave(workingCopy);
        }
    }
    onDidUnregister(workingCopy) {
        this.discardAutoSave(workingCopy);
    }
    onDidChangeDirty(workingCopy) {
        if (workingCopy.isDirty()) {
            this.scheduleAutoSave(workingCopy);
        }
        else {
            this.discardAutoSave(workingCopy);
        }
    }
    onDidChangeContent(workingCopy) {
        if (workingCopy.isDirty()) {
            this.scheduleAutoSave(workingCopy);
        }
    }
    scheduleAutoSave(workingCopy) {
        if (typeof this.autoSaveAfterDelay !== 'number') {
            return;
        }
        if (workingCopy.capabilities & 2 ) {
            return;
        }
        this.discardAutoSave(workingCopy);
        this.logService.trace(`[editor auto save] scheduling auto save after ${this.autoSaveAfterDelay}ms`, ( workingCopy.resource.toString()), workingCopy.typeId);
        const handle = setTimeout(() => {
            this.pendingAutoSavesAfterDelay.delete(workingCopy);
            if (workingCopy.isDirty()) {
                this.logService.trace(`[editor auto save] running auto save`, ( workingCopy.resource.toString()), workingCopy.typeId);
                workingCopy.save({ reason: 2  });
            }
        }, this.autoSaveAfterDelay);
        this.pendingAutoSavesAfterDelay.set(workingCopy, toDisposable(() => {
            this.logService.trace(`[editor auto save] clearing pending auto save`, ( workingCopy.resource.toString()), workingCopy.typeId);
            clearTimeout(handle);
        }));
    }
    discardAutoSave(workingCopy) {
        dispose(this.pendingAutoSavesAfterDelay.get(workingCopy));
        this.pendingAutoSavesAfterDelay.delete(workingCopy);
    }
};
EditorAutoSave = ( __decorate([
    ( __param(0, IFilesConfigurationService)),
    ( __param(1, IHostService)),
    ( __param(2, IEditorService)),
    ( __param(3, IEditorGroupsService)),
    ( __param(4, IWorkingCopyService)),
    ( __param(5, ILogService))
], EditorAutoSave));
export { EditorAutoSave };
