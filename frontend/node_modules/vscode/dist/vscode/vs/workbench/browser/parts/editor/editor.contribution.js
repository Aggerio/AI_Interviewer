import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { EditorPaneDescriptor } from '../../editor.js';
import { EditorExtensions } from '../../../common/editor.js';
import { ActiveEditorGroupLockedContext, MultipleEditorGroupsContext, EditorGroupEditorsCountContext, ActiveEditorLastInGroupContext, EditorTabsVisibleContext, ActiveEditorAvailableEditorIdsContext, ActiveEditorPinnedContext, ActiveEditorStickyContext, ActiveEditorCanSplitInGroupContext, SideBySideEditorActiveContext, TextCompareEditorActiveContext, ActiveEditorDirtyContext } from '../../../common/contextkeys.js';
import { SideBySideEditorInput } from '../../../common/editor/sideBySideEditorInput.js';
import { TextResourceEditor } from './textResourceEditor.js';
import { SideBySideEditor } from './sideBySideEditor.js';
import { DiffEditorInput } from '../../../common/editor/diffEditorInput.js';
import { UntitledTextEditorInput } from '../../../services/untitled/common/untitledTextEditorInput.js';
import { TextResourceEditorInput } from '../../../common/editor/textResourceEditorInput.js';
import { TextDiffEditor } from './textDiffEditor.js';
import { BinaryResourceDiffEditor } from './binaryDiffEditor.js';
import { EditorStatus, ChangeLanguageAction, ChangeEOLAction, ChangeEncodingAction } from './editorStatus.js';
import { Categories } from 'monaco-editor/esm/vs/platform/action/common/actionCommonCategories.js';
import { registerAction2, MenuRegistry, MenuId } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
import { ShowEditorsInActiveGroupByMostRecentlyUsedAction, ShowAllEditorsByAppearanceAction, ShowAllEditorsByMostRecentlyUsedAction, NavigateForwardAction, NavigateBackwardsAction, OpenNextEditor, OpenPreviousEditor, OpenNextEditorInGroup, OpenPreviousEditorInGroup, OpenFirstEditorInGroup, OpenLastEditorInGroup, OpenNextRecentlyUsedEditorAction, OpenPreviousRecentlyUsedEditorAction, OpenNextRecentlyUsedEditorInGroupAction, OpenPreviousRecentlyUsedEditorInGroupAction, ReopenClosedEditorAction, ClearRecentFilesAction, CloseAllEditorsAction, CloseAllEditorGroupsAction, CloseLeftEditorsInGroupAction, CloseEditorsInOtherGroupsAction, CloseEditorInAllGroupsAction, RevertAndCloseEditorAction, SplitEditorAction, SplitEditorOrthogonalAction, SplitEditorLeftAction, SplitEditorRightAction, SplitEditorUpAction, SplitEditorDownAction, JoinTwoGroupsAction, JoinAllGroupsAction, NavigateBetweenGroupsAction, ResetGroupSizesAction, ToggleGroupSizesAction, MaximizeGroupAction, MinimizeOtherGroupsAction, MoveEditorLeftInGroupAction, MoveEditorRightInGroupAction, MoveGroupLeftAction, MoveGroupRightAction, MoveGroupUpAction, MoveGroupDownAction, DuplicateGroupLeftAction, DuplicateGroupRightAction, DuplicateGroupUpAction, DuplicateGroupDownAction, MoveEditorToPreviousGroupAction, MoveEditorToNextGroupAction, MoveEditorToFirstGroupAction, MoveEditorToLastGroupAction, MoveEditorToLeftGroupAction, MoveEditorToRightGroupAction, MoveEditorToAboveGroupAction, MoveEditorToBelowGroupAction, SplitEditorToPreviousGroupAction, SplitEditorToNextGroupAction, SplitEditorToFirstGroupAction, SplitEditorToLastGroupAction, SplitEditorToLeftGroupAction, SplitEditorToRightGroupAction, SplitEditorToAboveGroupAction, SplitEditorToBelowGroupAction, FocusActiveGroupAction, FocusFirstGroupAction, FocusLastGroupAction, FocusPreviousGroup, FocusNextGroup, FocusLeftGroup, FocusRightGroup, FocusAboveGroup, FocusBelowGroup, NewEditorGroupLeftAction, NewEditorGroupRightAction, NewEditorGroupAboveAction, NewEditorGroupBelowAction, NavigatePreviousAction, NavigateForwardInEditsAction, NavigateBackwardsInEditsAction, NavigatePreviousInEditsAction, NavigateToLastEditLocationAction, NavigateForwardInNavigationsAction, NavigateBackwardsInNavigationsAction, NavigatePreviousInNavigationsAction, NavigateToLastNavigationLocationAction, ClearEditorHistoryAction, EditorLayoutSingleAction, EditorLayoutTwoColumnsAction, EditorLayoutThreeColumnsAction, EditorLayoutTwoRowsAction, EditorLayoutThreeRowsAction, EditorLayoutTwoByTwoGridAction, EditorLayoutTwoRowsRightAction, EditorLayoutTwoColumnsBottomAction, ToggleEditorTypeAction, ReOpenInTextEditorAction, QuickAccessPreviousRecentlyUsedEditorAction, QuickAccessLeastRecentlyUsedEditorAction, QuickAccessPreviousRecentlyUsedEditorInGroupAction, QuickAccessLeastRecentlyUsedEditorInGroupAction, QuickAccessPreviousEditorFromHistoryAction } from './editorActions.js';
import { setup, UNLOCK_GROUP_COMMAND_ID, CLOSE_EDITOR_GROUP_COMMAND_ID, SPLIT_EDITOR_UP, SPLIT_EDITOR_DOWN, SPLIT_EDITOR_LEFT, SPLIT_EDITOR_RIGHT, TOGGLE_LOCK_GROUP_COMMAND_ID, CLOSE_EDITOR_COMMAND_ID, CLOSE_OTHER_EDITORS_IN_GROUP_COMMAND_ID, CLOSE_EDITORS_TO_THE_RIGHT_COMMAND_ID, CLOSE_SAVED_EDITORS_COMMAND_ID, CLOSE_EDITORS_IN_GROUP_COMMAND_ID, REOPEN_WITH_COMMAND_ID, KEEP_EDITOR_COMMAND_ID, PIN_EDITOR_COMMAND_ID, UNPIN_EDITOR_COMMAND_ID, SPLIT_EDITOR_IN_GROUP, JOIN_EDITOR_IN_GROUP, TOGGLE_DIFF_SIDE_BY_SIDE, SHOW_EDITORS_IN_GROUP, TOGGLE_KEEP_EDITORS_COMMAND_ID, TOGGLE_DIFF_IGNORE_TRIM_WHITESPACE, CLOSE_PINNED_EDITOR_COMMAND_ID, CLOSE_EDITORS_AND_GROUP_COMMAND_ID, FOCUS_FIRST_SIDE_EDITOR, FOCUS_SECOND_SIDE_EDITOR, TOGGLE_SPLIT_EDITOR_IN_GROUP_LAYOUT, GOTO_PREVIOUS_CHANGE, GOTO_NEXT_CHANGE } from './editorCommands.js';
import { getQuickNavigateHandler, inQuickPickContext } from '../../quickaccess.js';
import { KeybindingsRegistry } from 'monaco-editor/esm/vs/platform/keybinding/common/keybindingsRegistry.js';
import { ContextKeyExpr } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { registerEditorContribution } from 'monaco-editor/esm/vs/editor/browser/editorExtensions.js';
import { FloatingClickMenu } from '../../codeeditor.js';
import { Extensions } from '../../../common/contributions.js';
import { EditorAutoSave } from './editorAutoSave.js';
import { ThemeIcon } from 'monaco-editor/esm/vs/base/common/themables.js';
import { Extensions as Extensions$1 } from 'monaco-editor/esm/vs/platform/quickinput/common/quickAccess.js';
import { ActiveGroupEditorsByMostRecentlyUsedQuickAccess, AllEditorsByAppearanceQuickAccess, AllEditorsByMostRecentlyUsedQuickAccess } from './editorQuickAccess.js';
import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';
import { registerIcon } from 'monaco-editor/esm/vs/platform/theme/common/iconRegistry.js';
import { UntitledTextEditorWorkingCopyEditorHandler } from '../../../services/untitled/common/untitledTextEditorHandler.js';
import { DynamicEditorConfigurations } from './editorConfiguration.js';
import { AccessibilityStatus } from './accessibilityStatus.js';
import { ToggleTabsVisibilityAction } from '../../actions/layoutActions.js';
import '../../../../editor/browser/widget/diffEditorWidget2/diffEditorWidget2.contribution.js';
( Registry.as(EditorExtensions.EditorPane)).registerEditorPane(EditorPaneDescriptor.create(TextResourceEditor, TextResourceEditor.ID, ( localize('textEditor', "Text Editor"))), [
    ( new SyncDescriptor(UntitledTextEditorInput)),
    ( new SyncDescriptor(TextResourceEditorInput))
]);
( Registry.as(EditorExtensions.EditorPane)).registerEditorPane(EditorPaneDescriptor.create(TextDiffEditor, TextDiffEditor.ID, ( localize('textDiffEditor', "Text Diff Editor"))), [
    ( new SyncDescriptor(DiffEditorInput))
]);
( Registry.as(EditorExtensions.EditorPane)).registerEditorPane(EditorPaneDescriptor.create(BinaryResourceDiffEditor, BinaryResourceDiffEditor.ID, ( localize('binaryDiffEditor', "Binary Diff Editor"))), [
    ( new SyncDescriptor(DiffEditorInput))
]);
( Registry.as(EditorExtensions.EditorPane)).registerEditorPane(EditorPaneDescriptor.create(SideBySideEditor, SideBySideEditor.ID, ( localize('sideBySideEditor', "Side by Side Editor"))), [
    ( new SyncDescriptor(SideBySideEditorInput))
]);
( Registry.as(Extensions.Workbench)).registerWorkbenchContribution(EditorAutoSave, 2 );
( Registry.as(Extensions.Workbench)).registerWorkbenchContribution(EditorStatus, 2 );
( Registry.as(Extensions.Workbench)).registerWorkbenchContribution(AccessibilityStatus, 2 );
( Registry.as(Extensions.Workbench)).registerWorkbenchContribution(UntitledTextEditorWorkingCopyEditorHandler, 2 );
( Registry.as(Extensions.Workbench)).registerWorkbenchContribution(DynamicEditorConfigurations, 2 );
registerEditorContribution(FloatingClickMenu.ID, FloatingClickMenu, 1 );
const quickAccessRegistry = ( Registry.as(Extensions$1.Quickaccess));
const editorPickerContextKey = 'inEditorsPicker';
const editorPickerContext = ( ContextKeyExpr.and(inQuickPickContext, ( ContextKeyExpr.has(editorPickerContextKey))));
quickAccessRegistry.registerQuickAccessProvider({
    ctor: ActiveGroupEditorsByMostRecentlyUsedQuickAccess,
    prefix: ActiveGroupEditorsByMostRecentlyUsedQuickAccess.PREFIX,
    contextKey: editorPickerContextKey,
    placeholder: ( localize('editorQuickAccessPlaceholder', "Type the name of an editor to open it.")),
    helpEntries: [{ description: ( localize(
        'activeGroupEditorsByMostRecentlyUsedQuickAccess',
        "Show Editors in Active Group by Most Recently Used"
    )), commandId: ShowEditorsInActiveGroupByMostRecentlyUsedAction.ID }]
});
quickAccessRegistry.registerQuickAccessProvider({
    ctor: AllEditorsByAppearanceQuickAccess,
    prefix: AllEditorsByAppearanceQuickAccess.PREFIX,
    contextKey: editorPickerContextKey,
    placeholder: ( localize('editorQuickAccessPlaceholder', "Type the name of an editor to open it.")),
    helpEntries: [{ description: ( localize(
        'allEditorsByAppearanceQuickAccess',
        "Show All Opened Editors By Appearance"
    )), commandId: ShowAllEditorsByAppearanceAction.ID }]
});
quickAccessRegistry.registerQuickAccessProvider({
    ctor: AllEditorsByMostRecentlyUsedQuickAccess,
    prefix: AllEditorsByMostRecentlyUsedQuickAccess.PREFIX,
    contextKey: editorPickerContextKey,
    placeholder: ( localize('editorQuickAccessPlaceholder', "Type the name of an editor to open it.")),
    helpEntries: [{ description: ( localize(
        'allEditorsByMostRecentlyUsedQuickAccess',
        "Show All Opened Editors By Most Recently Used"
    )), commandId: ShowAllEditorsByMostRecentlyUsedAction.ID }]
});
registerAction2(ChangeLanguageAction);
registerAction2(ChangeEOLAction);
registerAction2(ChangeEncodingAction);
registerAction2(NavigateForwardAction);
registerAction2(NavigateBackwardsAction);
registerAction2(OpenNextEditor);
registerAction2(OpenPreviousEditor);
registerAction2(OpenNextEditorInGroup);
registerAction2(OpenPreviousEditorInGroup);
registerAction2(OpenFirstEditorInGroup);
registerAction2(OpenLastEditorInGroup);
registerAction2(OpenNextRecentlyUsedEditorAction);
registerAction2(OpenPreviousRecentlyUsedEditorAction);
registerAction2(OpenNextRecentlyUsedEditorInGroupAction);
registerAction2(OpenPreviousRecentlyUsedEditorInGroupAction);
registerAction2(ReopenClosedEditorAction);
registerAction2(ClearRecentFilesAction);
registerAction2(ShowAllEditorsByAppearanceAction);
registerAction2(ShowAllEditorsByMostRecentlyUsedAction);
registerAction2(ShowEditorsInActiveGroupByMostRecentlyUsedAction);
registerAction2(CloseAllEditorsAction);
registerAction2(CloseAllEditorGroupsAction);
registerAction2(CloseLeftEditorsInGroupAction);
registerAction2(CloseEditorsInOtherGroupsAction);
registerAction2(CloseEditorInAllGroupsAction);
registerAction2(RevertAndCloseEditorAction);
registerAction2(SplitEditorAction);
registerAction2(SplitEditorOrthogonalAction);
registerAction2(SplitEditorLeftAction);
registerAction2(SplitEditorRightAction);
registerAction2(SplitEditorUpAction);
registerAction2(SplitEditorDownAction);
registerAction2(JoinTwoGroupsAction);
registerAction2(JoinAllGroupsAction);
registerAction2(NavigateBetweenGroupsAction);
registerAction2(ResetGroupSizesAction);
registerAction2(ToggleGroupSizesAction);
registerAction2(MaximizeGroupAction);
registerAction2(MinimizeOtherGroupsAction);
registerAction2(MoveEditorLeftInGroupAction);
registerAction2(MoveEditorRightInGroupAction);
registerAction2(MoveGroupLeftAction);
registerAction2(MoveGroupRightAction);
registerAction2(MoveGroupUpAction);
registerAction2(MoveGroupDownAction);
registerAction2(DuplicateGroupLeftAction);
registerAction2(DuplicateGroupRightAction);
registerAction2(DuplicateGroupUpAction);
registerAction2(DuplicateGroupDownAction);
registerAction2(MoveEditorToPreviousGroupAction);
registerAction2(MoveEditorToNextGroupAction);
registerAction2(MoveEditorToFirstGroupAction);
registerAction2(MoveEditorToLastGroupAction);
registerAction2(MoveEditorToLeftGroupAction);
registerAction2(MoveEditorToRightGroupAction);
registerAction2(MoveEditorToAboveGroupAction);
registerAction2(MoveEditorToBelowGroupAction);
registerAction2(SplitEditorToPreviousGroupAction);
registerAction2(SplitEditorToNextGroupAction);
registerAction2(SplitEditorToFirstGroupAction);
registerAction2(SplitEditorToLastGroupAction);
registerAction2(SplitEditorToLeftGroupAction);
registerAction2(SplitEditorToRightGroupAction);
registerAction2(SplitEditorToAboveGroupAction);
registerAction2(SplitEditorToBelowGroupAction);
registerAction2(FocusActiveGroupAction);
registerAction2(FocusFirstGroupAction);
registerAction2(FocusLastGroupAction);
registerAction2(FocusPreviousGroup);
registerAction2(FocusNextGroup);
registerAction2(FocusLeftGroup);
registerAction2(FocusRightGroup);
registerAction2(FocusAboveGroup);
registerAction2(FocusBelowGroup);
registerAction2(NewEditorGroupLeftAction);
registerAction2(NewEditorGroupRightAction);
registerAction2(NewEditorGroupAboveAction);
registerAction2(NewEditorGroupBelowAction);
registerAction2(NavigatePreviousAction);
registerAction2(NavigateForwardInEditsAction);
registerAction2(NavigateBackwardsInEditsAction);
registerAction2(NavigatePreviousInEditsAction);
registerAction2(NavigateToLastEditLocationAction);
registerAction2(NavigateForwardInNavigationsAction);
registerAction2(NavigateBackwardsInNavigationsAction);
registerAction2(NavigatePreviousInNavigationsAction);
registerAction2(NavigateToLastNavigationLocationAction);
registerAction2(ClearEditorHistoryAction);
registerAction2(EditorLayoutSingleAction);
registerAction2(EditorLayoutTwoColumnsAction);
registerAction2(EditorLayoutThreeColumnsAction);
registerAction2(EditorLayoutTwoRowsAction);
registerAction2(EditorLayoutThreeRowsAction);
registerAction2(EditorLayoutTwoByTwoGridAction);
registerAction2(EditorLayoutTwoRowsRightAction);
registerAction2(EditorLayoutTwoColumnsBottomAction);
registerAction2(ToggleEditorTypeAction);
registerAction2(ReOpenInTextEditorAction);
registerAction2(QuickAccessPreviousRecentlyUsedEditorAction);
registerAction2(QuickAccessLeastRecentlyUsedEditorAction);
registerAction2(QuickAccessPreviousRecentlyUsedEditorInGroupAction);
registerAction2(QuickAccessLeastRecentlyUsedEditorInGroupAction);
registerAction2(QuickAccessPreviousEditorFromHistoryAction);
const quickAccessNavigateNextInEditorPickerId = 'workbench.action.quickOpenNavigateNextInEditorPicker';
KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: quickAccessNavigateNextInEditorPickerId,
    weight: 200  + 50,
    handler: getQuickNavigateHandler(quickAccessNavigateNextInEditorPickerId, true),
    when: editorPickerContext,
    primary: 2048  | 2 ,
    mac: { primary: 256  | 2  }
});
const quickAccessNavigatePreviousInEditorPickerId = 'workbench.action.quickOpenNavigatePreviousInEditorPicker';
KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: quickAccessNavigatePreviousInEditorPickerId,
    weight: 200  + 50,
    handler: getQuickNavigateHandler(quickAccessNavigatePreviousInEditorPickerId, false),
    when: editorPickerContext,
    primary: 2048  | 1024  | 2 ,
    mac: { primary: 256  | 1024  | 2  }
});
setup();
MenuRegistry.appendMenuItem(MenuId.EmptyEditorGroup, { command: { id: UNLOCK_GROUP_COMMAND_ID, title: ( localize('unlockGroupAction', "Unlock Group")), icon: Codicon.lock }, group: 'navigation', order: 10, when: ActiveEditorGroupLockedContext });
MenuRegistry.appendMenuItem(MenuId.EmptyEditorGroup, { command: { id: CLOSE_EDITOR_GROUP_COMMAND_ID, title: ( localize('closeGroupAction', "Close Group")), icon: Codicon.close }, group: 'navigation', order: 20 });
MenuRegistry.appendMenuItem(MenuId.EmptyEditorGroupContext, { command: { id: SPLIT_EDITOR_UP, title: ( localize('splitUp', "Split Up")) }, group: '2_split', order: 10 });
MenuRegistry.appendMenuItem(MenuId.EmptyEditorGroupContext, { command: { id: SPLIT_EDITOR_DOWN, title: ( localize('splitDown', "Split Down")) }, group: '2_split', order: 20 });
MenuRegistry.appendMenuItem(MenuId.EmptyEditorGroupContext, { command: { id: SPLIT_EDITOR_LEFT, title: ( localize('splitLeft', "Split Left")) }, group: '2_split', order: 30 });
MenuRegistry.appendMenuItem(MenuId.EmptyEditorGroupContext, { command: { id: SPLIT_EDITOR_RIGHT, title: ( localize('splitRight', "Split Right")) }, group: '2_split', order: 40 });
MenuRegistry.appendMenuItem(MenuId.EmptyEditorGroupContext, { command: { id: TOGGLE_LOCK_GROUP_COMMAND_ID, title: ( localize('toggleLockGroup', "Lock Group")), toggled: ActiveEditorGroupLockedContext }, group: '3_lock', order: 10, when: MultipleEditorGroupsContext });
MenuRegistry.appendMenuItem(MenuId.EmptyEditorGroupContext, { command: { id: CLOSE_EDITOR_GROUP_COMMAND_ID, title: ( localize('close', "Close")) }, group: '4_close', order: 10, when: MultipleEditorGroupsContext });
MenuRegistry.appendMenuItem(MenuId.EditorTabsBarContext, { command: { id: SPLIT_EDITOR_UP, title: ( localize('splitUp', "Split Up")) }, group: '2_split', order: 10 });
MenuRegistry.appendMenuItem(MenuId.EditorTabsBarContext, { command: { id: SPLIT_EDITOR_DOWN, title: ( localize('splitDown', "Split Down")) }, group: '2_split', order: 20 });
MenuRegistry.appendMenuItem(MenuId.EditorTabsBarContext, { command: { id: SPLIT_EDITOR_LEFT, title: ( localize('splitLeft', "Split Left")) }, group: '2_split', order: 30 });
MenuRegistry.appendMenuItem(MenuId.EditorTabsBarContext, { command: { id: SPLIT_EDITOR_RIGHT, title: ( localize('splitRight', "Split Right")) }, group: '2_split', order: 40 });
MenuRegistry.appendMenuItem(MenuId.EditorTabsBarContext, { command: { id: ToggleTabsVisibilityAction.ID, title: ( localize('toggleTabs', "Enable Tabs")), toggled: ( ContextKeyExpr.has('config.workbench.editor.showTabs')) }, group: '3_config', order: 10 });
MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: CLOSE_EDITOR_COMMAND_ID, title: ( localize('close', "Close")) }, group: '1_close', order: 10 });
MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: CLOSE_OTHER_EDITORS_IN_GROUP_COMMAND_ID, title: ( localize('closeOthers', "Close Others")), precondition: ( EditorGroupEditorsCountContext.notEqualsTo('1')) }, group: '1_close', order: 20 });
MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: CLOSE_EDITORS_TO_THE_RIGHT_COMMAND_ID, title: ( localize('closeRight', "Close to the Right")), precondition: ( ActiveEditorLastInGroupContext.toNegated()) }, group: '1_close', order: 30, when: EditorTabsVisibleContext });
MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: CLOSE_SAVED_EDITORS_COMMAND_ID, title: ( localize('closeAllSaved', "Close Saved")) }, group: '1_close', order: 40 });
MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: CLOSE_EDITORS_IN_GROUP_COMMAND_ID, title: ( localize('closeAll', "Close All")) }, group: '1_close', order: 50 });
MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: REOPEN_WITH_COMMAND_ID, title: ( localize('reopenWith', "Reopen Editor With...")) }, group: '1_open', order: 10, when: ActiveEditorAvailableEditorIdsContext });
MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: KEEP_EDITOR_COMMAND_ID, title: ( localize('keepOpen', "Keep Open")), precondition: ( ActiveEditorPinnedContext.toNegated()) }, group: '3_preview', order: 10, when: ( ContextKeyExpr.has('config.workbench.editor.enablePreview')) });
MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: PIN_EDITOR_COMMAND_ID, title: ( localize('pin', "Pin")) }, group: '3_preview', order: 20, when: ( ActiveEditorStickyContext.toNegated()) });
MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: UNPIN_EDITOR_COMMAND_ID, title: ( localize('unpin', "Unpin")) }, group: '3_preview', order: 20, when: ActiveEditorStickyContext });
MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: SPLIT_EDITOR_UP, title: ( localize('splitUp', "Split Up")) }, group: '5_split', order: 10 });
MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: SPLIT_EDITOR_DOWN, title: ( localize('splitDown', "Split Down")) }, group: '5_split', order: 20 });
MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: SPLIT_EDITOR_LEFT, title: ( localize('splitLeft', "Split Left")) }, group: '5_split', order: 30 });
MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: SPLIT_EDITOR_RIGHT, title: ( localize('splitRight', "Split Right")) }, group: '5_split', order: 40 });
MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: SPLIT_EDITOR_IN_GROUP, title: ( localize('splitInGroup', "Split in Group")) }, group: '6_split_in_group', order: 10, when: ActiveEditorCanSplitInGroupContext });
MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, { command: { id: JOIN_EDITOR_IN_GROUP, title: ( localize('joinInGroup', "Join in Group")) }, group: '6_split_in_group', order: 10, when: SideBySideEditorActiveContext });
MenuRegistry.appendMenuItem(MenuId.EditorTitle, { command: { id: TOGGLE_DIFF_SIDE_BY_SIDE, title: ( localize('inlineView', "Inline View")), toggled: ( ContextKeyExpr.equals('config.diffEditor.renderSideBySide', false)) }, group: '1_diff', order: 10, when: ( ContextKeyExpr.has('isInDiffEditor')) });
MenuRegistry.appendMenuItem(MenuId.EditorTitle, { command: { id: SHOW_EDITORS_IN_GROUP, title: ( localize('showOpenedEditors', "Show Opened Editors")) }, group: '3_open', order: 10 });
MenuRegistry.appendMenuItem(MenuId.EditorTitle, { command: { id: CLOSE_EDITORS_IN_GROUP_COMMAND_ID, title: ( localize('closeAll', "Close All")) }, group: '5_close', order: 10 });
MenuRegistry.appendMenuItem(MenuId.EditorTitle, { command: { id: CLOSE_SAVED_EDITORS_COMMAND_ID, title: ( localize('closeAllSaved', "Close Saved")) }, group: '5_close', order: 20 });
MenuRegistry.appendMenuItem(MenuId.EditorTitle, { command: { id: ToggleTabsVisibilityAction.ID, title: ( localize('toggleTabs', "Enable Tabs")), toggled: ( ContextKeyExpr.has('config.workbench.editor.showTabs')) }, group: '7_settings', order: 5, when: ( ( ContextKeyExpr.has('config.workbench.editor.showTabs')).negate())  });
MenuRegistry.appendMenuItem(MenuId.EditorTitle, { command: { id: TOGGLE_KEEP_EDITORS_COMMAND_ID, title: ( localize('togglePreviewMode', "Enable Preview Editors")), toggled: ( ContextKeyExpr.has('config.workbench.editor.enablePreview')) }, group: '7_settings', order: 10 });
MenuRegistry.appendMenuItem(MenuId.EditorTitle, { command: { id: TOGGLE_LOCK_GROUP_COMMAND_ID, title: ( localize('lockGroup', "Lock Group")), toggled: ActiveEditorGroupLockedContext }, group: '8_lock', order: 10, when: MultipleEditorGroupsContext });
function appendEditorToolItem(primary, when, order, alternative, precondition) {
    const item = {
        command: {
            id: primary.id,
            title: primary.title,
            icon: primary.icon,
            precondition
        },
        group: 'navigation',
        when,
        order
    };
    if (alternative) {
        item.alt = {
            id: alternative.id,
            title: alternative.title,
            icon: alternative.icon
        };
    }
    MenuRegistry.appendMenuItem(MenuId.EditorTitle, item);
}
const SPLIT_ORDER = 100000;
const CLOSE_ORDER = 1000000;
appendEditorToolItem({
    id: SplitEditorAction.ID,
    title: ( localize('splitEditorRight', "Split Editor Right")),
    icon: Codicon.splitHorizontal
}, ContextKeyExpr.not('splitEditorsVertically'), SPLIT_ORDER, {
    id: SPLIT_EDITOR_DOWN,
    title: ( localize('splitEditorDown', "Split Editor Down")),
    icon: Codicon.splitVertical
});
appendEditorToolItem({
    id: SplitEditorAction.ID,
    title: ( localize('splitEditorDown', "Split Editor Down")),
    icon: Codicon.splitVertical
}, ( ContextKeyExpr.has('splitEditorsVertically')), SPLIT_ORDER, {
    id: SPLIT_EDITOR_RIGHT,
    title: ( localize('splitEditorRight', "Split Editor Right")),
    icon: Codicon.splitHorizontal
});
appendEditorToolItem({
    id: TOGGLE_SPLIT_EDITOR_IN_GROUP_LAYOUT,
    title: ( localize('toggleSplitEditorInGroupLayout', "Toggle Layout")),
    icon: Codicon.editorLayout
}, SideBySideEditorActiveContext, SPLIT_ORDER - 1);
appendEditorToolItem({
    id: CLOSE_EDITOR_COMMAND_ID,
    title: ( localize('close', "Close")),
    icon: Codicon.close
}, ( ContextKeyExpr.and(( EditorTabsVisibleContext.toNegated()), ( ActiveEditorDirtyContext.toNegated()), ( ActiveEditorStickyContext.toNegated()))), CLOSE_ORDER, {
    id: CLOSE_EDITORS_IN_GROUP_COMMAND_ID,
    title: ( localize('closeAll', "Close All")),
    icon: Codicon.closeAll
});
appendEditorToolItem({
    id: CLOSE_EDITOR_COMMAND_ID,
    title: ( localize('close', "Close")),
    icon: Codicon.closeDirty
}, ( ContextKeyExpr.and(( EditorTabsVisibleContext.toNegated()), ActiveEditorDirtyContext, ( ActiveEditorStickyContext.toNegated()))), CLOSE_ORDER, {
    id: CLOSE_EDITORS_IN_GROUP_COMMAND_ID,
    title: ( localize('closeAll', "Close All")),
    icon: Codicon.closeAll
});
appendEditorToolItem({
    id: UNPIN_EDITOR_COMMAND_ID,
    title: ( localize('unpin', "Unpin")),
    icon: Codicon.pinned
}, ( ContextKeyExpr.and(( EditorTabsVisibleContext.toNegated()), ( ActiveEditorDirtyContext.toNegated()), ActiveEditorStickyContext)), CLOSE_ORDER, {
    id: CLOSE_EDITOR_COMMAND_ID,
    title: ( localize('close', "Close")),
    icon: Codicon.close
});
appendEditorToolItem({
    id: UNPIN_EDITOR_COMMAND_ID,
    title: ( localize('unpin', "Unpin")),
    icon: Codicon.pinnedDirty
}, ( ContextKeyExpr.and(( EditorTabsVisibleContext.toNegated()), ActiveEditorDirtyContext, ActiveEditorStickyContext)), CLOSE_ORDER, {
    id: CLOSE_EDITOR_COMMAND_ID,
    title: ( localize('close', "Close")),
    icon: Codicon.close
});
appendEditorToolItem({
    id: UNLOCK_GROUP_COMMAND_ID,
    title: ( localize('unlockEditorGroup', "Unlock Group")),
    icon: Codicon.lock
}, ActiveEditorGroupLockedContext, CLOSE_ORDER - 1);
const previousChangeIcon = registerIcon('diff-editor-previous-change', Codicon.arrowUp, ( localize(
    'previousChangeIcon',
    'Icon for the previous change action in the diff editor.'
)));
const nextChangeIcon = registerIcon('diff-editor-next-change', Codicon.arrowDown, ( localize('nextChangeIcon', 'Icon for the next change action in the diff editor.')));
const toggleWhitespace = registerIcon('diff-editor-toggle-whitespace', Codicon.whitespace, ( localize(
    'toggleWhitespace',
    'Icon for the toggle whitespace action in the diff editor.'
)));
appendEditorToolItem({
    id: GOTO_PREVIOUS_CHANGE,
    title: ( localize('navigate.prev.label', "Previous Change")),
    icon: previousChangeIcon
}, TextCompareEditorActiveContext, 10);
appendEditorToolItem({
    id: GOTO_NEXT_CHANGE,
    title: ( localize('navigate.next.label', "Next Change")),
    icon: nextChangeIcon
}, TextCompareEditorActiveContext, 11);
appendEditorToolItem({
    id: TOGGLE_DIFF_IGNORE_TRIM_WHITESPACE,
    title: ( localize(
        'ignoreTrimWhitespace.label',
        "Ignore Leading/Trailing Whitespace Differences"
    )),
    icon: toggleWhitespace
}, ( ContextKeyExpr.and(TextCompareEditorActiveContext, ( ContextKeyExpr.notEquals('config.diffEditor.ignoreTrimWhitespace', true)))), 20);
appendEditorToolItem({
    id: TOGGLE_DIFF_IGNORE_TRIM_WHITESPACE,
    title: ( localize('showTrimWhitespace.label', "Show Leading/Trailing Whitespace Differences")),
    icon: ThemeIcon.modify(toggleWhitespace, 'disabled')
}, ( ContextKeyExpr.and(TextCompareEditorActiveContext, ( ContextKeyExpr.notEquals('config.diffEditor.ignoreTrimWhitespace', false)))), 20);
MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: KEEP_EDITOR_COMMAND_ID, title: { value: ( localize('keepEditor', "Keep Editor")), original: 'Keep Editor' }, category: Categories.View }, when: ( ContextKeyExpr.has('config.workbench.editor.enablePreview')) });
MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: PIN_EDITOR_COMMAND_ID, title: { value: ( localize('pinEditor', "Pin Editor")), original: 'Pin Editor' }, category: Categories.View } });
MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: UNPIN_EDITOR_COMMAND_ID, title: { value: ( localize('unpinEditor', "Unpin Editor")), original: 'Unpin Editor' }, category: Categories.View } });
MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: CLOSE_EDITOR_COMMAND_ID, title: { value: ( localize('closeEditor', "Close Editor")), original: 'Close Editor' }, category: Categories.View } });
MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: CLOSE_PINNED_EDITOR_COMMAND_ID, title: { value: ( localize('closePinnedEditor', "Close Pinned Editor")), original: 'Close Pinned Editor' }, category: Categories.View } });
MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: CLOSE_EDITORS_IN_GROUP_COMMAND_ID, title: { value: ( localize('closeEditorsInGroup', "Close All Editors in Group")), original: 'Close All Editors in Group' }, category: Categories.View } });
MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: CLOSE_SAVED_EDITORS_COMMAND_ID, title: { value: ( localize('closeSavedEditors', "Close Saved Editors in Group")), original: 'Close Saved Editors in Group' }, category: Categories.View } });
MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: CLOSE_OTHER_EDITORS_IN_GROUP_COMMAND_ID, title: { value: ( localize('closeOtherEditors', "Close Other Editors in Group")), original: 'Close Other Editors in Group' }, category: Categories.View } });
MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: CLOSE_EDITORS_TO_THE_RIGHT_COMMAND_ID, title: { value: ( localize('closeRightEditors', "Close Editors to the Right in Group")), original: 'Close Editors to the Right in Group' }, category: Categories.View }, when: ( ActiveEditorLastInGroupContext.toNegated()) });
MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: CLOSE_EDITORS_AND_GROUP_COMMAND_ID, title: { value: ( localize('closeEditorGroup', "Close Editor Group")), original: 'Close Editor Group' }, category: Categories.View }, when: MultipleEditorGroupsContext });
MenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: REOPEN_WITH_COMMAND_ID, title: { value: ( localize('reopenWith', "Reopen Editor With...")), original: 'Reopen Editor With...' }, category: Categories.View }, when: ActiveEditorAvailableEditorIdsContext });
MenuRegistry.appendMenuItem(MenuId.MenubarRecentMenu, {
    group: '1_editor',
    command: {
        id: ReopenClosedEditorAction.ID,
        title: ( localize(
            { key: 'miReopenClosedEditor', comment: ['&& denotes a mnemonic'] },
            "&&Reopen Closed Editor"
        )),
        precondition: ( ContextKeyExpr.has('canReopenClosedEditor'))
    },
    order: 1
});
MenuRegistry.appendMenuItem(MenuId.MenubarRecentMenu, {
    group: 'z_clear',
    command: {
        id: ClearRecentFilesAction.ID,
        title: ( localize(
            { key: 'miClearRecentOpen', comment: ['&& denotes a mnemonic'] },
            "&&Clear Recently Opened"
        ))
    },
    order: 1
});
MenuRegistry.appendMenuItem(MenuId.MenubarViewMenu, {
    group: '2_appearance',
    title: ( localize(
        { key: 'miEditorLayout', comment: ['&& denotes a mnemonic'] },
        "Editor &&Layout"
    )),
    submenu: MenuId.MenubarLayoutMenu,
    order: 2
});
MenuRegistry.appendMenuItem(MenuId.MenubarLayoutMenu, {
    group: '1_split',
    command: {
        id: SPLIT_EDITOR_UP,
        title: {
            original: 'Split Up',
            value: ( localize('miSplitEditorUpWithoutMnemonic', "Split Up")),
            mnemonicTitle: ( localize(
                { key: 'miSplitEditorUp', comment: ['&& denotes a mnemonic'] },
                "Split &&Up"
            )),
        }
    },
    order: 1
});
MenuRegistry.appendMenuItem(MenuId.MenubarLayoutMenu, {
    group: '1_split',
    command: {
        id: SPLIT_EDITOR_DOWN,
        title: {
            original: 'Split Down',
            value: ( localize('miSplitEditorDownWithoutMnemonic', "Split Down")),
            mnemonicTitle: ( localize(
                { key: 'miSplitEditorDown', comment: ['&& denotes a mnemonic'] },
                "Split &&Down"
            ))
        }
    },
    order: 2
});
MenuRegistry.appendMenuItem(MenuId.MenubarLayoutMenu, {
    group: '1_split',
    command: {
        id: SPLIT_EDITOR_LEFT,
        title: {
            original: 'Split Left',
            value: ( localize('miSplitEditorLeftWithoutMnemonic', "Split Left")),
            mnemonicTitle: ( localize(
                { key: 'miSplitEditorLeft', comment: ['&& denotes a mnemonic'] },
                "Split &&Left"
            ))
        }
    },
    order: 3
});
MenuRegistry.appendMenuItem(MenuId.MenubarLayoutMenu, {
    group: '1_split',
    command: {
        id: SPLIT_EDITOR_RIGHT,
        title: {
            original: 'Split Right',
            value: ( localize('miSplitEditorRightWithoutMnemonic', "Split Right")),
            mnemonicTitle: ( localize(
                { key: 'miSplitEditorRight', comment: ['&& denotes a mnemonic'] },
                "Split &&Right"
            ))
        }
    },
    order: 4
});
MenuRegistry.appendMenuItem(MenuId.MenubarLayoutMenu, {
    group: '2_split_in_group',
    command: {
        id: SPLIT_EDITOR_IN_GROUP,
        title: {
            original: 'Split in Group',
            value: ( localize('miSplitEditorInGroupWithoutMnemonic', "Split in Group")),
            mnemonicTitle: ( localize(
                { key: 'miSplitEditorInGroup', comment: ['&& denotes a mnemonic'] },
                "Split in &&Group"
            ))
        }
    },
    when: ActiveEditorCanSplitInGroupContext,
    order: 1
});
MenuRegistry.appendMenuItem(MenuId.MenubarLayoutMenu, {
    group: '2_split_in_group',
    command: {
        id: JOIN_EDITOR_IN_GROUP,
        title: {
            original: 'Join in Group',
            value: ( localize('miJoinEditorInGroupWithoutMnemonic', "Join in Group")),
            mnemonicTitle: ( localize(
                { key: 'miJoinEditorInGroup', comment: ['&& denotes a mnemonic'] },
                "Join in &&Group"
            ))
        }
    },
    when: SideBySideEditorActiveContext,
    order: 1
});
MenuRegistry.appendMenuItem(MenuId.MenubarLayoutMenu, {
    group: '3_layouts',
    command: {
        id: EditorLayoutSingleAction.ID,
        title: {
            original: 'Single',
            value: ( localize('miSingleColumnEditorLayoutWithoutMnemonic', "Single")),
            mnemonicTitle: ( localize(
                { key: 'miSingleColumnEditorLayout', comment: ['&& denotes a mnemonic'] },
                "&&Single"
            ))
        }
    },
    order: 1
});
MenuRegistry.appendMenuItem(MenuId.MenubarLayoutMenu, {
    group: '3_layouts',
    command: {
        id: EditorLayoutTwoColumnsAction.ID,
        title: {
            original: 'Two Columns',
            value: ( localize('miTwoColumnsEditorLayoutWithoutMnemonic', "Two Columns")),
            mnemonicTitle: ( localize(
                { key: 'miTwoColumnsEditorLayout', comment: ['&& denotes a mnemonic'] },
                "&&Two Columns"
            ))
        }
    },
    order: 3
});
MenuRegistry.appendMenuItem(MenuId.MenubarLayoutMenu, {
    group: '3_layouts',
    command: {
        id: EditorLayoutThreeColumnsAction.ID,
        title: {
            original: 'Three Columns',
            value: ( localize('miThreeColumnsEditorLayoutWithoutMnemonic', "Three Columns")),
            mnemonicTitle: ( localize(
                { key: 'miThreeColumnsEditorLayout', comment: ['&& denotes a mnemonic'] },
                "T&&hree Columns"
            ))
        }
    },
    order: 4
});
MenuRegistry.appendMenuItem(MenuId.MenubarLayoutMenu, {
    group: '3_layouts',
    command: {
        id: EditorLayoutTwoRowsAction.ID,
        title: {
            original: 'Two Rows',
            value: ( localize('miTwoRowsEditorLayoutWithoutMnemonic', "Two Rows")),
            mnemonicTitle: ( localize(
                { key: 'miTwoRowsEditorLayout', comment: ['&& denotes a mnemonic'] },
                "T&&wo Rows"
            ))
        }
    },
    order: 5
});
MenuRegistry.appendMenuItem(MenuId.MenubarLayoutMenu, {
    group: '3_layouts',
    command: {
        id: EditorLayoutThreeRowsAction.ID,
        title: {
            original: 'Three Rows',
            value: ( localize('miThreeRowsEditorLayoutWithoutMnemonic', "Three Rows")),
            mnemonicTitle: ( localize(
                { key: 'miThreeRowsEditorLayout', comment: ['&& denotes a mnemonic'] },
                "Three &&Rows"
            ))
        }
    },
    order: 6
});
MenuRegistry.appendMenuItem(MenuId.MenubarLayoutMenu, {
    group: '3_layouts',
    command: {
        id: EditorLayoutTwoByTwoGridAction.ID,
        title: {
            original: 'Grid (2x2)',
            value: ( localize('miTwoByTwoGridEditorLayoutWithoutMnemonic', "Grid (2x2)")),
            mnemonicTitle: ( localize(
                { key: 'miTwoByTwoGridEditorLayout', comment: ['&& denotes a mnemonic'] },
                "&&Grid (2x2)"
            ))
        }
    },
    order: 7
});
MenuRegistry.appendMenuItem(MenuId.MenubarLayoutMenu, {
    group: '3_layouts',
    command: {
        id: EditorLayoutTwoRowsRightAction.ID,
        title: {
            original: 'Two Rows Right',
            value: ( localize('miTwoRowsRightEditorLayoutWithoutMnemonic', "Two Rows Right")),
            mnemonicTitle: ( localize(
                { key: 'miTwoRowsRightEditorLayout', comment: ['&& denotes a mnemonic'] },
                "Two R&&ows Right"
            ))
        }
    },
    order: 8
});
MenuRegistry.appendMenuItem(MenuId.MenubarLayoutMenu, {
    group: '3_layouts',
    command: {
        id: EditorLayoutTwoColumnsBottomAction.ID,
        title: {
            original: 'Two Columns Bottom',
            value: ( localize('miTwoColumnsBottomEditorLayoutWithoutMnemonic', "Two Columns Bottom")),
            mnemonicTitle: ( localize(
                { key: 'miTwoColumnsBottomEditorLayout', comment: ['&& denotes a mnemonic'] },
                "Two &&Columns Bottom"
            ))
        }
    },
    order: 9
});
MenuRegistry.appendMenuItem(MenuId.MenubarGoMenu, {
    group: '1_history_nav',
    command: {
        id: 'workbench.action.navigateToLastEditLocation',
        title: ( localize(
            { key: 'miLastEditLocation', comment: ['&& denotes a mnemonic'] },
            "&&Last Edit Location"
        )),
        precondition: ( ContextKeyExpr.has('canNavigateToLastEditLocation'))
    },
    order: 3
});
MenuRegistry.appendMenuItem(MenuId.MenubarSwitchEditorMenu, {
    group: '1_sideBySide',
    command: {
        id: FOCUS_FIRST_SIDE_EDITOR,
        title: ( localize(
            { key: 'miFirstSideEditor', comment: ['&& denotes a mnemonic'] },
            "&&First Side in Editor"
        ))
    },
    when: ( ContextKeyExpr.or(SideBySideEditorActiveContext, TextCompareEditorActiveContext)),
    order: 1
});
MenuRegistry.appendMenuItem(MenuId.MenubarSwitchEditorMenu, {
    group: '1_sideBySide',
    command: {
        id: FOCUS_SECOND_SIDE_EDITOR,
        title: ( localize(
            { key: 'miSecondSideEditor', comment: ['&& denotes a mnemonic'] },
            "&&Second Side in Editor"
        ))
    },
    when: ( ContextKeyExpr.or(SideBySideEditorActiveContext, TextCompareEditorActiveContext)),
    order: 2
});
MenuRegistry.appendMenuItem(MenuId.MenubarSwitchEditorMenu, {
    group: '2_any',
    command: {
        id: 'workbench.action.nextEditor',
        title: ( localize(
            { key: 'miNextEditor', comment: ['&& denotes a mnemonic'] },
            "&&Next Editor"
        ))
    },
    order: 1
});
MenuRegistry.appendMenuItem(MenuId.MenubarSwitchEditorMenu, {
    group: '2_any',
    command: {
        id: 'workbench.action.previousEditor',
        title: ( localize(
            { key: 'miPreviousEditor', comment: ['&& denotes a mnemonic'] },
            "&&Previous Editor"
        ))
    },
    order: 2
});
MenuRegistry.appendMenuItem(MenuId.MenubarSwitchEditorMenu, {
    group: '3_any_used',
    command: {
        id: 'workbench.action.openNextRecentlyUsedEditor',
        title: ( localize(
            { key: 'miNextRecentlyUsedEditor', comment: ['&& denotes a mnemonic'] },
            "&&Next Used Editor"
        ))
    },
    order: 1
});
MenuRegistry.appendMenuItem(MenuId.MenubarSwitchEditorMenu, {
    group: '3_any_used',
    command: {
        id: 'workbench.action.openPreviousRecentlyUsedEditor',
        title: ( localize(
            { key: 'miPreviousRecentlyUsedEditor', comment: ['&& denotes a mnemonic'] },
            "&&Previous Used Editor"
        ))
    },
    order: 2
});
MenuRegistry.appendMenuItem(MenuId.MenubarSwitchEditorMenu, {
    group: '4_group',
    command: {
        id: 'workbench.action.nextEditorInGroup',
        title: ( localize(
            { key: 'miNextEditorInGroup', comment: ['&& denotes a mnemonic'] },
            "&&Next Editor in Group"
        ))
    },
    order: 1
});
MenuRegistry.appendMenuItem(MenuId.MenubarSwitchEditorMenu, {
    group: '4_group',
    command: {
        id: 'workbench.action.previousEditorInGroup',
        title: ( localize(
            { key: 'miPreviousEditorInGroup', comment: ['&& denotes a mnemonic'] },
            "&&Previous Editor in Group"
        ))
    },
    order: 2
});
MenuRegistry.appendMenuItem(MenuId.MenubarSwitchEditorMenu, {
    group: '5_group_used',
    command: {
        id: 'workbench.action.openNextRecentlyUsedEditorInGroup',
        title: ( localize(
            { key: 'miNextUsedEditorInGroup', comment: ['&& denotes a mnemonic'] },
            "&&Next Used Editor in Group"
        ))
    },
    order: 1
});
MenuRegistry.appendMenuItem(MenuId.MenubarSwitchEditorMenu, {
    group: '5_group_used',
    command: {
        id: 'workbench.action.openPreviousRecentlyUsedEditorInGroup',
        title: ( localize(
            { key: 'miPreviousUsedEditorInGroup', comment: ['&& denotes a mnemonic'] },
            "&&Previous Used Editor in Group"
        ))
    },
    order: 2
});
MenuRegistry.appendMenuItem(MenuId.MenubarGoMenu, {
    group: '2_editor_nav',
    title: ( localize(
        { key: 'miSwitchEditor', comment: ['&& denotes a mnemonic'] },
        "Switch &&Editor"
    )),
    submenu: MenuId.MenubarSwitchEditorMenu,
    order: 1
});
MenuRegistry.appendMenuItem(MenuId.MenubarSwitchGroupMenu, {
    group: '1_focus_index',
    command: {
        id: 'workbench.action.focusFirstEditorGroup',
        title: ( localize(
            { key: 'miFocusFirstGroup', comment: ['&& denotes a mnemonic'] },
            "Group &&1"
        ))
    },
    order: 1
});
MenuRegistry.appendMenuItem(MenuId.MenubarSwitchGroupMenu, {
    group: '1_focus_index',
    command: {
        id: 'workbench.action.focusSecondEditorGroup',
        title: ( localize(
            { key: 'miFocusSecondGroup', comment: ['&& denotes a mnemonic'] },
            "Group &&2"
        ))
    },
    order: 2
});
MenuRegistry.appendMenuItem(MenuId.MenubarSwitchGroupMenu, {
    group: '1_focus_index',
    command: {
        id: 'workbench.action.focusThirdEditorGroup',
        title: ( localize(
            { key: 'miFocusThirdGroup', comment: ['&& denotes a mnemonic'] },
            "Group &&3"
        )),
        precondition: MultipleEditorGroupsContext
    },
    order: 3
});
MenuRegistry.appendMenuItem(MenuId.MenubarSwitchGroupMenu, {
    group: '1_focus_index',
    command: {
        id: 'workbench.action.focusFourthEditorGroup',
        title: ( localize(
            { key: 'miFocusFourthGroup', comment: ['&& denotes a mnemonic'] },
            "Group &&4"
        )),
        precondition: MultipleEditorGroupsContext
    },
    order: 4
});
MenuRegistry.appendMenuItem(MenuId.MenubarSwitchGroupMenu, {
    group: '1_focus_index',
    command: {
        id: 'workbench.action.focusFifthEditorGroup',
        title: ( localize(
            { key: 'miFocusFifthGroup', comment: ['&& denotes a mnemonic'] },
            "Group &&5"
        )),
        precondition: MultipleEditorGroupsContext
    },
    order: 5
});
MenuRegistry.appendMenuItem(MenuId.MenubarSwitchGroupMenu, {
    group: '2_next_prev',
    command: {
        id: 'workbench.action.focusNextGroup',
        title: ( localize({ key: 'miNextGroup', comment: ['&& denotes a mnemonic'] }, "&&Next Group")),
        precondition: MultipleEditorGroupsContext
    },
    order: 1
});
MenuRegistry.appendMenuItem(MenuId.MenubarSwitchGroupMenu, {
    group: '2_next_prev',
    command: {
        id: 'workbench.action.focusPreviousGroup',
        title: ( localize(
            { key: 'miPreviousGroup', comment: ['&& denotes a mnemonic'] },
            "&&Previous Group"
        )),
        precondition: MultipleEditorGroupsContext
    },
    order: 2
});
MenuRegistry.appendMenuItem(MenuId.MenubarSwitchGroupMenu, {
    group: '3_directional',
    command: {
        id: 'workbench.action.focusLeftGroup',
        title: ( localize(
            { key: 'miFocusLeftGroup', comment: ['&& denotes a mnemonic'] },
            "Group &&Left"
        )),
        precondition: MultipleEditorGroupsContext
    },
    order: 1
});
MenuRegistry.appendMenuItem(MenuId.MenubarSwitchGroupMenu, {
    group: '3_directional',
    command: {
        id: 'workbench.action.focusRightGroup',
        title: ( localize(
            { key: 'miFocusRightGroup', comment: ['&& denotes a mnemonic'] },
            "Group &&Right"
        )),
        precondition: MultipleEditorGroupsContext
    },
    order: 2
});
MenuRegistry.appendMenuItem(MenuId.MenubarSwitchGroupMenu, {
    group: '3_directional',
    command: {
        id: 'workbench.action.focusAboveGroup',
        title: ( localize(
            { key: 'miFocusAboveGroup', comment: ['&& denotes a mnemonic'] },
            "Group &&Above"
        )),
        precondition: MultipleEditorGroupsContext
    },
    order: 3
});
MenuRegistry.appendMenuItem(MenuId.MenubarSwitchGroupMenu, {
    group: '3_directional',
    command: {
        id: 'workbench.action.focusBelowGroup',
        title: ( localize(
            { key: 'miFocusBelowGroup', comment: ['&& denotes a mnemonic'] },
            "Group &&Below"
        )),
        precondition: MultipleEditorGroupsContext
    },
    order: 4
});
MenuRegistry.appendMenuItem(MenuId.MenubarGoMenu, {
    group: '2_editor_nav',
    title: ( localize(
        { key: 'miSwitchGroup', comment: ['&& denotes a mnemonic'] },
        "Switch &&Group"
    )),
    submenu: MenuId.MenubarSwitchGroupMenu,
    order: 2
});
