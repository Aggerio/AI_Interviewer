import { Event } from '../../../../base/common/event.js';
import { IDisposable } from '../../../../base/common/lifecycle.js';
import { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';
import { IContextKeyService } from '../../../../platform/contextkey/common/contextkey.js';
import { IConfigurationService } from '../../../../platform/configuration/common/configuration.js';
import { IThemeService } from '../../../../platform/theme/common/themeService.js';
import { IContextMenuService } from '../../../../platform/contextview/browser/contextView.js';
import { IStorageService } from '../../../../platform/storage/common/storage.js';
import { IWorkspaceContextService } from '../../../../platform/workspace/common/workspace.js';
import { IWorkbenchLayoutService } from '../../../services/layout/browser/layoutService.js';
import { Part } from '../../part.js';
import { IStatusbarService, IStatusbarEntry, StatusbarAlignment, IStatusbarEntryLocation, IStatusbarEntryPriority, IStatusbarEntryAccessor, IStatusbarStyleOverride } from '../../../services/statusbar/browser/statusbar.js';
import { IHoverService } from '../../../services/hover/browser/hover.js';

declare class StatusbarPart extends Part implements IStatusbarService {
    private readonly instantiationService;
    private readonly contextService;
    private readonly storageService;
    private contextMenuService;
    private readonly contextKeyService;
    private readonly hoverService;
    private readonly configurationService;
    readonly _serviceBrand: undefined;
    readonly minimumWidth: number;
    readonly maximumWidth: number;
    readonly minimumHeight: number;
    readonly maximumHeight: number;
    private styleElement;
    private pendingEntries;
    private readonly viewModel;
    readonly onDidChangeEntryVisibility: Event<{
        id: string;
        visible: boolean;
    }>;
    private leftItemsContainer;
    private rightItemsContainer;
    private readonly hoverDelegate;
    private readonly compactEntriesDisposable;
    private readonly styleOverrides;
    constructor(instantiationService: IInstantiationService, themeService: IThemeService, contextService: IWorkspaceContextService, storageService: IStorageService, layoutService: IWorkbenchLayoutService, contextMenuService: IContextMenuService, contextKeyService: IContextKeyService, hoverService: IHoverService, configurationService: IConfigurationService);
    private registerListeners;
    addEntry(entry: IStatusbarEntry, id: string, alignment: StatusbarAlignment, priorityOrLocation?: number | IStatusbarEntryLocation | IStatusbarEntryPriority): IStatusbarEntryAccessor;
    private doAddPendingEntry;
    private doAddEntry;
    private doCreateStatusItem;
    private doAddOrRemoveModelEntry;
    isEntryVisible(id: string): boolean;
    updateEntryVisibility(id: string, visible: boolean): void;
    focusNextEntry(): void;
    focusPreviousEntry(): void;
    isEntryFocused(): boolean;
    focus(preserveEntryFocus?: boolean): void;
    protected createContentArea(parent: HTMLElement): HTMLElement;
    private createInitialStatusbarEntries;
    private appendStatusbarEntries;
    private appendStatusbarEntry;
    private updateCompactEntries;
    private showContextMenu;
    private getContextMenuActions;
    updateStyles(): void;
    layout(width: number, height: number, top: number, left: number): void;
    overrideStyle(style: IStatusbarStyleOverride): IDisposable;
    toJSON(): object;
}

export { StatusbarPart };
