import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { IClipboardService } from 'monaco-editor/esm/vs/platform/clipboard/common/clipboardService.js';
import '../../../../../../override/vs/platform/dialogs/common/dialogs.js';
import { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';
import { ILayoutService } from 'monaco-editor/esm/vs/platform/layout/browser/layoutService.js';
import { ILogService } from 'monaco-editor/esm/vs/platform/log/common/log.js';
import { IProductService } from 'monaco-editor/esm/vs/platform/product/common/productService.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { Extensions } from '../../../common/contributions.js';
import { BrowserDialogHandler } from './dialogHandler.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';
let DialogHandlerContribution = class DialogHandlerContribution extends Disposable {
    constructor(dialogService, logService, layoutService, keybindingService, instantiationService, productService, clipboardService) {
        super();
        this.dialogService = dialogService;
        this.impl = ( new BrowserDialogHandler(
            logService,
            layoutService,
            keybindingService,
            instantiationService,
            productService,
            clipboardService
        ));
        this.model = this.dialogService.model;
        this._register(this.model.onWillShowDialog(() => {
            if (!this.currentDialog) {
                this.processDialogs();
            }
        }));
        this.processDialogs();
    }
    async processDialogs() {
        while (this.model.dialogs.length) {
            this.currentDialog = this.model.dialogs[0];
            let result = undefined;
            if (this.currentDialog.args.confirmArgs) {
                const args = this.currentDialog.args.confirmArgs;
                result = await this.impl.confirm(args.confirmation);
            }
            else if (this.currentDialog.args.inputArgs) {
                const args = this.currentDialog.args.inputArgs;
                result = await this.impl.input(args.input);
            }
            else if (this.currentDialog.args.promptArgs) {
                const args = this.currentDialog.args.promptArgs;
                result = await this.impl.prompt(args.prompt);
            }
            else {
                await this.impl.about();
            }
            this.currentDialog.close(result);
            this.currentDialog = undefined;
        }
    }
};
DialogHandlerContribution = ( __decorate([
    ( __param(0, IDialogService)),
    ( __param(1, ILogService)),
    ( __param(2, ILayoutService)),
    ( __param(3, IKeybindingService)),
    ( __param(4, IInstantiationService)),
    ( __param(5, IProductService)),
    ( __param(6, IClipboardService))
], DialogHandlerContribution));
const workbenchRegistry = ( Registry.as(Extensions.Workbench));
workbenchRegistry.registerWorkbenchContribution(DialogHandlerContribution, 1 );
export { DialogHandlerContribution };
