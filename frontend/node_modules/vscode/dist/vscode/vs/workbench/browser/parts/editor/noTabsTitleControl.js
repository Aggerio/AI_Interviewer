import './media/notabstitlecontrol.css.js';
import { EditorResourceAccessor, SideBySideEditor } from '../../../common/editor.js';
import { TitleControl } from './titleControl.js';
import { ResourceLabel } from '../../labels.js';
import { TAB_ACTIVE_FOREGROUND, TAB_UNFOCUSED_ACTIVE_FOREGROUND } from '../../../common/theme.js';
import { Gesture, EventType as EventType$1 } from 'monaco-editor/esm/vs/base/browser/touch.js';
import { addDisposableListener, EventType, EventHelper, isAncestor, Dimension } from 'monaco-editor/esm/vs/base/browser/dom.js';
import { CLOSE_EDITOR_COMMAND_ID, UNLOCK_GROUP_COMMAND_ID } from './editorCommands.js';
import { Color } from 'monaco-editor/esm/vs/base/common/color.js';
import { assertIsDefined, withNullAsUndefined, assertAllDefined } from 'monaco-editor/esm/vs/base/common/types.js';
import { equals } from 'monaco-editor/esm/vs/base/common/objects.js';
import { toDisposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { defaultBreadcrumbsWidgetStyles } from 'monaco-editor/esm/vs/platform/theme/browser/defaultStyles.js';
class NoTabsTitleControl extends TitleControl {
    constructor() {
        super(...arguments);
        this.activeLabel = Object.create(null);
    }
    static { this.HEIGHT = 35; }
    create(parent) {
        const titleContainer = this.titleContainer = parent;
        titleContainer.draggable = true;
        this.registerContainerListeners(titleContainer);
        this._register(Gesture.addTarget(titleContainer));
        const labelContainer = document.createElement('div');
        labelContainer.classList.add('label-container');
        titleContainer.appendChild(labelContainer);
        this.editorLabel = this._register(this.instantiationService.createInstance(ResourceLabel, labelContainer, undefined)).element;
        this._register(addDisposableListener(this.editorLabel.element, EventType.CLICK, e => this.onTitleLabelClick(e)));
        this.createBreadcrumbsControl(labelContainer, { showFileIcons: false, showSymbolIcons: true, showDecorationColors: false, widgetStyles: { ...defaultBreadcrumbsWidgetStyles, breadcrumbsBackground: ( Color.transparent.toString()) }, showPlaceholder: false });
        titleContainer.classList.toggle('breadcrumbs', Boolean(this.breadcrumbsControl));
        this._register(toDisposable(() => titleContainer.classList.remove('breadcrumbs')));
        const actionsContainer = document.createElement('div');
        actionsContainer.classList.add('title-actions');
        titleContainer.appendChild(actionsContainer);
        this.createEditorActionsToolBar(actionsContainer);
    }
    registerContainerListeners(titleContainer) {
        this.enableGroupDragging(titleContainer);
        this._register(addDisposableListener(titleContainer, EventType.DBLCLICK, e => this.onTitleDoubleClick(e)));
        this._register(addDisposableListener(titleContainer, EventType.AUXCLICK, e => this.onTitleAuxClick(e)));
        this._register(addDisposableListener(titleContainer, EventType$1.Tap, (e) => this.onTitleTap(e)));
        for (const event of [EventType.CONTEXT_MENU, EventType$1.Contextmenu]) {
            this._register(addDisposableListener(titleContainer, event, e => {
                if (this.group.activeEditor) {
                    this.onContextMenu(this.group.activeEditor, e, titleContainer);
                }
            }));
        }
    }
    onTitleLabelClick(e) {
        EventHelper.stop(e, false);
        setTimeout(() => this.quickInputService.quickAccess.show());
    }
    onTitleDoubleClick(e) {
        EventHelper.stop(e);
        this.group.pinEditor();
    }
    onTitleAuxClick(e) {
        if (e.button === 1  && this.group.activeEditor) {
            EventHelper.stop(e, true );
            this.group.closeEditor(this.group.activeEditor);
        }
    }
    onTitleTap(e) {
        const target = e.initialTarget;
        if (!(target instanceof HTMLElement) || !this.editorLabel || !isAncestor(target, this.editorLabel.element)) {
            return;
        }
        setTimeout(() => this.quickInputService.quickAccess.show(), 50);
    }
    openEditor(editor) {
        this.doHandleOpenEditor();
    }
    openEditors(editors) {
        this.doHandleOpenEditor();
    }
    doHandleOpenEditor() {
        const activeEditorChanged = this.ifActiveEditorChanged(() => this.redraw());
        if (!activeEditorChanged) {
            this.ifActiveEditorPropertiesChanged(() => this.redraw());
        }
    }
    beforeCloseEditor(editor) {
    }
    closeEditor(editor) {
        this.ifActiveEditorChanged(() => this.redraw());
    }
    closeEditors(editors) {
        this.ifActiveEditorChanged(() => this.redraw());
    }
    moveEditor(editor, fromIndex, targetIndex) {
        this.ifActiveEditorChanged(() => this.redraw());
    }
    pinEditor(editor) {
        this.ifEditorIsActive(editor, () => this.redraw());
    }
    stickEditor(editor) {
    }
    unstickEditor(editor) {
    }
    setActive(isActive) {
        this.redraw();
    }
    updateEditorLabel(editor) {
        this.ifEditorIsActive(editor, () => this.redraw());
    }
    updateEditorDirty(editor) {
        this.ifEditorIsActive(editor, () => {
            const titleContainer = assertIsDefined(this.titleContainer);
            if (editor.isDirty() && !editor.isSaving()) {
                titleContainer.classList.add('dirty');
            }
            else {
                titleContainer.classList.remove('dirty');
            }
        });
    }
    updateOptions(oldOptions, newOptions) {
        if (oldOptions.labelFormat !== newOptions.labelFormat || !equals(oldOptions.decorations, newOptions.decorations)) {
            this.redraw();
        }
    }
    updateStyles() {
        this.redraw();
    }
    handleBreadcrumbsEnablementChange() {
        const titleContainer = assertIsDefined(this.titleContainer);
        titleContainer.classList.toggle('breadcrumbs', Boolean(this.breadcrumbsControl));
        this.redraw();
    }
    ifActiveEditorChanged(fn) {
        if (!this.activeLabel.editor && this.group.activeEditor ||
            this.activeLabel.editor && !this.group.activeEditor ||
            (!this.activeLabel.editor || !this.group.isActive(this.activeLabel.editor))
        ) {
            fn();
            return true;
        }
        return false;
    }
    ifActiveEditorPropertiesChanged(fn) {
        if (!this.activeLabel.editor || !this.group.activeEditor) {
            return;
        }
        if (this.activeLabel.pinned !== this.group.isPinned(this.group.activeEditor)) {
            fn();
        }
    }
    ifEditorIsActive(editor, fn) {
        if (this.group.isActive(editor)) {
            fn();
        }
    }
    redraw() {
        const editor = withNullAsUndefined(this.group.activeEditor);
        const options = this.accessor.partOptions;
        const isEditorPinned = editor ? this.group.isPinned(editor) : false;
        const isGroupActive = this.accessor.activeGroup === this.group;
        this.activeLabel = { editor, pinned: isEditorPinned };
        if (this.breadcrumbsControl) {
            if (isGroupActive) {
                this.breadcrumbsControl.update();
                this.breadcrumbsControl.domNode.classList.toggle('preview', !isEditorPinned);
            }
            else {
                this.breadcrumbsControl.hide();
            }
        }
        const [titleContainer, editorLabel] = assertAllDefined(this.titleContainer, this.editorLabel);
        if (!editor) {
            titleContainer.classList.remove('dirty');
            editorLabel.clear();
            this.clearEditorActionsToolbar();
        }
        else {
            this.updateEditorDirty(editor);
            const { labelFormat } = this.accessor.partOptions;
            let description;
            if (this.breadcrumbsControl && !this.breadcrumbsControl.isHidden()) {
                description = '';
            }
            else if (labelFormat === 'default' && !isGroupActive) {
                description = '';
            }
            else {
                description = editor.getDescription(this.getVerbosity(labelFormat)) || '';
            }
            let title = editor.getTitle(2 );
            if (description === title) {
                title = '';
            }
            editorLabel.setResource({
                resource: EditorResourceAccessor.getOriginalUri(editor, { supportSideBySide: SideBySideEditor.BOTH }),
                name: editor.getName(),
                description
            }, {
                title,
                italic: !isEditorPinned,
                extraClasses: ['no-tabs', 'title-label'].concat(editor.getLabelExtraClasses()),
                fileDecorations: {
                    colors: Boolean(options.decorations?.colors),
                    badges: Boolean(options.decorations?.badges)
                },
            });
            if (isGroupActive) {
                titleContainer.style.color = this.getColor(TAB_ACTIVE_FOREGROUND) || '';
            }
            else {
                titleContainer.style.color = this.getColor(TAB_UNFOCUSED_ACTIVE_FOREGROUND) || '';
            }
            this.updateEditorActionsToolbar();
        }
    }
    getVerbosity(style) {
        switch (style) {
            case 'short': return 0 ;
            case 'long': return 2 ;
            default: return 1 ;
        }
    }
    prepareEditorActions(editorActions) {
        const isGroupActive = this.accessor.activeGroup === this.group;
        if (isGroupActive) {
            return editorActions;
        }
        else {
            return {
                primary: editorActions.primary.filter(action => action.id === CLOSE_EDITOR_COMMAND_ID || action.id === UNLOCK_GROUP_COMMAND_ID),
                secondary: editorActions.secondary
            };
        }
    }
    getHeight() {
        return {
            total: NoTabsTitleControl.HEIGHT,
            offset: 0
        };
    }
    layout(dimensions) {
        this.breadcrumbsControl?.layout(undefined);
        return ( new Dimension(dimensions.container.width, this.getHeight().total));
    }
}
export { NoTabsTitleControl };
