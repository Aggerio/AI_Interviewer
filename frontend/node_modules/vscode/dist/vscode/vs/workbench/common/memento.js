import { isEmptyObject } from 'monaco-editor/esm/vs/base/common/types.js';
import { onUnexpectedError } from 'monaco-editor/esm/vs/base/common/errors.js';
class Memento {
    static { this.applicationMementos = ( new Map()); }
    static { this.profileMementos = ( new Map()); }
    static { this.workspaceMementos = ( new Map()); }
    static { this.COMMON_PREFIX = 'memento/'; }
    constructor(id, storageService) {
        this.storageService = storageService;
        this.id = Memento.COMMON_PREFIX + id;
    }
    getMemento(scope, target) {
        switch (scope) {
            case 1 : {
                let workspaceMemento = Memento.workspaceMementos.get(this.id);
                if (!workspaceMemento) {
                    workspaceMemento = ( new ScopedMemento(this.id, scope, target, this.storageService));
                    Memento.workspaceMementos.set(this.id, workspaceMemento);
                }
                return workspaceMemento.getMemento();
            }
            case 0 : {
                let profileMemento = Memento.profileMementos.get(this.id);
                if (!profileMemento) {
                    profileMemento = ( new ScopedMemento(this.id, scope, target, this.storageService));
                    Memento.profileMementos.set(this.id, profileMemento);
                }
                return profileMemento.getMemento();
            }
            case -1 : {
                let applicationMemento = Memento.applicationMementos.get(this.id);
                if (!applicationMemento) {
                    applicationMemento = ( new ScopedMemento(this.id, scope, target, this.storageService));
                    Memento.applicationMementos.set(this.id, applicationMemento);
                }
                return applicationMemento.getMemento();
            }
        }
    }
    saveMemento() {
        Memento.workspaceMementos.get(this.id)?.save();
        Memento.profileMementos.get(this.id)?.save();
        Memento.applicationMementos.get(this.id)?.save();
    }
    static clear(scope) {
        switch (scope) {
            case 1 :
                Memento.workspaceMementos.clear();
                break;
            case 0 :
                Memento.profileMementos.clear();
                break;
            case -1 :
                Memento.applicationMementos.clear();
                break;
        }
    }
}
class ScopedMemento {
    constructor(id, scope, target, storageService) {
        this.id = id;
        this.scope = scope;
        this.target = target;
        this.storageService = storageService;
        this.mementoObj = this.load();
    }
    getMemento() {
        return this.mementoObj;
    }
    load() {
        const memento = this.storageService.get(this.id, this.scope);
        if (memento) {
            try {
                return JSON.parse(memento);
            }
            catch (error) {
                onUnexpectedError(`[memento]: failed to parse contents: ${error} (id: ${this.id}, scope: ${this.scope}, contents: ${memento})`);
            }
        }
        return {};
    }
    save() {
        if (!isEmptyObject(this.mementoObj)) {
            this.storageService.store(this.id, JSON.stringify(this.mementoObj), this.scope, this.target);
        }
        else {
            this.storageService.remove(this.id, this.scope);
        }
    }
}
export { Memento };
