import { DeferredPromise } from 'monaco-editor/esm/vs/base/common/async.js';
import { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
class DialogsModel extends Disposable {
    constructor() {
        super(...arguments);
        this.dialogs = [];
        this._onWillShowDialog = this._register(( new Emitter()));
        this.onWillShowDialog = this._onWillShowDialog.event;
        this._onDidShowDialog = this._register(( new Emitter()));
        this.onDidShowDialog = this._onDidShowDialog.event;
    }
    show(dialog) {
        const promise = ( new DeferredPromise());
        const item = {
            args: dialog,
            close: result => {
                this.dialogs.splice(0, 1);
                promise.complete(result);
                this._onDidShowDialog.fire();
            }
        };
        this.dialogs.push(item);
        this._onWillShowDialog.fire();
        return {
            item,
            result: promise.p
        };
    }
}
export { DialogsModel };
