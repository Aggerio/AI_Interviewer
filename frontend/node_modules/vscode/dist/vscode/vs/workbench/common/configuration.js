import { __decorate, __param } from '../../../../node_modules/tslib/tslib.es6.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { Extensions as Extensions$1 } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { IRemoteAgentService } from '../services/remote/common/remoteAgentService.js';
import { isWindows } from 'monaco-editor/esm/vs/base/common/platform.js';
const workbenchConfigurationNodeBase = ( Object.freeze({
    'id': 'workbench',
    'order': 7,
    'title': ( localize('workbenchConfigurationTitle', "Workbench")),
    'type': 'object',
}));
const securityConfigurationNodeBase = ( Object.freeze({
    'id': 'security',
    'scope': 1 ,
    'title': ( localize('securityConfigurationTitle', "Security")),
    'type': 'object',
    'order': 7
}));
const Extensions = {
    ConfigurationMigration: 'base.contributions.configuration.migration'
};
class ConfigurationMigrationRegistry {
    constructor() {
        this.migrations = [];
        this._onDidRegisterConfigurationMigrations = ( new Emitter());
        this.onDidRegisterConfigurationMigration = this._onDidRegisterConfigurationMigrations.event;
    }
    registerConfigurationMigrations(configurationMigrations) {
        this.migrations.push(...configurationMigrations);
    }
}
const configurationMigrationRegistry = ( new ConfigurationMigrationRegistry());
Registry.add(Extensions.ConfigurationMigration, configurationMigrationRegistry);
let DynamicWorkbenchConfigurationWorkbenchContribution = class DynamicWorkbenchConfigurationWorkbenchContribution extends Disposable {
    constructor(remoteAgentService) {
        super();
        (async () => {
            if (!isWindows) {
                const remoteEnvironment = await remoteAgentService.getEnvironment();
                if (remoteEnvironment?.os !== 1 ) {
                    return;
                }
            }
            const registry = ( Registry.as(Extensions$1.Configuration));
            registry.registerConfiguration({
                ...securityConfigurationNodeBase,
                'properties': {
                    'security.allowedUNCHosts': {
                        'type': 'array',
                        'items': {
                            'type': 'string',
                            'pattern': '^[^\\\\]+$',
                            'patternErrorMessage': ( localize(
                                'security.allowedUNCHosts.patternErrorMessage',
                                'UNC host names must not contain backslashes.'
                            ))
                        },
                        'default': [],
                        'markdownDescription': ( localize(
                            'security.allowedUNCHosts',
                            'A set of UNC host names (without leading or trailing backslash, for example `192.168.0.1` or `my-server`) to allow without user confirmation. If a UNC host is being accessed that is not allowed via this setting or has not been acknowledged via user confirmation, an error will occur and the operation stopped. A restart is required when changing this setting. Find out more about this setting at https://aka.ms/vscode-windows-unc.'
                        )),
                        'scope': 2
                    },
                    'security.restrictUNCAccess': {
                        'type': 'boolean',
                        'default': true,
                        'markdownDescription': ( localize(
                            'security.restrictUNCAccess',
                            'If enabled, only allows access to UNC host names that are allowed by the `#security.allowedUNCHosts#` setting or after user confirmation. Find out more about this setting at https://aka.ms/vscode-windows-unc.'
                        )),
                        'scope': 2
                    }
                }
            });
        })();
    }
};
DynamicWorkbenchConfigurationWorkbenchContribution = ( __decorate([
    ( __param(0, IRemoteAgentService))
], DynamicWorkbenchConfigurationWorkbenchContribution));
export { DynamicWorkbenchConfigurationWorkbenchContribution, Extensions, securityConfigurationNodeBase, workbenchConfigurationNodeBase };
