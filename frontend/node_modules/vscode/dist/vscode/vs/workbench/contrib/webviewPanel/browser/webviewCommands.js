import { EditorContextKeys } from 'monaco-editor/esm/vs/editor/common/editorContextKeys.js';
import * as nls from 'monaco-editor/esm/vs/nls.js';
import { Action2, MenuId } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { ContextKeyExpr } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { Categories } from 'monaco-editor/esm/vs/platform/action/common/actionCommonCategories.js';
import { KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_ENABLED, KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_VISIBLE, KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_FOCUSED, IWebviewService } from '../../webview/browser/webview.js';
import { WebviewEditor } from './webviewEditor.js';
import { WebviewInput } from './webviewEditorInput.js';
import { IEditorService } from '../../../services/editor/common/editorService.js';
const webviewActiveContextKeyExpr = ( ContextKeyExpr.and(( ContextKeyExpr.equals('activeEditor', WebviewEditor.ID)), ( EditorContextKeys.focus.toNegated() )));
class ShowWebViewEditorFindWidgetAction extends Action2 {
    static { this.ID = 'editor.action.webvieweditor.showFind'; }
    static { this.LABEL = ( nls.localize('editor.action.webvieweditor.showFind', "Show find")); }
    constructor() {
        super({
            id: ShowWebViewEditorFindWidgetAction.ID,
            title: ShowWebViewEditorFindWidgetAction.LABEL,
            keybinding: {
                when: ( ContextKeyExpr.and(
                    webviewActiveContextKeyExpr,
                    KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_ENABLED
                )),
                primary: 2048  | 36 ,
                weight: 100
            }
        });
    }
    run(accessor) {
        getActiveWebviewEditor(accessor)?.showFind();
    }
}
class HideWebViewEditorFindCommand extends Action2 {
    static { this.ID = 'editor.action.webvieweditor.hideFind'; }
    static { this.LABEL = ( nls.localize('editor.action.webvieweditor.hideFind', "Stop find")); }
    constructor() {
        super({
            id: HideWebViewEditorFindCommand.ID,
            title: HideWebViewEditorFindCommand.LABEL,
            keybinding: {
                when: ( ContextKeyExpr.and(
                    webviewActiveContextKeyExpr,
                    KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_VISIBLE
                )),
                primary: 9 ,
                weight: 100
            }
        });
    }
    run(accessor) {
        getActiveWebviewEditor(accessor)?.hideFind();
    }
}
class WebViewEditorFindNextCommand extends Action2 {
    static { this.ID = 'editor.action.webvieweditor.findNext'; }
    static { this.LABEL = ( nls.localize('editor.action.webvieweditor.findNext', 'Find next')); }
    constructor() {
        super({
            id: WebViewEditorFindNextCommand.ID,
            title: WebViewEditorFindNextCommand.LABEL,
            keybinding: {
                when: ( ContextKeyExpr.and(
                    webviewActiveContextKeyExpr,
                    KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_FOCUSED
                )),
                primary: 3 ,
                weight: 100
            }
        });
    }
    run(accessor) {
        getActiveWebviewEditor(accessor)?.runFindAction(false);
    }
}
class WebViewEditorFindPreviousCommand extends Action2 {
    static { this.ID = 'editor.action.webvieweditor.findPrevious'; }
    static { this.LABEL = ( nls.localize('editor.action.webvieweditor.findPrevious', 'Find previous')); }
    constructor() {
        super({
            id: WebViewEditorFindPreviousCommand.ID,
            title: WebViewEditorFindPreviousCommand.LABEL,
            keybinding: {
                when: ( ContextKeyExpr.and(
                    webviewActiveContextKeyExpr,
                    KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_FOCUSED
                )),
                primary: 1024  | 3 ,
                weight: 100
            }
        });
    }
    run(accessor) {
        getActiveWebviewEditor(accessor)?.runFindAction(true);
    }
}
class ReloadWebviewAction extends Action2 {
    static { this.ID = 'workbench.action.webview.reloadWebviewAction'; }
    static { this.LABEL = ( nls.localize('refreshWebviewLabel', "Reload Webviews")); }
    constructor() {
        super({
            id: ReloadWebviewAction.ID,
            title: { value: ReloadWebviewAction.LABEL, original: 'Reload Webviews' },
            category: Categories.Developer,
            menu: [{
                    id: MenuId.CommandPalette
                }]
        });
    }
    async run(accessor) {
        const webviewService = accessor.get(IWebviewService);
        for (const webview of webviewService.webviews) {
            webview.reload();
        }
    }
}
function getActiveWebviewEditor(accessor) {
    const editorService = accessor.get(IEditorService);
    const activeEditor = editorService.activeEditor;
    return activeEditor instanceof WebviewInput ? activeEditor.webview : undefined;
}
export { HideWebViewEditorFindCommand, ReloadWebviewAction, ShowWebViewEditorFindWidgetAction, WebViewEditorFindNextCommand, WebViewEditorFindPreviousCommand };
