import { URI } from 'monaco-editor/esm/vs/base/common/uri.js';
import { Range } from 'monaco-editor/esm/vs/editor/common/core/range.js';
import { TestId } from './testId.js';
const isStartControllerTests = (t) => 'runId' in t;
var IRichLocation;
( (function(IRichLocation) {
    IRichLocation.serialize = (location) => ({
        range: location.range.toJSON(),
        uri: location.uri.toJSON(),
    });
    IRichLocation.deserialize = (location) => ({
        range: Range.lift(location.range),
        uri: URI.revive(location.uri),
    });
})(IRichLocation || (IRichLocation = {})));
var ITestErrorMessage;
( (function(ITestErrorMessage) {
    ITestErrorMessage.serialize = (message) => ({
        message: message.message,
        type: 0 ,
        expected: message.expected,
        actual: message.actual,
        location: message.location && IRichLocation.serialize(message.location),
    });
    ITestErrorMessage.deserialize = (message) => ({
        message: message.message,
        type: 0 ,
        expected: message.expected,
        actual: message.actual,
        location: message.location && IRichLocation.deserialize(message.location),
    });
})(ITestErrorMessage || (ITestErrorMessage = {})));
const getMarkId = (marker, start) => `${start ? 's' : 'e'}${marker}`;
var ITestOutputMessage;
( (function(ITestOutputMessage) {
    ITestOutputMessage.serialize = (message) => ({
        message: message.message,
        type: 1 ,
        offset: message.offset,
        length: message.length,
        location: message.location && IRichLocation.serialize(message.location),
    });
    ITestOutputMessage.deserialize = (message) => ({
        message: message.message,
        type: 1 ,
        offset: message.offset,
        length: message.length,
        location: message.location && IRichLocation.deserialize(message.location),
    });
})(ITestOutputMessage || (ITestOutputMessage = {})));
var ITestMessage;
( (function(ITestMessage) {
    ITestMessage.serialize = (message) => message.type === 0  ? ITestErrorMessage.serialize(message) : ITestOutputMessage.serialize(message);
    ITestMessage.deserialize = (message) => message.type === 0  ? ITestErrorMessage.deserialize(message) : ITestOutputMessage.deserialize(message);
})(ITestMessage || (ITestMessage = {})));
var ITestTaskState;
( (function(ITestTaskState) {
    ITestTaskState.serializeWithoutMessages = (state) => ({
        state: state.state,
        duration: state.duration,
        messages: [],
    });
    ITestTaskState.serialize = (state) => ({
        state: state.state,
        duration: state.duration,
        messages: ( state.messages.map(ITestMessage.serialize)),
    });
    ITestTaskState.deserialize = (state) => ({
        state: state.state,
        duration: state.duration,
        messages: ( state.messages.map(ITestMessage.deserialize)),
    });
})(ITestTaskState || (ITestTaskState = {})));
const testTagDelimiter = '\0';
const namespaceTestTag = (ctrlId, tagId) => ctrlId + testTagDelimiter + tagId;
const denamespaceTestTag = (namespaced) => {
    const index = namespaced.indexOf(testTagDelimiter);
    return { ctrlId: namespaced.slice(0, index), tagId: namespaced.slice(index + 1) };
};
var ITestItem;
( (function(ITestItem) {
    ITestItem.serialize = (item) => ({
        extId: item.extId,
        label: item.label,
        tags: item.tags,
        busy: item.busy,
        children: undefined,
        uri: item.uri?.toJSON(),
        range: item.range?.toJSON() || null,
        description: item.description,
        error: item.error,
        sortText: item.sortText
    });
    ITestItem.deserialize = (serialized) => ({
        extId: serialized.extId,
        label: serialized.label,
        tags: serialized.tags,
        busy: serialized.busy,
        children: undefined,
        uri: serialized.uri ? URI.revive(serialized.uri) : undefined,
        range: serialized.range ? Range.lift(serialized.range) : null,
        description: serialized.description,
        error: serialized.error,
        sortText: serialized.sortText
    });
})(ITestItem || (ITestItem = {})));
var InternalTestItem;
( (function(InternalTestItem) {
    InternalTestItem.serialize = (item) => ({
        expand: item.expand,
        item: ITestItem.serialize(item.item)
    });
    InternalTestItem.deserialize = (serialized) => ({
        controllerId: TestId.root(serialized.item.extId),
        expand: serialized.expand,
        item: ITestItem.deserialize(serialized.item)
    });
})(InternalTestItem || (InternalTestItem = {})));
var ITestItemUpdate;
( (function(ITestItemUpdate) {
    ITestItemUpdate.serialize = (u) => {
        let item;
        if (u.item) {
            item = {};
            if (u.item.label !== undefined) {
                item.label = u.item.label;
            }
            if (u.item.tags !== undefined) {
                item.tags = u.item.tags;
            }
            if (u.item.busy !== undefined) {
                item.busy = u.item.busy;
            }
            if (u.item.uri !== undefined) {
                item.uri = u.item.uri?.toJSON();
            }
            if (u.item.range !== undefined) {
                item.range = u.item.range?.toJSON();
            }
            if (u.item.description !== undefined) {
                item.description = u.item.description;
            }
            if (u.item.error !== undefined) {
                item.error = u.item.error;
            }
            if (u.item.sortText !== undefined) {
                item.sortText = u.item.sortText;
            }
        }
        return { extId: u.extId, expand: u.expand, item };
    };
    ITestItemUpdate.deserialize = (u) => {
        let item;
        if (u.item) {
            item = {};
            if (u.item.label !== undefined) {
                item.label = u.item.label;
            }
            if (u.item.tags !== undefined) {
                item.tags = u.item.tags;
            }
            if (u.item.busy !== undefined) {
                item.busy = u.item.busy;
            }
            if (u.item.range !== undefined) {
                item.range = u.item.range ? Range.lift(u.item.range) : null;
            }
            if (u.item.description !== undefined) {
                item.description = u.item.description;
            }
            if (u.item.error !== undefined) {
                item.error = u.item.error;
            }
            if (u.item.sortText !== undefined) {
                item.sortText = u.item.sortText;
            }
        }
        return { extId: u.extId, expand: u.expand, item };
    };
})(ITestItemUpdate || (ITestItemUpdate = {})));
const applyTestItemUpdate = (internal, patch) => {
    if (patch.expand !== undefined) {
        internal.expand = patch.expand;
    }
    if (patch.item !== undefined) {
        internal.item = internal.item ? Object.assign(internal.item, patch.item) : patch.item;
    }
};
var TestResultItem;
( (function(TestResultItem) {
    TestResultItem.serializeWithoutMessages = (original) => ({
        ...InternalTestItem.serialize(original),
        ownComputedState: original.ownComputedState,
        computedState: original.computedState,
        tasks: ( original.tasks.map(ITestTaskState.serializeWithoutMessages)),
    });
    TestResultItem.serialize = (original) => ({
        ...InternalTestItem.serialize(original),
        ownComputedState: original.ownComputedState,
        computedState: original.computedState,
        tasks: ( original.tasks.map(ITestTaskState.serialize)),
    });
    TestResultItem.deserialize = (serialized) => ({
        ...InternalTestItem.deserialize(serialized),
        ownComputedState: serialized.ownComputedState,
        computedState: serialized.computedState,
        tasks: ( serialized.tasks.map(ITestTaskState.deserialize)),
        retired: true,
    });
})(TestResultItem || (TestResultItem = {})));
var TestsDiffOp;
( (function(TestsDiffOp) {
    TestsDiffOp.deserialize = (u) => {
        if (u.op === 0 ) {
            return { op: u.op, item: InternalTestItem.deserialize(u.item) };
        }
        else if (u.op === 1 ) {
            return { op: u.op, item: ITestItemUpdate.deserialize(u.item) };
        }
        else if (u.op === 2 ) {
            return { op: u.op, uri: URI.revive(u.uri), docv: u.docv };
        }
        else {
            return u;
        }
    };
    TestsDiffOp.serialize = (u) => {
        if (u.op === 0 ) {
            return { op: u.op, item: InternalTestItem.serialize(u.item) };
        }
        else if (u.op === 1 ) {
            return { op: u.op, item: ITestItemUpdate.serialize(u.item) };
        }
        else {
            return u;
        }
    };
})(TestsDiffOp || (TestsDiffOp = {})));
class AbstractIncrementalTestCollection {
    constructor() {
        this._tags = ( new Map());
        this.items = ( new Map());
        this.roots = ( new Set());
        this.busyControllerCount = 0;
        this.pendingRootCount = 0;
        this.tags = this._tags;
    }
    apply(diff) {
        const changes = this.createChangeCollector();
        for (const op of diff) {
            switch (op.op) {
                case 0 :
                    this.add(InternalTestItem.deserialize(op.item), changes);
                    break;
                case 1 :
                    this.update(ITestItemUpdate.deserialize(op.item), changes);
                    break;
                case 3 :
                    this.remove(op.itemId, changes);
                    break;
                case 5 :
                    this.retireTest(op.itemId);
                    break;
                case 4 :
                    this.updatePendingRoots(op.amount);
                    break;
                case 6 :
                    this._tags.set(op.tag.id, op.tag);
                    break;
                case 7 :
                    this._tags.delete(op.id);
                    break;
            }
        }
        changes.complete?.();
    }
    add(item, changes) {
        const parentId = TestId.parentId(item.item.extId)?.toString();
        let created;
        if (!parentId) {
            created = this.createItem(item);
            this.roots.add(created);
            this.items.set(item.item.extId, created);
        }
        else if (( this.items.has(parentId))) {
            const parent = this.items.get(parentId);
            parent.children.add(item.item.extId);
            created = this.createItem(item, parent);
            this.items.set(item.item.extId, created);
        }
        else {
            console.error(`Test with unknown parent ID: ${JSON.stringify(item)}`);
            return;
        }
        changes.add?.(created);
        if (item.expand === 2 ) {
            this.busyControllerCount++;
        }
        return created;
    }
    update(patch, changes) {
        const existing = this.items.get(patch.extId);
        if (!existing) {
            return;
        }
        if (patch.expand !== undefined) {
            if (existing.expand === 2 ) {
                this.busyControllerCount--;
            }
            if (patch.expand === 2 ) {
                this.busyControllerCount++;
            }
        }
        applyTestItemUpdate(existing, patch);
        changes.update?.(existing);
        return existing;
    }
    remove(itemId, changes) {
        const toRemove = this.items.get(itemId);
        if (!toRemove) {
            return;
        }
        const parentId = TestId.parentId(toRemove.item.extId)?.toString();
        if (parentId) {
            const parent = this.items.get(parentId);
            parent.children.delete(toRemove.item.extId);
        }
        else {
            this.roots.delete(toRemove);
        }
        const queue = [[itemId]];
        while (queue.length) {
            for (const itemId of queue.pop()) {
                const existing = this.items.get(itemId);
                if (existing) {
                    queue.push(existing.children);
                    this.items.delete(itemId);
                    changes.remove?.(existing, existing !== toRemove);
                    if (existing.expand === 2 ) {
                        this.busyControllerCount--;
                    }
                }
            }
        }
    }
    retireTest(testId) {
    }
    updatePendingRoots(delta) {
        this.pendingRootCount += delta;
    }
    createChangeCollector() {
        return {};
    }
}
export { AbstractIncrementalTestCollection, IRichLocation, ITestErrorMessage, ITestItem, ITestItemUpdate, ITestMessage, ITestOutputMessage, ITestTaskState, InternalTestItem, TestResultItem, TestsDiffOp, applyTestItemUpdate, denamespaceTestTag, getMarkId, isStartControllerTests, namespaceTestTag };
