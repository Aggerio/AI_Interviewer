import { __decorate, __param } from '../../../../../../../node_modules/tslib/tslib.es6.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { BaseBinaryResourceEditor } from '../../../../browser/parts/editor/binaryEditor.js';
import { ITelemetryService } from 'monaco-editor/esm/vs/platform/telemetry/common/telemetry.js';
import { IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';
import { FileEditorInput } from './fileEditorInput.js';
import { BINARY_FILE_EDITOR_ID, BINARY_TEXT_FILE_MODE } from '../../common/files.js';
import { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';
import { EditorResolution } from 'monaco-editor/esm/vs/platform/editor/common/editor.js';
import { IEditorResolverService } from '../../../../services/editor/common/editorResolverService.js';
import { isEditorInputWithOptions } from '../../../../common/editor.js';
import { DiffEditorInput } from '../../../../common/editor/diffEditorInput.js';
import { IEditorGroupsService } from '../../../../services/editor/common/editorGroupsService.js';
let BinaryFileEditor = class BinaryFileEditor extends BaseBinaryResourceEditor {
    static { this.ID = BINARY_FILE_EDITOR_ID; }
    constructor(telemetryService, themeService, editorResolverService, storageService, editorGroupService) {
        super(BinaryFileEditor.ID, {
            openInternal: (input, options) => this.openInternal(input, options)
        }, telemetryService, themeService, storageService);
        this.editorResolverService = editorResolverService;
        this.editorGroupService = editorGroupService;
    }
    async openInternal(input, options) {
        if (input instanceof FileEditorInput && this.group?.activeEditor) {
            const activeEditor = this.group.activeEditor;
            const untypedActiveEditor = activeEditor?.toUntyped();
            if (!untypedActiveEditor) {
                return;
            }
            let resolvedEditor = await this.editorResolverService.resolveEditor({
                ...untypedActiveEditor,
                options: {
                    ...options,
                    override: EditorResolution.PICK
                }
            }, this.group);
            if (resolvedEditor === 2 ) {
                resolvedEditor = undefined;
            }
            else if (resolvedEditor === 1 ) {
                return;
            }
            if (isEditorInputWithOptions(resolvedEditor)) {
                for (const editor of resolvedEditor.editor instanceof DiffEditorInput ? [resolvedEditor.editor.original, resolvedEditor.editor.modified] : [resolvedEditor.editor]) {
                    if (editor instanceof FileEditorInput) {
                        editor.setForceOpenAsText();
                        editor.setPreferredLanguageId(BINARY_TEXT_FILE_MODE);
                    }
                }
            }
            await (this.group ?? this.editorGroupService.activeGroup).replaceEditors([{
                    editor: activeEditor,
                    replacement: resolvedEditor?.editor ?? input,
                    options: {
                        ...(resolvedEditor?.options ?? options)
                    }
                }]);
        }
    }
    getTitle() {
        return this.input ? this.input.getName() : ( localize('binaryFileEditor', "Binary File Viewer"));
    }
};
BinaryFileEditor = ( __decorate([
    ( __param(0, ITelemetryService)),
    ( __param(1, IThemeService)),
    ( __param(2, IEditorResolverService)),
    ( __param(3, IStorageService)),
    ( __param(4, IEditorGroupsService))
], BinaryFileEditor));
export { BinaryFileEditor };
