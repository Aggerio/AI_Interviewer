import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';
import { createDecorator, IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';
import { toLocalISOString } from '../../../../base/common/date.js';
import { joinPath } from 'monaco-editor/esm/vs/base/common/resources.js';
import { FileOutputChannelModel, DelegatedOutputChannelModel } from './outputChannelModel.js';
const IOutputChannelModelService = ( createDecorator('outputChannelModelService'));
let OutputChannelModelService = class OutputChannelModelService {
    constructor(fileService, instantiationService, environmentService) {
        this.fileService = fileService;
        this.instantiationService = instantiationService;
        this._outputDir = null;
        this.outputLocation = joinPath(environmentService.windowLogsPath, `output_${toLocalISOString(( new Date())).replace(/-|:|\.\d+Z$/g, '')}`);
    }
    createOutputChannelModel(id, modelUri, language, file) {
        return file ? this.instantiationService.createInstance(FileOutputChannelModel, modelUri, language, file) : this.instantiationService.createInstance(DelegatedOutputChannelModel, id, modelUri, language, this.outputDir);
    }
    get outputDir() {
        if (!this._outputDir) {
            this._outputDir = this.fileService.createFolder(this.outputLocation).then(() => this.outputLocation);
        }
        return this._outputDir;
    }
};
OutputChannelModelService = ( __decorate([
    ( __param(0, IFileService)),
    ( __param(1, IInstantiationService)),
    ( __param(2, IWorkbenchEnvironmentService))
], OutputChannelModelService));
export { IOutputChannelModelService, OutputChannelModelService };
