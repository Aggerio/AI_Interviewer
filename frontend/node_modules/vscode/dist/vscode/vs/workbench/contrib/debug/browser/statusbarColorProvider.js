import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { registerColor } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';
import { IDebugService } from '../common/debug.js';
import { IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';
import { STATUS_BAR_FOREGROUND, STATUS_BAR_BORDER } from '../../../common/theme.js';
import { DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { IStatusbarService } from '../../../services/statusbar/browser/statusbar.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
const STATUS_BAR_DEBUGGING_BACKGROUND = registerColor('statusBar.debuggingBackground', {
    dark: '#CC6633',
    light: '#CC6633',
    hcDark: '#BA592C',
    hcLight: '#B5200D'
}, ( localize(
    'statusBarDebuggingBackground',
    "Status bar background color when a program is being debugged. The status bar is shown in the bottom of the window"
)));
const STATUS_BAR_DEBUGGING_FOREGROUND = registerColor('statusBar.debuggingForeground', {
    dark: STATUS_BAR_FOREGROUND,
    light: STATUS_BAR_FOREGROUND,
    hcDark: STATUS_BAR_FOREGROUND,
    hcLight: '#FFFFFF'
}, ( localize(
    'statusBarDebuggingForeground',
    "Status bar foreground color when a program is being debugged. The status bar is shown in the bottom of the window"
)));
const STATUS_BAR_DEBUGGING_BORDER = registerColor('statusBar.debuggingBorder', {
    dark: STATUS_BAR_BORDER,
    light: STATUS_BAR_BORDER,
    hcDark: STATUS_BAR_BORDER,
    hcLight: STATUS_BAR_BORDER
}, ( localize(
    'statusBarDebuggingBorder',
    "Status bar border color separating to the sidebar and editor when a program is being debugged. The status bar is shown in the bottom of the window"
)));
let StatusBarColorProvider = class StatusBarColorProvider {
    set enabled(enabled) {
        if (enabled === !!this.disposable) {
            return;
        }
        if (enabled) {
            this.disposable = this.statusbarService.overrideStyle({
                priority: 10,
                foreground: STATUS_BAR_DEBUGGING_FOREGROUND,
                background: STATUS_BAR_DEBUGGING_BACKGROUND,
                border: STATUS_BAR_DEBUGGING_BORDER,
            });
        }
        else {
            this.disposable.dispose();
            this.disposable = undefined;
        }
    }
    constructor(debugService, contextService, statusbarService, configurationService) {
        this.debugService = debugService;
        this.contextService = contextService;
        this.statusbarService = statusbarService;
        this.configurationService = configurationService;
        this.disposables = ( new DisposableStore());
        this.debugService.onDidChangeState(this.update, this, this.disposables);
        this.contextService.onDidChangeWorkbenchState(this.update, this, this.disposables);
        this.configurationService.onDidChangeConfiguration((e) => {
            if (e.affectsConfiguration('debug.enableStatusBarColor')) {
                this.update();
            }
        });
        this.update();
    }
    update() {
        const decorateStatusBar = this.configurationService.getValue('debug').enableStatusBarColor;
        if (!decorateStatusBar) {
            this.enabled = false;
        }
        else {
            this.enabled = isStatusbarInDebugMode(this.debugService.state, this.debugService.getModel().getSessions());
        }
    }
    dispose() {
        this.disposable?.dispose();
        this.disposables.dispose();
    }
};
StatusBarColorProvider = ( __decorate([
    ( __param(0, IDebugService)),
    ( __param(1, IWorkspaceContextService)),
    ( __param(2, IStatusbarService)),
    ( __param(3, IConfigurationService))
], StatusBarColorProvider));
function isStatusbarInDebugMode(state, sessions) {
    if (state === 0  || state === 1  || sessions.every(s => s.suppressDebugStatusbar || s.configuration?.noDebug)) {
        return false;
    }
    return true;
}
export { STATUS_BAR_DEBUGGING_BACKGROUND, STATUS_BAR_DEBUGGING_BORDER, STATUS_BAR_DEBUGGING_FOREGROUND, StatusBarColorProvider, isStatusbarInDebugMode };
