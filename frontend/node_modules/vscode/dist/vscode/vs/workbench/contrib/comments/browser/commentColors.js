import * as languages from 'monaco-editor/esm/vs/editor/common/languages.js';
import * as nls from 'monaco-editor/esm/vs/nls.js';
import { registerColor, disabledForeground, contrastBorder, listFocusOutline, transparent } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';
const resolvedCommentViewIcon = registerColor('commentsView.resolvedIcon', { dark: disabledForeground, light: disabledForeground, hcDark: contrastBorder, hcLight: contrastBorder }, ( nls.localize('resolvedCommentIcon', 'Icon color for resolved comments.')));
const unresolvedCommentViewIcon = registerColor('commentsView.unresolvedIcon', { dark: listFocusOutline, light: listFocusOutline, hcDark: contrastBorder, hcLight: contrastBorder }, ( nls.localize('unresolvedCommentIcon', 'Icon color for unresolved comments.')));
const resolvedCommentBorder = registerColor('editorCommentsWidget.resolvedBorder', { dark: resolvedCommentViewIcon, light: resolvedCommentViewIcon, hcDark: contrastBorder, hcLight: contrastBorder }, ( nls.localize(
    'resolvedCommentBorder',
    'Color of borders and arrow for resolved comments.'
)));
const unresolvedCommentBorder = registerColor('editorCommentsWidget.unresolvedBorder', { dark: unresolvedCommentViewIcon, light: unresolvedCommentViewIcon, hcDark: contrastBorder, hcLight: contrastBorder }, ( nls.localize(
    'unresolvedCommentBorder',
    'Color of borders and arrow for unresolved comments.'
)));
registerColor('editorCommentsWidget.rangeBackground', { dark: ( transparent(unresolvedCommentBorder, .1)), light: ( transparent(unresolvedCommentBorder, .1)), hcDark: ( transparent(unresolvedCommentBorder, .1)), hcLight: ( transparent(unresolvedCommentBorder, .1)) }, ( nls.localize('commentThreadRangeBackground', 'Color of background for comment ranges.')));
registerColor('editorCommentsWidget.rangeBorder', { dark: ( transparent(unresolvedCommentBorder, .4)), light: ( transparent(unresolvedCommentBorder, .4)), hcDark: ( transparent(unresolvedCommentBorder, .4)), hcLight: ( transparent(unresolvedCommentBorder, .4)) }, ( nls.localize('commentThreadRangeBorder', 'Color of border for comment ranges.')));
registerColor('editorCommentsWidget.rangeActiveBackground', { dark: ( transparent(unresolvedCommentBorder, .1)), light: ( transparent(unresolvedCommentBorder, .1)), hcDark: ( transparent(unresolvedCommentBorder, .1)), hcLight: ( transparent(unresolvedCommentBorder, .1)) }, ( nls.localize(
    'commentThreadActiveRangeBackground',
    'Color of background for currently selected or hovered comment range.'
)));
registerColor('editorCommentsWidget.rangeActiveBorder', { dark: ( transparent(unresolvedCommentBorder, .4)), light: ( transparent(unresolvedCommentBorder, .4)), hcDark: ( transparent(unresolvedCommentBorder, .4)), hcLight: ( transparent(unresolvedCommentBorder, .2)) }, ( nls.localize(
    'commentThreadActiveRangeBorder',
    'Color of border for currently selected or hovered comment range.'
)));
const commentThreadStateBorderColors = ( new Map([
    [languages.CommentThreadState.Unresolved, unresolvedCommentBorder],
    [languages.CommentThreadState.Resolved, resolvedCommentBorder],
]));
const commentThreadStateIconColors = ( new Map([
    [languages.CommentThreadState.Unresolved, unresolvedCommentViewIcon],
    [languages.CommentThreadState.Resolved, resolvedCommentViewIcon],
]));
const commentThreadStateColorVar = '--comment-thread-state-color';
const commentViewThreadStateColorVar = '--comment-view-thread-state-color';
const commentThreadStateBackgroundColorVar = '--comment-thread-state-background-color';
function getCommentThreadStateColor(state, theme, map) {
    const colorId = (state !== undefined) ? map.get(state) : undefined;
    return (colorId !== undefined) ? theme.getColor(colorId) : undefined;
}
function getCommentThreadStateBorderColor(state, theme) {
    return getCommentThreadStateColor(state, theme, commentThreadStateBorderColors);
}
function getCommentThreadStateIconColor(state, theme) {
    return getCommentThreadStateColor(state, theme, commentThreadStateIconColors);
}
export { commentThreadStateBackgroundColorVar, commentThreadStateColorVar, commentViewThreadStateColorVar, getCommentThreadStateBorderColor, getCommentThreadStateIconColor };
