import * as nls from 'monaco-editor/esm/vs/nls.js';
import { renameHandler, moveFileToTrashHandler, deleteFileHandler, cutFileHandler, copyFileHandler, pasteFileHandler, openFilePreserveFocusHandler, NEW_FILE_COMMAND_ID, NEW_FILE_LABEL, NEW_FOLDER_COMMAND_ID, NEW_FOLDER_LABEL, COPY_FILE_LABEL, PASTE_FILE_LABEL, FileCopiedContext, DOWNLOAD_COMMAND_ID, DOWNLOAD_LABEL, UPLOAD_COMMAND_ID, UPLOAD_LABEL, TRIGGER_RENAME_LABEL, MOVE_FILE_TO_TRASH_LABEL } from './fileActions.js';
import { CONFLICT_RESOLUTION_CONTEXT } from './editors/textFileSaveErrorHandler.js';
import { MenuRegistry, MenuId } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import './fileCommands.js';
import { SAVE_FILE_COMMAND_ID, SAVE_FILE_LABEL, OpenEditorsDirtyEditorContext, OpenEditorsGroupContext, OpenEditorsReadonlyEditorContext, REVERT_FILE_COMMAND_ID, SAVE_ALL_IN_GROUP_COMMAND_ID, COMPARE_WITH_SAVED_COMMAND_ID, ResourceSelectedForCompareContext, OPEN_WITH_EXPLORER_COMMAND_ID, REMOVE_ROOT_FOLDER_COMMAND_ID, REMOVE_ROOT_FOLDER_LABEL, NEW_UNTITLED_FILE_COMMAND_ID, COPY_PATH_COMMAND_ID, COPY_RELATIVE_PATH_COMMAND_ID, REVEAL_IN_EXPLORER_COMMAND_ID, SAVE_FILE_WITHOUT_FORMATTING_LABEL, SAVE_FILE_WITHOUT_FORMATTING_COMMAND_ID, SAVE_FILES_COMMAND_ID, SAVE_FILE_AS_LABEL, SAVE_FILE_AS_COMMAND_ID, NEW_UNTITLED_FILE_LABEL, OPEN_TO_SIDE_COMMAND_ID, COMPARE_RESOURCE_COMMAND_ID, SELECT_FOR_COMPARE_COMMAND_ID, COMPARE_SELECTED_COMMAND_ID } from './fileConstants.js';
import { ContextKeyExpr } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { KeybindingsRegistry } from 'monaco-editor/esm/vs/platform/keybinding/common/keybindingsRegistry.js';
import { FilesExplorerFocusCondition, ExplorerRootContext, ExplorerResourceNotReadonlyContext, ExplorerResourceMoveableToTrash, ExplorerResourceCut, ExplorerFolderContext, ExplorerResourceAvailableEditorIdsContext } from '../common/files.js';
import { ADD_ROOT_FOLDER_COMMAND_ID, ADD_ROOT_FOLDER_LABEL } from '../../../browser/actions/workspaceCommands.js';
import { REOPEN_WITH_COMMAND_ID, CLOSE_EDITOR_COMMAND_ID, CLOSE_OTHER_EDITORS_IN_GROUP_COMMAND_ID, CLOSE_SAVED_EDITORS_COMMAND_ID, CLOSE_EDITORS_IN_GROUP_COMMAND_ID } from '../../../browser/parts/editor/editorCommands.js';
import { AutoSaveAfterShortDelayContext } from '../../../services/filesConfiguration/common/filesConfigurationService.js';
import { WorkbenchListDoubleSelection } from 'monaco-editor/esm/vs/platform/list/browser/listService.js';
import { Schemas } from 'monaco-editor/esm/vs/base/common/network.js';
import { ActiveEditorAvailableEditorIdsContext, ResourceContextKey, DirtyWorkingCopiesContext, HasWebFileSystemAccess, EnterMultiRootWorkspaceSupportContext, WorkbenchStateContext, WorkspaceFolderCountContext } from '../../../common/contextkeys.js';
import { IsWebContext } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkeys.js';
import { IExplorerService } from './files.js';
import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';
import { Categories } from 'monaco-editor/esm/vs/platform/action/common/actionCommonCategories.js';
const explorerCommandsWeightBonus = 10;
const RENAME_ID = 'renameFile';
KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: RENAME_ID,
    weight: 200  + explorerCommandsWeightBonus,
    when: ( ContextKeyExpr.and(FilesExplorerFocusCondition, ( ExplorerRootContext.toNegated()), ExplorerResourceNotReadonlyContext)),
    primary: 60 ,
    mac: {
        primary: 3
    },
    handler: renameHandler
});
const MOVE_FILE_TO_TRASH_ID = 'moveFileToTrash';
KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: MOVE_FILE_TO_TRASH_ID,
    weight: 200  + explorerCommandsWeightBonus,
    when: ( ContextKeyExpr.and(
        FilesExplorerFocusCondition,
        ExplorerResourceNotReadonlyContext,
        ExplorerResourceMoveableToTrash
    )),
    primary: 20 ,
    mac: {
        primary: 2048  | 1 ,
        secondary: [20 ]
    },
    handler: moveFileToTrashHandler
});
const DELETE_FILE_ID = 'deleteFile';
KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: DELETE_FILE_ID,
    weight: 200  + explorerCommandsWeightBonus,
    when: ( ContextKeyExpr.and(FilesExplorerFocusCondition, ExplorerResourceNotReadonlyContext)),
    primary: 1024  | 20 ,
    mac: {
        primary: 2048  | 512  | 1
    },
    handler: deleteFileHandler
});
KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: DELETE_FILE_ID,
    weight: 200  + explorerCommandsWeightBonus,
    when: ( ContextKeyExpr.and(
        FilesExplorerFocusCondition,
        ExplorerResourceNotReadonlyContext,
        ( ExplorerResourceMoveableToTrash.toNegated())
    )),
    primary: 20 ,
    mac: {
        primary: 2048  | 1
    },
    handler: deleteFileHandler
});
const CUT_FILE_ID = 'filesExplorer.cut';
KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: CUT_FILE_ID,
    weight: 200  + explorerCommandsWeightBonus,
    when: ( ContextKeyExpr.and(FilesExplorerFocusCondition, ( ExplorerRootContext.toNegated()), ExplorerResourceNotReadonlyContext)),
    primary: 2048  | 54 ,
    handler: cutFileHandler,
});
const COPY_FILE_ID = 'filesExplorer.copy';
KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: COPY_FILE_ID,
    weight: 200  + explorerCommandsWeightBonus,
    when: ( ContextKeyExpr.and(FilesExplorerFocusCondition, ( ExplorerRootContext.toNegated()))),
    primary: 2048  | 33 ,
    handler: copyFileHandler,
});
const PASTE_FILE_ID = 'filesExplorer.paste';
KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: PASTE_FILE_ID,
    weight: 200  + explorerCommandsWeightBonus,
    when: ( ContextKeyExpr.and(FilesExplorerFocusCondition, ExplorerResourceNotReadonlyContext)),
    primary: 2048  | 52 ,
    handler: pasteFileHandler
});
KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'filesExplorer.cancelCut',
    weight: 200  + explorerCommandsWeightBonus,
    when: ( ContextKeyExpr.and(FilesExplorerFocusCondition, ExplorerResourceCut)),
    primary: 9 ,
    handler: async (accessor) => {
        const explorerService = accessor.get(IExplorerService);
        await explorerService.setToCopy([], true);
    }
});
KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'filesExplorer.openFilePreserveFocus',
    weight: 200  + explorerCommandsWeightBonus,
    when: ( ContextKeyExpr.and(FilesExplorerFocusCondition, ( ExplorerFolderContext.toNegated()))),
    primary: 10 ,
    handler: openFilePreserveFocusHandler
});
const copyPathCommand = {
    id: COPY_PATH_COMMAND_ID,
    title: ( nls.localize('copyPath', "Copy Path"))
};
const copyRelativePathCommand = {
    id: COPY_RELATIVE_PATH_COMMAND_ID,
    title: ( nls.localize('copyRelativePath', "Copy Relative Path"))
};
appendEditorTitleContextMenuItem(COPY_PATH_COMMAND_ID, copyPathCommand.title, ResourceContextKey.IsFileSystemResource, '1_cutcopypaste');
appendEditorTitleContextMenuItem(COPY_RELATIVE_PATH_COMMAND_ID, copyRelativePathCommand.title, ResourceContextKey.IsFileSystemResource, '1_cutcopypaste');
appendEditorTitleContextMenuItem(REVEAL_IN_EXPLORER_COMMAND_ID, ( nls.localize('revealInSideBar', "Reveal in Explorer View")), ResourceContextKey.IsFileSystemResource, '2_files', 1);
function appendEditorTitleContextMenuItem(id, title, when, group, order) {
    MenuRegistry.appendMenuItem(MenuId.EditorTitleContext, {
        command: { id, title },
        when,
        group,
        order
    });
}
appendSaveConflictEditorTitleAction('workbench.files.action.acceptLocalChanges', ( nls.localize('acceptLocalChanges', "Use your changes and overwrite file contents")), Codicon.check, -10);
appendSaveConflictEditorTitleAction('workbench.files.action.revertLocalChanges', ( nls.localize('revertLocalChanges', "Discard your changes and revert to file contents")), Codicon.discard, -9);
function appendSaveConflictEditorTitleAction(id, title, icon, order, command) {
    MenuRegistry.appendMenuItem(MenuId.EditorTitle, {
        command: { id, title, icon },
        when: ( ContextKeyExpr.equals(CONFLICT_RESOLUTION_CONTEXT, true)),
        group: 'navigation',
        order
    });
}
function appendToCommandPalette(id, title, category, when) {
    MenuRegistry.appendMenuItem(MenuId.CommandPalette, {
        command: {
            id,
            title,
            category
        },
        when
    });
}
appendToCommandPalette(COPY_PATH_COMMAND_ID, { value: ( nls.localize('copyPathOfActive', "Copy Path of Active File")), original: 'Copy Path of Active File' }, Categories.File);
appendToCommandPalette(COPY_RELATIVE_PATH_COMMAND_ID, { value: ( nls.localize('copyRelativePathOfActive', "Copy Relative Path of Active File")), original: 'Copy Relative Path of Active File' }, Categories.File);
appendToCommandPalette(SAVE_FILE_COMMAND_ID, { value: SAVE_FILE_LABEL, original: 'Save' }, Categories.File);
appendToCommandPalette(SAVE_FILE_WITHOUT_FORMATTING_COMMAND_ID, { value: SAVE_FILE_WITHOUT_FORMATTING_LABEL, original: 'Save without Formatting' }, Categories.File);
appendToCommandPalette(SAVE_ALL_IN_GROUP_COMMAND_ID, { value: ( nls.localize('saveAllInGroup', "Save All in Group")), original: 'Save All in Group' }, Categories.File);
appendToCommandPalette(SAVE_FILES_COMMAND_ID, { value: ( nls.localize('saveFiles', "Save All Files")), original: 'Save All Files' }, Categories.File);
appendToCommandPalette(REVERT_FILE_COMMAND_ID, { value: ( nls.localize('revert', "Revert File")), original: 'Revert File' }, Categories.File);
appendToCommandPalette(COMPARE_WITH_SAVED_COMMAND_ID, { value: ( nls.localize('compareActiveWithSaved', "Compare Active File with Saved")), original: 'Compare Active File with Saved' }, Categories.File);
appendToCommandPalette(SAVE_FILE_AS_COMMAND_ID, { value: SAVE_FILE_AS_LABEL, original: 'Save As...' }, Categories.File);
appendToCommandPalette(NEW_FILE_COMMAND_ID, { value: NEW_FILE_LABEL, original: 'New File' }, Categories.File, ( WorkspaceFolderCountContext.notEqualsTo('0')));
appendToCommandPalette(NEW_FOLDER_COMMAND_ID, { value: NEW_FOLDER_LABEL, original: 'New Folder' }, Categories.File, ( WorkspaceFolderCountContext.notEqualsTo('0')));
appendToCommandPalette(NEW_UNTITLED_FILE_COMMAND_ID, { value: NEW_UNTITLED_FILE_LABEL, original: 'New Untitled Text File' }, Categories.File);
const isFileOrUntitledResourceContextKey = ( ContextKeyExpr.or(ResourceContextKey.IsFileSystemResource, ( ResourceContextKey.Scheme.isEqualTo(Schemas.untitled))));
const openToSideCommand = {
    id: OPEN_TO_SIDE_COMMAND_ID,
    title: ( nls.localize('openToSide', "Open to the Side"))
};
MenuRegistry.appendMenuItem(MenuId.OpenEditorsContext, {
    group: 'navigation',
    order: 10,
    command: openToSideCommand,
    when: isFileOrUntitledResourceContextKey
});
MenuRegistry.appendMenuItem(MenuId.OpenEditorsContext, {
    group: '1_open',
    order: 10,
    command: {
        id: REOPEN_WITH_COMMAND_ID,
        title: ( nls.localize('reopenWith', "Reopen Editor With..."))
    },
    when: ActiveEditorAvailableEditorIdsContext
});
MenuRegistry.appendMenuItem(MenuId.OpenEditorsContext, {
    group: '1_cutcopypaste',
    order: 10,
    command: copyPathCommand,
    when: ResourceContextKey.IsFileSystemResource
});
MenuRegistry.appendMenuItem(MenuId.OpenEditorsContext, {
    group: '1_cutcopypaste',
    order: 20,
    command: copyRelativePathCommand,
    when: ResourceContextKey.IsFileSystemResource
});
MenuRegistry.appendMenuItem(MenuId.OpenEditorsContext, {
    group: '2_save',
    order: 10,
    command: {
        id: SAVE_FILE_COMMAND_ID,
        title: SAVE_FILE_LABEL,
        precondition: OpenEditorsDirtyEditorContext
    },
    when: ( ContextKeyExpr.or((
    ResourceContextKey.Scheme.isEqualTo(Schemas.untitled)), (
    ContextKeyExpr.and((
    OpenEditorsGroupContext.toNegated()), (
    OpenEditorsReadonlyEditorContext.toNegated()), (
    AutoSaveAfterShortDelayContext.toNegated())))))
});
MenuRegistry.appendMenuItem(MenuId.OpenEditorsContext, {
    group: '2_save',
    order: 20,
    command: {
        id: REVERT_FILE_COMMAND_ID,
        title: ( nls.localize('revert', "Revert File")),
        precondition: OpenEditorsDirtyEditorContext
    },
    when: ( ContextKeyExpr.and((
    OpenEditorsGroupContext.toNegated()), (
    OpenEditorsReadonlyEditorContext.toNegated()), (
    ResourceContextKey.Scheme.notEqualsTo(Schemas.untitled)), (
    AutoSaveAfterShortDelayContext.toNegated())))
});
MenuRegistry.appendMenuItem(MenuId.OpenEditorsContext, {
    group: '2_save',
    order: 30,
    command: {
        id: SAVE_ALL_IN_GROUP_COMMAND_ID,
        title: ( nls.localize('saveAll', "Save All")),
        precondition: DirtyWorkingCopiesContext
    },
    when: OpenEditorsGroupContext
});
MenuRegistry.appendMenuItem(MenuId.OpenEditorsContext, {
    group: '3_compare',
    order: 10,
    command: {
        id: COMPARE_WITH_SAVED_COMMAND_ID,
        title: ( nls.localize('compareWithSaved', "Compare with Saved")),
        precondition: OpenEditorsDirtyEditorContext
    },
    when: ( ContextKeyExpr.and(ResourceContextKey.IsFileSystemResource, ( AutoSaveAfterShortDelayContext.toNegated()), ( WorkbenchListDoubleSelection.toNegated())))
});
const compareResourceCommand = {
    id: COMPARE_RESOURCE_COMMAND_ID,
    title: ( nls.localize('compareWithSelected', "Compare with Selected"))
};
MenuRegistry.appendMenuItem(MenuId.OpenEditorsContext, {
    group: '3_compare',
    order: 20,
    command: compareResourceCommand,
    when: ( ContextKeyExpr.and(
        ResourceContextKey.HasResource,
        ResourceSelectedForCompareContext,
        isFileOrUntitledResourceContextKey,
        ( WorkbenchListDoubleSelection.toNegated())
    ))
});
const selectForCompareCommand = {
    id: SELECT_FOR_COMPARE_COMMAND_ID,
    title: ( nls.localize('compareSource', "Select for Compare"))
};
MenuRegistry.appendMenuItem(MenuId.OpenEditorsContext, {
    group: '3_compare',
    order: 30,
    command: selectForCompareCommand,
    when: ( ContextKeyExpr.and(
        ResourceContextKey.HasResource,
        isFileOrUntitledResourceContextKey,
        ( WorkbenchListDoubleSelection.toNegated())
    ))
});
const compareSelectedCommand = {
    id: COMPARE_SELECTED_COMMAND_ID,
    title: ( nls.localize('compareSelected', "Compare Selected"))
};
MenuRegistry.appendMenuItem(MenuId.OpenEditorsContext, {
    group: '3_compare',
    order: 30,
    command: compareSelectedCommand,
    when: ( ContextKeyExpr.and(
        ResourceContextKey.HasResource,
        WorkbenchListDoubleSelection,
        isFileOrUntitledResourceContextKey
    ))
});
MenuRegistry.appendMenuItem(MenuId.OpenEditorsContext, {
    group: '4_close',
    order: 10,
    command: {
        id: CLOSE_EDITOR_COMMAND_ID,
        title: ( nls.localize('close', "Close"))
    },
    when: ( OpenEditorsGroupContext.toNegated())
});
MenuRegistry.appendMenuItem(MenuId.OpenEditorsContext, {
    group: '4_close',
    order: 20,
    command: {
        id: CLOSE_OTHER_EDITORS_IN_GROUP_COMMAND_ID,
        title: ( nls.localize('closeOthers', "Close Others"))
    },
    when: ( OpenEditorsGroupContext.toNegated())
});
MenuRegistry.appendMenuItem(MenuId.OpenEditorsContext, {
    group: '4_close',
    order: 30,
    command: {
        id: CLOSE_SAVED_EDITORS_COMMAND_ID,
        title: ( nls.localize('closeSaved', "Close Saved"))
    }
});
MenuRegistry.appendMenuItem(MenuId.OpenEditorsContext, {
    group: '4_close',
    order: 40,
    command: {
        id: CLOSE_EDITORS_IN_GROUP_COMMAND_ID,
        title: ( nls.localize('closeAll', "Close All"))
    }
});
MenuRegistry.appendMenuItem(MenuId.ExplorerContext, {
    group: 'navigation',
    order: 4,
    command: {
        id: NEW_FILE_COMMAND_ID,
        title: NEW_FILE_LABEL,
        precondition: ExplorerResourceNotReadonlyContext
    },
    when: ExplorerFolderContext
});
MenuRegistry.appendMenuItem(MenuId.ExplorerContext, {
    group: 'navigation',
    order: 6,
    command: {
        id: NEW_FOLDER_COMMAND_ID,
        title: NEW_FOLDER_LABEL,
        precondition: ExplorerResourceNotReadonlyContext
    },
    when: ExplorerFolderContext
});
MenuRegistry.appendMenuItem(MenuId.ExplorerContext, {
    group: 'navigation',
    order: 10,
    command: openToSideCommand,
    when: ( ContextKeyExpr.and(( ExplorerFolderContext.toNegated()), ResourceContextKey.HasResource))
});
MenuRegistry.appendMenuItem(MenuId.ExplorerContext, {
    group: 'navigation',
    order: 20,
    command: {
        id: OPEN_WITH_EXPLORER_COMMAND_ID,
        title: ( nls.localize('explorerOpenWith', "Open With...")),
    },
    when: ( ContextKeyExpr.and(( ExplorerFolderContext.toNegated()), ExplorerResourceAvailableEditorIdsContext)),
});
MenuRegistry.appendMenuItem(MenuId.ExplorerContext, {
    group: '3_compare',
    order: 20,
    command: compareResourceCommand,
    when: ( ContextKeyExpr.and(( ExplorerFolderContext.toNegated()), ResourceContextKey.HasResource, ResourceSelectedForCompareContext, ( WorkbenchListDoubleSelection.toNegated())))
});
MenuRegistry.appendMenuItem(MenuId.ExplorerContext, {
    group: '3_compare',
    order: 30,
    command: selectForCompareCommand,
    when: ( ContextKeyExpr.and(( ExplorerFolderContext.toNegated()), ResourceContextKey.HasResource, ( WorkbenchListDoubleSelection.toNegated())))
});
MenuRegistry.appendMenuItem(MenuId.ExplorerContext, {
    group: '3_compare',
    order: 30,
    command: compareSelectedCommand,
    when: ( ContextKeyExpr.and(( ExplorerFolderContext.toNegated()), ResourceContextKey.HasResource, WorkbenchListDoubleSelection))
});
MenuRegistry.appendMenuItem(MenuId.ExplorerContext, {
    group: '5_cutcopypaste',
    order: 8,
    command: {
        id: CUT_FILE_ID,
        title: ( nls.localize('cut', "Cut"))
    },
    when: ( ContextKeyExpr.and(( ExplorerRootContext.toNegated()), ExplorerResourceNotReadonlyContext))
});
MenuRegistry.appendMenuItem(MenuId.ExplorerContext, {
    group: '5_cutcopypaste',
    order: 10,
    command: {
        id: COPY_FILE_ID,
        title: COPY_FILE_LABEL
    },
    when: ( ExplorerRootContext.toNegated())
});
MenuRegistry.appendMenuItem(MenuId.ExplorerContext, {
    group: '5_cutcopypaste',
    order: 20,
    command: {
        id: PASTE_FILE_ID,
        title: PASTE_FILE_LABEL,
        precondition: ( ContextKeyExpr.and(ExplorerResourceNotReadonlyContext, FileCopiedContext))
    },
    when: ExplorerFolderContext
});
MenuRegistry.appendMenuItem(MenuId.ExplorerContext, ({
    group: '5b_importexport',
    order: 10,
    command: {
        id: DOWNLOAD_COMMAND_ID,
        title: DOWNLOAD_LABEL
    },
    when: ( ContextKeyExpr.or((
    ContextKeyExpr.and(( IsWebContext.toNegated()), ( ResourceContextKey.Scheme.notEqualsTo(Schemas.file)))), (
    ContextKeyExpr.and(IsWebContext, ( ExplorerFolderContext.toNegated()), ( ExplorerRootContext.toNegated()))), (
    ContextKeyExpr.and(IsWebContext, HasWebFileSystemAccess))))
}));
MenuRegistry.appendMenuItem(MenuId.ExplorerContext, ({
    group: '5b_importexport',
    order: 20,
    command: {
        id: UPLOAD_COMMAND_ID,
        title: UPLOAD_LABEL,
    },
    when: ( ContextKeyExpr.and(
    IsWebContext,
    ExplorerFolderContext,
    ExplorerResourceNotReadonlyContext))
}));
MenuRegistry.appendMenuItem(MenuId.ExplorerContext, {
    group: '6_copypath',
    order: 10,
    command: copyPathCommand,
    when: ResourceContextKey.IsFileSystemResource
});
MenuRegistry.appendMenuItem(MenuId.ExplorerContext, {
    group: '6_copypath',
    order: 20,
    command: copyRelativePathCommand,
    when: ResourceContextKey.IsFileSystemResource
});
MenuRegistry.appendMenuItem(MenuId.ExplorerContext, {
    group: '2_workspace',
    order: 10,
    command: {
        id: ADD_ROOT_FOLDER_COMMAND_ID,
        title: ADD_ROOT_FOLDER_LABEL
    },
    when: ( ContextKeyExpr.and(ExplorerRootContext, ( ContextKeyExpr.or(EnterMultiRootWorkspaceSupportContext, ( WorkbenchStateContext.isEqualTo('workspace'))))))
});
MenuRegistry.appendMenuItem(MenuId.ExplorerContext, {
    group: '2_workspace',
    order: 30,
    command: {
        id: REMOVE_ROOT_FOLDER_COMMAND_ID,
        title: REMOVE_ROOT_FOLDER_LABEL
    },
    when: ( ContextKeyExpr.and(ExplorerRootContext, ExplorerFolderContext, ( ContextKeyExpr.and(( WorkspaceFolderCountContext.notEqualsTo('0')), ( ContextKeyExpr.or(EnterMultiRootWorkspaceSupportContext, ( WorkbenchStateContext.isEqualTo('workspace'))))))))
});
MenuRegistry.appendMenuItem(MenuId.ExplorerContext, {
    group: '7_modification',
    order: 10,
    command: {
        id: RENAME_ID,
        title: TRIGGER_RENAME_LABEL,
        precondition: ExplorerResourceNotReadonlyContext
    },
    when: ( ExplorerRootContext.toNegated())
});
MenuRegistry.appendMenuItem(MenuId.ExplorerContext, {
    group: '7_modification',
    order: 20,
    command: {
        id: MOVE_FILE_TO_TRASH_ID,
        title: MOVE_FILE_TO_TRASH_LABEL,
        precondition: ExplorerResourceNotReadonlyContext
    },
    alt: {
        id: DELETE_FILE_ID,
        title: ( nls.localize('deleteFile', "Delete Permanently")),
        precondition: ExplorerResourceNotReadonlyContext
    },
    when: ( ContextKeyExpr.and(( ExplorerRootContext.toNegated()), ExplorerResourceMoveableToTrash))
});
MenuRegistry.appendMenuItem(MenuId.ExplorerContext, {
    group: '7_modification',
    order: 20,
    command: {
        id: DELETE_FILE_ID,
        title: ( nls.localize('deleteFile', "Delete Permanently")),
        precondition: ExplorerResourceNotReadonlyContext
    },
    when: ( ContextKeyExpr.and(( ExplorerRootContext.toNegated()), ( ExplorerResourceMoveableToTrash.toNegated())))
});
for (const menuId of [MenuId.EmptyEditorGroupContext, MenuId.EditorTabsBarContext]) {
    MenuRegistry.appendMenuItem(menuId, { command: { id: NEW_UNTITLED_FILE_COMMAND_ID, title: ( nls.localize('newFile', "New Text File")) }, group: '1_file', order: 10 });
    MenuRegistry.appendMenuItem(menuId, { command: { id: 'workbench.action.quickOpen', title: ( nls.localize('openFile', "Open File...")) }, group: '1_file', order: 20 });
}
MenuRegistry.appendMenuItem(MenuId.MenubarGoMenu, {
    group: '3_global_nav',
    command: {
        id: 'workbench.action.quickOpen',
        title: ( nls.localize(
            { key: 'miGotoFile', comment: ['&& denotes a mnemonic'] },
            "Go to &&File..."
        ))
    },
    order: 1
});
export { appendEditorTitleContextMenuItem, appendToCommandPalette };
