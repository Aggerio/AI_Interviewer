import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import * as nls from 'monaco-editor/esm/vs/nls.js';
import './media/dirtydiffDecorator.css.js';
import { Disposable, DisposableStore, toDisposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { Event } from 'monaco-editor/esm/vs/base/common/event.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';
import { registerColor, editorErrorForeground, transparent } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';
import { registerEditorAction, registerEditorContribution, EditorAction } from 'monaco-editor/esm/vs/editor/browser/editorExtensions.js';
import { getOuterEditor, PeekViewWidget, peekViewBorder, peekViewTitleBackground, peekViewTitleForeground, peekViewTitleInfoForeground } from 'monaco-editor/esm/vs/editor/contrib/peekView/browser/peekView.js';
import { ContextKeyExpr, RawContextKey, IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { EditorContextKeys } from 'monaco-editor/esm/vs/editor/common/editorContextKeys.js';
import { Position } from 'monaco-editor/esm/vs/editor/common/core/position.js';
import { rot } from 'monaco-editor/esm/vs/base/common/numbers.js';
import { KeybindingsRegistry } from 'monaco-editor/esm/vs/platform/keybinding/common/keybindingsRegistry.js';
import { EmbeddedDiffEditorWidget } from 'monaco-editor/esm/vs/editor/browser/widget/embeddedCodeEditorWidget.js';
import { Action, ActionRunner } from 'monaco-editor/esm/vs/base/common/actions.js';
import { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';
import { basename } from 'monaco-editor/esm/vs/base/common/resources.js';
import { MenuRegistry, MenuId, IMenuService, MenuItemAction } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { createAndFillInActionBarActions } from 'monaco-editor/esm/vs/platform/actions/browser/menuEntryActionViewItem.js';
import { ICodeEditorService } from 'monaco-editor/esm/vs/editor/browser/services/codeEditorService.js';
import * as dom from 'monaco-editor/esm/vs/base/browser/dom.js';
import { gotoPreviousLocation, gotoNextLocation } from 'monaco-editor/esm/vs/platform/theme/common/iconRegistry.js';
import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';
import { ThemeIcon } from 'monaco-editor/esm/vs/base/common/themables.js';
import { TextCompareEditorActiveContext } from '../../../common/contextkeys.js';
import { Color } from 'monaco-editor/esm/vs/base/common/color.js';
import { IAudioCueService, AudioCue } from 'monaco-editor/esm/vs/platform/audioCues/browser/audioCueService.js';
import { IAccessibilityService } from 'monaco-editor/esm/vs/platform/accessibility/common/accessibility.js';
import { SwitchQuickDiffViewItem, SwitchQuickDiffBaseAction } from './dirtyDiffSwitcher.js';
class DiffActionRunner extends ActionRunner {
    runAction(action, context) {
        if (action instanceof MenuItemAction) {
            return action.run(...context);
        }
        return super.runAction(action, context);
    }
}
const isDirtyDiffVisible = ( new RawContextKey('dirtyDiffVisible', false));
function getChangeHeight(change) {
    const modified = change.modifiedEndLineNumber - change.modifiedStartLineNumber + 1;
    const original = change.originalEndLineNumber - change.originalStartLineNumber + 1;
    if (change.originalEndLineNumber === 0) {
        return modified;
    }
    else if (change.modifiedEndLineNumber === 0) {
        return original;
    }
    else {
        return modified + original;
    }
}
function getModifiedEndLineNumber(change) {
    if (change.modifiedEndLineNumber === 0) {
        return change.modifiedStartLineNumber === 0 ? 1 : change.modifiedStartLineNumber;
    }
    else {
        return change.modifiedEndLineNumber;
    }
}
function lineIntersectsChange(lineNumber, change) {
    if (lineNumber === 1 && change.modifiedStartLineNumber === 0 && change.modifiedEndLineNumber === 0) {
        return true;
    }
    return lineNumber >= change.modifiedStartLineNumber && lineNumber <= (change.modifiedEndLineNumber || change.modifiedStartLineNumber);
}
let UIEditorAction = class UIEditorAction extends Action {
    constructor(editor, action, cssClass, keybindingService, instantiationService) {
        const keybinding = keybindingService.lookupKeybinding(action.id);
        const label = action.label + (keybinding ? ` (${keybinding.getLabel()})` : '');
        super(action.id, label, cssClass);
        this.instantiationService = instantiationService;
        this.action = action;
        this.editor = editor;
    }
    run() {
        return Promise.resolve(this.instantiationService.invokeFunction(accessor => this.action.run(accessor, this.editor, null)));
    }
};
UIEditorAction = ( __decorate([
    ( __param(3, IKeybindingService)),
    ( __param(4, IInstantiationService))
], UIEditorAction));
var ChangeType;
( (function(ChangeType) {
    ChangeType[ChangeType["Modify"] = 0] = "Modify";
    ChangeType[ChangeType["Add"] = 1] = "Add";
    ChangeType[ChangeType["Delete"] = 2] = "Delete";
})(ChangeType || (ChangeType = {})));
function getChangeType(change) {
    if (change.originalEndLineNumber === 0) {
        return ChangeType.Add;
    }
    else if (change.modifiedEndLineNumber === 0) {
        return ChangeType.Delete;
    }
    else {
        return ChangeType.Modify;
    }
}
function getChangeTypeColor(theme, changeType) {
    switch (changeType) {
        case ChangeType.Modify: return theme.getColor(editorGutterModifiedBackground);
        case ChangeType.Add: return theme.getColor(editorGutterAddedBackground);
        case ChangeType.Delete: return theme.getColor(editorGutterDeletedBackground);
    }
}
function getOuterEditorFromDiffEditor(accessor) {
    const diffEditors = accessor.get(ICodeEditorService).listDiffEditors();
    for (const diffEditor of diffEditors) {
        if (diffEditor.hasTextFocus() && diffEditor instanceof EmbeddedDiffEditorWidget) {
            return diffEditor.getParentEditor();
        }
    }
    return getOuterEditor(accessor);
}
let DirtyDiffWidget = class DirtyDiffWidget extends PeekViewWidget {
    constructor(editor, model, themeService, instantiationService, menuService, contextKeyService) {
        super(editor, { isResizeable: true, frameWidth: 1, keepEditorSelection: true, className: 'dirty-diff' }, instantiationService);
        this.model = model;
        this.themeService = themeService;
        this.menuService = menuService;
        this.contextKeyService = contextKeyService;
        this._index = 0;
        this._provider = '';
        this.height = undefined;
        this._disposables.add(themeService.onDidColorThemeChange(this._applyTheme, this));
        this._applyTheme(themeService.getColorTheme());
        if (this.model.original.length > 0) {
            contextKeyService = contextKeyService.createOverlay([['originalResourceScheme', this.model.original[0].uri.scheme], ['originalResourceSchemes', ( this.model.original.map(original => original.uri.scheme))]]);
        }
        this.create();
        if (editor.hasModel()) {
            this.title = basename(editor.getModel().uri);
        }
        else {
            this.title = '';
        }
        this.setTitle(this.title);
    }
    get provider() {
        return this._provider;
    }
    get index() {
        return this._index;
    }
    get visibleRange() {
        const visibleRanges = this.diffEditor.getModifiedEditor().getVisibleRanges();
        return visibleRanges.length >= 0 ? visibleRanges[0] : undefined;
    }
    showChange(index, usePosition = true) {
        const labeledChange = this.model.changes[index];
        const change = labeledChange.change;
        this._index = index;
        this.contextKeyService.createKey('originalResourceScheme', this.model.changes[index].uri.scheme);
        this.updateActions();
        this._provider = labeledChange.label;
        this.change = change;
        const originalModel = this.model.original;
        if (!originalModel) {
            return;
        }
        const onFirstDiffUpdate = Event.once(this.diffEditor.onDidUpdateDiff);
        onFirstDiffUpdate(() => setTimeout(() => this.revealChange(change), 0));
        const diffEditorModel = this.model.getDiffEditorModel(( labeledChange.uri.toString()));
        if (!diffEditorModel) {
            return;
        }
        this.diffEditor.setModel(diffEditorModel);
        this.dropdown?.setSelection(labeledChange.label);
        const position = ( new Position(getModifiedEndLineNumber(change), 1));
        const lineHeight = this.editor.getOption(65 );
        const editorHeight = this.editor.getLayoutInfo().height;
        const editorHeightInLines = Math.floor(editorHeight / lineHeight);
        const height = Math.min(getChangeHeight(change) +  8, Math.floor(editorHeightInLines / 3));
        this.renderTitle(labeledChange.label);
        const changeType = getChangeType(change);
        const changeTypeColor = getChangeTypeColor(this.themeService.getColorTheme(), changeType);
        this.style({ frameColor: changeTypeColor, arrowColor: changeTypeColor });
        const providerSpecificChanges = [];
        let contextIndex = index;
        for (const change of this.model.changes) {
            if (change.label === this.model.changes[this._index].label) {
                providerSpecificChanges.push(change.change);
                if (labeledChange === change) {
                    contextIndex = providerSpecificChanges.length - 1;
                }
            }
        }
        this._actionbarWidget.context = [diffEditorModel.modified.uri, providerSpecificChanges, contextIndex];
        if (usePosition) {
            this.show(position, height);
        }
        this.editor.focus();
    }
    renderTitle(label) {
        const providerChanges = this.model.mapChanges.get(label);
        const providerIndex = providerChanges.indexOf(this._index);
        let detail;
        if (!this.shouldUseDropdown()) {
            detail = this.model.changes.length > 1
                ? ( nls.localize(
                'changes',
                "{0} - {1} of {2} changes",
                label,
                providerIndex + 1,
                providerChanges.length
            ))
                : ( nls.localize(
                'change',
                "{0} - {1} of {2} change",
                label,
                providerIndex + 1,
                providerChanges.length
            ));
            this.dropdownContainer.style.display = 'none';
        }
        else {
            detail = this.model.changes.length > 1
                ? ( nls.localize(
                'multiChanges',
                "{0} of {1} changes",
                providerIndex + 1,
                providerChanges.length
            ))
                : ( nls.localize(
                'multiChange',
                "{0} of {1} change",
                providerIndex + 1,
                providerChanges.length
            ));
            this.dropdownContainer.style.display = 'inherit';
        }
        this.setTitle(this.title, detail);
    }
    switchQuickDiff(event) {
        const newProvider = event?.provider;
        if (newProvider === this.model.changes[this._index].label) {
            return;
        }
        let closestGreaterIndex = this._index < this.model.changes.length - 1 ? this._index + 1 : 0;
        for (let i = closestGreaterIndex; i !== this._index; i < this.model.changes.length - 1 ? i++ : i = 0) {
            if (this.model.changes[i].label === newProvider) {
                closestGreaterIndex = i;
                break;
            }
        }
        let closestLesserIndex = this._index > 0 ? this._index - 1 : this.model.changes.length - 1;
        for (let i = closestLesserIndex; i !== this._index; i >= 0 ? i-- : i = this.model.changes.length - 1) {
            if (this.model.changes[i].label === newProvider) {
                closestLesserIndex = i;
                break;
            }
        }
        const closestIndex = Math.abs(this.model.changes[closestGreaterIndex].change.modifiedEndLineNumber - this.model.changes[this._index].change.modifiedEndLineNumber)
            < Math.abs(this.model.changes[closestLesserIndex].change.modifiedEndLineNumber - this.model.changes[this._index].change.modifiedEndLineNumber)
            ? closestGreaterIndex : closestLesserIndex;
        this.showChange(closestIndex, false);
    }
    shouldUseDropdown() {
        let providersWithChangesCount = 0;
        if (this.model.mapChanges.size > 1) {
            const keys = Array.from(( this.model.mapChanges.keys()));
            for (let i = 0; (i < keys.length) && (providersWithChangesCount <= 1); i++) {
                if (this.model.mapChanges.get(keys[i]).length > 0) {
                    providersWithChangesCount++;
                }
            }
        }
        return providersWithChangesCount >= 2;
    }
    updateActions() {
        if (!this._actionbarWidget) {
            return;
        }
        const previous = this.instantiationService.createInstance(UIEditorAction, this.editor, ( new ShowPreviousChangeAction(this.editor)), ThemeIcon.asClassName(gotoPreviousLocation));
        const next = this.instantiationService.createInstance(UIEditorAction, this.editor, ( new ShowNextChangeAction(this.editor)), ThemeIcon.asClassName(gotoNextLocation));
        this._disposables.add(previous);
        this._disposables.add(next);
        const actions = [];
        if (this.menu) {
            this.menu.dispose();
        }
        this.menu = this.menuService.createMenu(MenuId.SCMChangeContext, this.contextKeyService);
        createAndFillInActionBarActions(this.menu, { shouldForwardArgs: true }, actions);
        this._actionbarWidget.clear();
        this._actionbarWidget.push(actions.reverse(), { label: false, icon: true });
        this._actionbarWidget.push([next, previous], { label: false, icon: true });
        this._actionbarWidget.push(( new Action('peekview.close', ( nls.localize('label.close', "Close")), ThemeIcon.asClassName(Codicon.close), true, () => this.dispose())), { label: false, icon: true });
    }
    _fillHead(container) {
        super._fillHead(container, true);
        this.dropdownContainer = dom.prepend(this._titleElement, dom.$('.dropdown'));
        this.dropdown = this.instantiationService.createInstance(SwitchQuickDiffViewItem, ( new SwitchQuickDiffBaseAction((event) => this.switchQuickDiff(event))), ( this.model.quickDiffs.map(quickDiffer => quickDiffer.label)), this.model.changes[this._index].label);
        this.dropdown.render(this.dropdownContainer);
        this.updateActions();
    }
    _getActionBarOptions() {
        const actionRunner = ( new DiffActionRunner());
        actionRunner.onDidRun(e => {
            if (!(e.action instanceof UIEditorAction) && !e.error) {
                this.dispose();
            }
        });
        return {
            ...super._getActionBarOptions(),
            actionRunner
        };
    }
    _fillBody(container) {
        const options = {
            scrollBeyondLastLine: true,
            scrollbar: {
                verticalScrollbarSize: 14,
                horizontal: 'auto',
                useShadows: true,
                verticalHasArrows: false,
                horizontalHasArrows: false
            },
            overviewRulerLanes: 2,
            fixedOverflowWidgets: true,
            minimap: { enabled: false },
            renderSideBySide: false,
            readOnly: false,
            renderIndicators: false,
            diffAlgorithm: 'advanced',
            stickyScroll: { enabled: false }
        };
        this.diffEditor = this.instantiationService.createInstance(EmbeddedDiffEditorWidget, container, options, {}, this.editor);
        this._disposables.add(this.diffEditor);
    }
    _onWidth(width) {
        if (typeof this.height === 'undefined') {
            return;
        }
        this.diffEditor.layout({ height: this.height, width });
    }
    _doLayoutBody(height, width) {
        super._doLayoutBody(height, width);
        this.diffEditor.layout({ height, width });
        if (typeof this.height === 'undefined' && this.change) {
            this.revealChange(this.change);
        }
        this.height = height;
    }
    revealChange(change) {
        let start, end;
        if (change.modifiedEndLineNumber === 0) {
            start = change.modifiedStartLineNumber;
            end = change.modifiedStartLineNumber + 1;
        }
        else if (change.originalEndLineNumber > 0) {
            start = change.modifiedStartLineNumber - 1;
            end = change.modifiedEndLineNumber + 1;
        }
        else {
            start = change.modifiedStartLineNumber;
            end = change.modifiedEndLineNumber;
        }
        this.diffEditor.revealLinesInCenter(start, end, 1 );
    }
    _applyTheme(theme) {
        const borderColor = theme.getColor(peekViewBorder) || Color.transparent;
        this.style({
            arrowColor: borderColor,
            frameColor: borderColor,
            headerBackgroundColor: theme.getColor(peekViewTitleBackground) || Color.transparent,
            primaryHeadingColor: theme.getColor(peekViewTitleForeground),
            secondaryHeadingColor: theme.getColor(peekViewTitleInfoForeground)
        });
    }
    revealRange(range) {
        this.editor.revealLineInCenterIfOutsideViewport(range.endLineNumber, 0 );
    }
    hasFocus() {
        return this.diffEditor.hasTextFocus();
    }
    dispose() {
        super.dispose();
        this.menu?.dispose();
    }
};
DirtyDiffWidget = ( __decorate([
    ( __param(2, IThemeService)),
    ( __param(3, IInstantiationService)),
    ( __param(4, IMenuService)),
    ( __param(5, IContextKeyService))
], DirtyDiffWidget));
class ShowPreviousChangeAction extends EditorAction {
    constructor(outerEditor) {
        super({
            id: 'editor.action.dirtydiff.previous',
            label: ( nls.localize('show previous change', "Show Previous Change")),
            alias: 'Show Previous Change',
            precondition: ( TextCompareEditorActiveContext.toNegated()),
            kbOpts: { kbExpr: EditorContextKeys.editorTextFocus, primary: 1024  | 512  | 61 , weight: 100  }
        });
        this.outerEditor = outerEditor;
    }
    run(accessor) {
        const outerEditor = this.outerEditor ?? getOuterEditorFromDiffEditor(accessor);
        if (!outerEditor) {
            return;
        }
        const controller = DirtyDiffController.get(outerEditor);
        if (!controller) {
            return;
        }
        if (!controller.canNavigate()) {
            return;
        }
        controller.previous();
    }
}
registerEditorAction(ShowPreviousChangeAction);
class ShowNextChangeAction extends EditorAction {
    constructor(outerEditor) {
        super({
            id: 'editor.action.dirtydiff.next',
            label: ( nls.localize('show next change', "Show Next Change")),
            alias: 'Show Next Change',
            precondition: ( TextCompareEditorActiveContext.toNegated()),
            kbOpts: { kbExpr: EditorContextKeys.editorTextFocus, primary: 512  | 61 , weight: 100  }
        });
        this.outerEditor = outerEditor;
    }
    run(accessor) {
        const outerEditor = this.outerEditor ?? getOuterEditorFromDiffEditor(accessor);
        if (!outerEditor) {
            return;
        }
        const controller = DirtyDiffController.get(outerEditor);
        if (!controller) {
            return;
        }
        if (!controller.canNavigate()) {
            return;
        }
        controller.next();
    }
}
registerEditorAction(ShowNextChangeAction);
MenuRegistry.appendMenuItem(MenuId.MenubarGoMenu, {
    group: '7_change_nav',
    command: {
        id: 'editor.action.dirtydiff.next',
        title: ( nls.localize(
            { key: 'miGotoNextChange', comment: ['&& denotes a mnemonic'] },
            "Next &&Change"
        ))
    },
    order: 1
});
MenuRegistry.appendMenuItem(MenuId.MenubarGoMenu, {
    group: '7_change_nav',
    command: {
        id: 'editor.action.dirtydiff.previous',
        title: ( nls.localize(
            { key: 'miGotoPreviousChange', comment: ['&& denotes a mnemonic'] },
            "Previous &&Change"
        ))
    },
    order: 2
});
class GotoPreviousChangeAction extends EditorAction {
    constructor() {
        super({
            id: 'workbench.action.editor.previousChange',
            label: ( nls.localize('move to previous change', "Go to Previous Change")),
            alias: 'Go to Previous Change',
            precondition: ( TextCompareEditorActiveContext.toNegated()),
            kbOpts: { kbExpr: EditorContextKeys.editorTextFocus, primary: 1024  | 512  | 63 , weight: 100  }
        });
    }
    async run(accessor) {
        const outerEditor = getOuterEditorFromDiffEditor(accessor);
        const audioCueService = accessor.get(IAudioCueService);
        const accessibilityService = accessor.get(IAccessibilityService);
        const codeEditorService = accessor.get(ICodeEditorService);
        if (!outerEditor || !outerEditor.hasModel()) {
            return;
        }
        const controller = DirtyDiffController.get(outerEditor);
        if (!controller || !controller.modelRegistry) {
            return;
        }
        const lineNumber = outerEditor.getPosition().lineNumber;
        const model = controller.modelRegistry.getModel(outerEditor.getModel());
        if (!model || model.changes.length === 0) {
            return;
        }
        const index = model.findPreviousClosestChange(lineNumber, false);
        const change = model.changes[index];
        await playAudioCueForChange(change.change, audioCueService);
        setPositionAndSelection(change.change, outerEditor, accessibilityService, codeEditorService);
    }
}
registerEditorAction(GotoPreviousChangeAction);
class GotoNextChangeAction extends EditorAction {
    constructor() {
        super({
            id: 'workbench.action.editor.nextChange',
            label: ( nls.localize('move to next change', "Go to Next Change")),
            alias: 'Go to Next Change',
            precondition: ( TextCompareEditorActiveContext.toNegated()),
            kbOpts: { kbExpr: EditorContextKeys.editorTextFocus, primary: 512  | 63 , weight: 100  }
        });
    }
    async run(accessor) {
        const audioCueService = accessor.get(IAudioCueService);
        const outerEditor = getOuterEditorFromDiffEditor(accessor);
        const accessibilityService = accessor.get(IAccessibilityService);
        const codeEditorService = accessor.get(ICodeEditorService);
        if (!outerEditor || !outerEditor.hasModel()) {
            return;
        }
        const controller = DirtyDiffController.get(outerEditor);
        if (!controller || !controller.modelRegistry) {
            return;
        }
        const lineNumber = outerEditor.getPosition().lineNumber;
        const model = controller.modelRegistry.getModel(outerEditor.getModel());
        if (!model || model.changes.length === 0) {
            return;
        }
        const index = model.findNextClosestChange(lineNumber, false);
        const change = model.changes[index].change;
        await playAudioCueForChange(change, audioCueService);
        setPositionAndSelection(change, outerEditor, accessibilityService, codeEditorService);
    }
}
function setPositionAndSelection(change, editor, accessibilityService, codeEditorService) {
    const position = ( new Position(change.modifiedStartLineNumber, 1));
    editor.setPosition(position);
    editor.revealPositionInCenter(position);
    if (accessibilityService.isScreenReaderOptimized()) {
        editor.setSelection({ startLineNumber: change.modifiedStartLineNumber, startColumn: 0, endLineNumber: change.modifiedStartLineNumber, endColumn: Number.MAX_VALUE });
        codeEditorService.getActiveCodeEditor()?.writeScreenReaderContent('diff-navigation');
    }
}
async function playAudioCueForChange(change, audioCueService) {
    const changeType = getChangeType(change);
    switch (changeType) {
        case ChangeType.Add:
            audioCueService.playAudioCue(AudioCue.diffLineInserted, true);
            break;
        case ChangeType.Delete:
            audioCueService.playAudioCue(AudioCue.diffLineDeleted, true);
            break;
        case ChangeType.Modify:
            audioCueService.playAudioCue(AudioCue.diffLineModified, true);
            break;
    }
}
registerEditorAction(GotoNextChangeAction);
KeybindingsRegistry.registerCommandAndKeybindingRule({
    id: 'closeDirtyDiff',
    weight: 100  + 50,
    primary: 9 ,
    secondary: [1024  | 9 ],
    when: ( ContextKeyExpr.and(isDirtyDiffVisible)),
    handler: (accessor) => {
        const outerEditor = getOuterEditorFromDiffEditor(accessor);
        if (!outerEditor) {
            return;
        }
        const controller = DirtyDiffController.get(outerEditor);
        if (!controller) {
            return;
        }
        controller.close();
    }
});
let DirtyDiffController = class DirtyDiffController extends Disposable {
    static { this.ID = 'editor.contrib.dirtydiff'; }
    static get(editor) {
        return editor.getContribution(DirtyDiffController.ID);
    }
    constructor(editor, contextKeyService, configurationService, instantiationService) {
        super();
        this.editor = editor;
        this.configurationService = configurationService;
        this.instantiationService = instantiationService;
        this.modelRegistry = null;
        this.model = null;
        this.widget = null;
        this.session = Disposable.None;
        this.mouseDownInfo = null;
        this.enabled = false;
        this.gutterActionDisposables = ( new DisposableStore());
        this.enabled = !contextKeyService.getContextKeyValue('isInDiffEditor');
        this.stylesheet = dom.createStyleSheet();
        this._register(toDisposable(() => this.stylesheet.remove()));
        if (this.enabled) {
            this.isDirtyDiffVisible = isDirtyDiffVisible.bindTo(contextKeyService);
            this._register(editor.onDidChangeModel(() => this.close()));
            const onDidChangeGutterAction = Event.filter(configurationService.onDidChangeConfiguration, e => e.affectsConfiguration('scm.diffDecorationsGutterAction'));
            this._register(onDidChangeGutterAction(this.onDidChangeGutterAction, this));
            this.onDidChangeGutterAction();
        }
    }
    onDidChangeGutterAction() {
        const gutterAction = this.configurationService.getValue('scm.diffDecorationsGutterAction');
        this.gutterActionDisposables.dispose();
        this.gutterActionDisposables = ( new DisposableStore());
        if (gutterAction === 'diff') {
            this.gutterActionDisposables.add(this.editor.onMouseDown(e => this.onEditorMouseDown(e)));
            this.gutterActionDisposables.add(this.editor.onMouseUp(e => this.onEditorMouseUp(e)));
            this.stylesheet.textContent = `
				.monaco-editor .dirty-diff-glyph {
					cursor: pointer;
				}

				.monaco-editor .margin-view-overlays .dirty-diff-glyph:hover::before {
					height: 100%;
					width: 6px;
					left: -6px;
				}

				.monaco-editor .margin-view-overlays .dirty-diff-deleted:hover::after {
					bottom: 0;
					border-top-width: 0;
					border-bottom-width: 0;
				}
			`;
        }
        else {
            this.stylesheet.textContent = ``;
        }
    }
    canNavigate() {
        return !this.widget || (this.widget?.index === -1) || (!!this.model && this.model.changes.length > 1);
    }
    refresh() {
        this.widget?.showChange(this.widget.index, false);
    }
    next(lineNumber) {
        if (!this.assertWidget()) {
            return;
        }
        if (!this.widget || !this.model) {
            return;
        }
        let index;
        if (this.editor.hasModel() && (typeof lineNumber === 'number' || !this.widget.provider)) {
            index = this.model.findNextClosestChange(typeof lineNumber === 'number' ? lineNumber : this.editor.getPosition().lineNumber, true, this.widget.provider);
        }
        else {
            const providerChanges = this.model.mapChanges.get(this.widget.provider) ?? ( this.model.mapChanges.values()).next().value;
            const mapIndex = providerChanges.findIndex(value => value === this.widget.index);
            index = providerChanges[rot(mapIndex + 1, providerChanges.length)];
        }
        this.widget.showChange(index);
    }
    previous(lineNumber) {
        if (!this.assertWidget()) {
            return;
        }
        if (!this.widget || !this.model) {
            return;
        }
        let index;
        if (this.editor.hasModel() && (typeof lineNumber === 'number')) {
            index = this.model.findPreviousClosestChange(typeof lineNumber === 'number' ? lineNumber : this.editor.getPosition().lineNumber, true, this.widget.provider);
        }
        else {
            const providerChanges = this.model.mapChanges.get(this.widget.provider) ?? ( this.model.mapChanges.values()).next().value;
            const mapIndex = providerChanges.findIndex(value => value === this.widget.index);
            index = providerChanges[rot(mapIndex - 1, providerChanges.length)];
        }
        this.widget.showChange(index);
    }
    close() {
        this.session.dispose();
        this.session = Disposable.None;
    }
    assertWidget() {
        if (!this.enabled) {
            return false;
        }
        if (this.widget) {
            if (!this.model || this.model.changes.length === 0) {
                this.close();
                return false;
            }
            return true;
        }
        if (!this.modelRegistry) {
            return false;
        }
        const editorModel = this.editor.getModel();
        if (!editorModel) {
            return false;
        }
        const model = this.modelRegistry.getModel(editorModel);
        if (!model) {
            return false;
        }
        if (model.changes.length === 0) {
            return false;
        }
        this.model = model;
        this.widget = this.instantiationService.createInstance(DirtyDiffWidget, this.editor, model);
        this.isDirtyDiffVisible.set(true);
        const disposables = ( new DisposableStore());
        disposables.add(Event.once(this.widget.onDidClose)(this.close, this));
        ( Event.chain(model.onDidChange)
            .filter(e => e.diff.length > 0)
            .map(e => e.diff))
            .event(this.onDidModelChange, this, disposables);
        disposables.add(this.widget);
        disposables.add(toDisposable(() => {
            this.model = null;
            this.widget = null;
            this.isDirtyDiffVisible.set(false);
            this.editor.focus();
        }));
        this.session = disposables;
        return true;
    }
    onDidModelChange(splices) {
        if (!this.model || !this.widget || this.widget.hasFocus()) {
            return;
        }
        for (const splice of splices) {
            if (splice.start <= this.widget.index) {
                this.next();
                return;
            }
        }
        this.refresh();
    }
    onEditorMouseDown(e) {
        this.mouseDownInfo = null;
        const range = e.target.range;
        if (!range) {
            return;
        }
        if (!e.event.leftButton) {
            return;
        }
        if (e.target.type !== 4 ) {
            return;
        }
        if (!e.target.element) {
            return;
        }
        if (e.target.element.className.indexOf('dirty-diff-glyph') < 0) {
            return;
        }
        const data = e.target.detail;
        const offsetLeftInGutter = e.target.element.offsetLeft;
        const gutterOffsetX = data.offsetX - offsetLeftInGutter;
        if (gutterOffsetX < -3 || gutterOffsetX > 3) {
            return;
        }
        this.mouseDownInfo = { lineNumber: range.startLineNumber };
    }
    onEditorMouseUp(e) {
        if (!this.mouseDownInfo) {
            return;
        }
        const { lineNumber } = this.mouseDownInfo;
        this.mouseDownInfo = null;
        const range = e.target.range;
        if (!range || range.startLineNumber !== lineNumber) {
            return;
        }
        if (e.target.type !== 4 ) {
            return;
        }
        if (!this.modelRegistry) {
            return;
        }
        const editorModel = this.editor.getModel();
        if (!editorModel) {
            return;
        }
        const model = this.modelRegistry.getModel(editorModel);
        if (!model) {
            return;
        }
        const index = model.changes.findIndex(change => lineIntersectsChange(lineNumber, change.change));
        if (index < 0) {
            return;
        }
        if (index === this.widget?.index) {
            this.close();
        }
        else {
            this.next(lineNumber);
        }
    }
    getChanges() {
        if (!this.modelRegistry) {
            return [];
        }
        if (!this.editor.hasModel()) {
            return [];
        }
        const model = this.modelRegistry.getModel(this.editor.getModel());
        if (!model) {
            return [];
        }
        return ( model.changes.map(change => change.change));
    }
    dispose() {
        this.gutterActionDisposables.dispose();
        super.dispose();
    }
};
DirtyDiffController = ( __decorate([
    ( __param(1, IContextKeyService)),
    ( __param(2, IConfigurationService)),
    ( __param(3, IInstantiationService))
], DirtyDiffController));
const editorGutterModifiedBackground = registerColor('editorGutter.modifiedBackground', {
    dark: '#1B81A8',
    light: '#2090D3',
    hcDark: '#1B81A8',
    hcLight: '#2090D3'
}, ( nls.localize(
    'editorGutterModifiedBackground',
    "Editor gutter background color for lines that are modified."
)));
const editorGutterAddedBackground = registerColor('editorGutter.addedBackground', {
    dark: '#487E02',
    light: '#48985D',
    hcDark: '#487E02',
    hcLight: '#48985D'
}, ( nls.localize(
    'editorGutterAddedBackground',
    "Editor gutter background color for lines that are added."
)));
const editorGutterDeletedBackground = registerColor('editorGutter.deletedBackground', {
    dark: editorErrorForeground,
    light: editorErrorForeground,
    hcDark: editorErrorForeground,
    hcLight: editorErrorForeground
}, ( nls.localize(
    'editorGutterDeletedBackground',
    "Editor gutter background color for lines that are deleted."
)));
registerColor('minimapGutter.modifiedBackground', {
    dark: editorGutterModifiedBackground,
    light: editorGutterModifiedBackground,
    hcDark: editorGutterModifiedBackground,
    hcLight: editorGutterModifiedBackground
}, ( nls.localize(
    'minimapGutterModifiedBackground',
    "Minimap gutter background color for lines that are modified."
)));
registerColor('minimapGutter.addedBackground', {
    dark: editorGutterAddedBackground,
    light: editorGutterAddedBackground,
    hcDark: editorGutterAddedBackground,
    hcLight: editorGutterAddedBackground
}, ( nls.localize(
    'minimapGutterAddedBackground',
    "Minimap gutter background color for lines that are added."
)));
registerColor('minimapGutter.deletedBackground', {
    dark: editorGutterDeletedBackground,
    light: editorGutterDeletedBackground,
    hcDark: editorGutterDeletedBackground,
    hcLight: editorGutterDeletedBackground
}, ( nls.localize(
    'minimapGutterDeletedBackground',
    "Minimap gutter background color for lines that are deleted."
)));
registerColor('editorOverviewRuler.modifiedForeground', { dark: ( transparent(editorGutterModifiedBackground, 0.6)), light: ( transparent(editorGutterModifiedBackground, 0.6)), hcDark: ( transparent(editorGutterModifiedBackground, 0.6)), hcLight: ( transparent(editorGutterModifiedBackground, 0.6)) }, ( nls.localize(
    'overviewRulerModifiedForeground',
    'Overview ruler marker color for modified content.'
)));
registerColor('editorOverviewRuler.addedForeground', { dark: ( transparent(editorGutterAddedBackground, 0.6)), light: ( transparent(editorGutterAddedBackground, 0.6)), hcDark: ( transparent(editorGutterAddedBackground, 0.6)), hcLight: ( transparent(editorGutterAddedBackground, 0.6)) }, ( nls.localize(
    'overviewRulerAddedForeground',
    'Overview ruler marker color for added content.'
)));
registerColor('editorOverviewRuler.deletedForeground', { dark: ( transparent(editorGutterDeletedBackground, 0.6)), light: ( transparent(editorGutterDeletedBackground, 0.6)), hcDark: ( transparent(editorGutterDeletedBackground, 0.6)), hcLight: ( transparent(editorGutterDeletedBackground, 0.6)) }, ( nls.localize(
    'overviewRulerDeletedForeground',
    'Overview ruler marker color for deleted content.'
)));
async function getOriginalResource(quickDiffService, uri, language, isSynchronized) {
    const quickDiffs = await quickDiffService.getQuickDiffs(uri, language, isSynchronized);
    return quickDiffs.length > 0 ? quickDiffs[0].originalResource : null;
}
registerEditorContribution(DirtyDiffController.ID, DirtyDiffController, 1 );
export { DirtyDiffController, GotoNextChangeAction, GotoPreviousChangeAction, ShowNextChangeAction, ShowPreviousChangeAction, getOriginalResource, isDirtyDiffVisible };
