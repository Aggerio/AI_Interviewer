import { Color, RGBA } from 'monaco-editor/esm/vs/base/common/color.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { registerColor, transparent, selectBackground, selectForeground, selectBorder, editorWidgetBorder, checkboxBackground, checkboxForeground, checkboxBorder, inputBackground, inputForeground, inputBorder, listHoverBackground, focusBorder } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';
import { PANEL_BORDER } from '../../../common/theme.js';
const settingsHeaderForeground = registerColor('settings.headerForeground', { light: '#444444', dark: '#e7e7e7', hcDark: '#ffffff', hcLight: '#292929' }, ( localize(
    'headerForeground',
    "The foreground color for a section header or active title."
)));
const settingsHeaderHoverForeground = registerColor('settings.settingsHeaderHoverForeground', { light: ( transparent(settingsHeaderForeground, 0.7)), dark: ( transparent(settingsHeaderForeground, 0.7)), hcDark: ( transparent(settingsHeaderForeground, 0.7)), hcLight: ( transparent(settingsHeaderForeground, 0.7)) }, ( localize(
    'settingsHeaderHoverForeground',
    "The foreground color for a section header or hovered title."
)));
registerColor('settings.modifiedItemIndicator', {
    light: ( new Color(( new RGBA(102, 175, 224)))),
    dark: ( new Color(( new RGBA(12, 125, 157)))),
    hcDark: ( new Color(( new RGBA(0, 73, 122)))),
    hcLight: ( new Color(( new RGBA(102, 175, 224)))),
}, ( localize('modifiedItemForeground', "The color of the modified setting indicator.")));
const settingsHeaderBorder = registerColor('settings.headerBorder', { dark: PANEL_BORDER, light: PANEL_BORDER, hcDark: PANEL_BORDER, hcLight: PANEL_BORDER }, ( localize('settingsHeaderBorder', "The color of the header container border.")));
const settingsSashBorder = registerColor('settings.sashBorder', { dark: PANEL_BORDER, light: PANEL_BORDER, hcDark: PANEL_BORDER, hcLight: PANEL_BORDER }, ( localize(
    'settingsSashBorder',
    "The color of the Settings editor splitview sash border."
)));
const settingsSelectBackground = registerColor(`settings.dropdownBackground`, { dark: selectBackground, light: selectBackground, hcDark: selectBackground, hcLight: selectBackground }, ( localize('settingsDropdownBackground', "Settings editor dropdown background.")));
const settingsSelectForeground = registerColor('settings.dropdownForeground', { dark: selectForeground, light: selectForeground, hcDark: selectForeground, hcLight: selectForeground }, ( localize('settingsDropdownForeground', "Settings editor dropdown foreground.")));
const settingsSelectBorder = registerColor('settings.dropdownBorder', { dark: selectBorder, light: selectBorder, hcDark: selectBorder, hcLight: selectBorder }, ( localize('settingsDropdownBorder', "Settings editor dropdown border.")));
const settingsSelectListBorder = registerColor('settings.dropdownListBorder', { dark: editorWidgetBorder, light: editorWidgetBorder, hcDark: editorWidgetBorder, hcLight: editorWidgetBorder }, ( localize(
    'settingsDropdownListBorder',
    "Settings editor dropdown list border. This surrounds the options and separates the options from the description."
)));
registerColor('settings.checkboxBackground', { dark: checkboxBackground, light: checkboxBackground, hcDark: checkboxBackground, hcLight: checkboxBackground }, ( localize('settingsCheckboxBackground', "Settings editor checkbox background.")));
registerColor('settings.checkboxForeground', { dark: checkboxForeground, light: checkboxForeground, hcDark: checkboxForeground, hcLight: checkboxForeground }, ( localize('settingsCheckboxForeground', "Settings editor checkbox foreground.")));
registerColor('settings.checkboxBorder', { dark: checkboxBorder, light: checkboxBorder, hcDark: checkboxBorder, hcLight: checkboxBorder }, ( localize('settingsCheckboxBorder', "Settings editor checkbox border.")));
const settingsTextInputBackground = registerColor('settings.textInputBackground', { dark: inputBackground, light: inputBackground, hcDark: inputBackground, hcLight: inputBackground }, ( localize('textInputBoxBackground', "Settings editor text input box background.")));
const settingsTextInputForeground = registerColor('settings.textInputForeground', { dark: inputForeground, light: inputForeground, hcDark: inputForeground, hcLight: inputForeground }, ( localize('textInputBoxForeground', "Settings editor text input box foreground.")));
const settingsTextInputBorder = registerColor('settings.textInputBorder', { dark: inputBorder, light: inputBorder, hcDark: inputBorder, hcLight: inputBorder }, ( localize('textInputBoxBorder', "Settings editor text input box border.")));
const settingsNumberInputBackground = registerColor('settings.numberInputBackground', { dark: inputBackground, light: inputBackground, hcDark: inputBackground, hcLight: inputBackground }, ( localize('numberInputBoxBackground', "Settings editor number input box background.")));
const settingsNumberInputForeground = registerColor('settings.numberInputForeground', { dark: inputForeground, light: inputForeground, hcDark: inputForeground, hcLight: inputForeground }, ( localize('numberInputBoxForeground', "Settings editor number input box foreground.")));
const settingsNumberInputBorder = registerColor('settings.numberInputBorder', { dark: inputBorder, light: inputBorder, hcDark: inputBorder, hcLight: inputBorder }, ( localize('numberInputBoxBorder', "Settings editor number input box border.")));
registerColor('settings.focusedRowBackground', {
    dark: ( transparent(listHoverBackground, .6)),
    light: ( transparent(listHoverBackground, .6)),
    hcDark: null,
    hcLight: null,
}, ( localize(
    'focusedRowBackground',
    "The background color of a settings row when focused."
)));
registerColor('settings.rowHoverBackground', {
    dark: ( transparent(listHoverBackground, .3)),
    light: ( transparent(listHoverBackground, .3)),
    hcDark: null,
    hcLight: null
}, ( localize(
    'settings.rowHoverBackground',
    "The background color of a settings row when hovered."
)));
registerColor('settings.focusedRowBorder', {
    dark: focusBorder,
    light: focusBorder,
    hcDark: focusBorder,
    hcLight: focusBorder
}, ( localize(
    'settings.focusedRowBorder',
    "The color of the row's top and bottom border when the row is focused."
)));
export { settingsHeaderBorder, settingsHeaderForeground, settingsHeaderHoverForeground, settingsNumberInputBackground, settingsNumberInputBorder, settingsNumberInputForeground, settingsSashBorder, settingsSelectBackground, settingsSelectBorder, settingsSelectForeground, settingsSelectListBorder, settingsTextInputBackground, settingsTextInputBorder, settingsTextInputForeground };
