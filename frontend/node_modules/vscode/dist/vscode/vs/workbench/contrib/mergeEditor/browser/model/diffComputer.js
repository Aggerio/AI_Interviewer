import { __decorate, __param } from '../../../../../../../node_modules/tslib/tslib.es6.js';
import { assertFn, checkAdjacentItems } from 'monaco-editor/esm/vs/base/common/assert.js';
import { IEditorWorkerService } from 'monaco-editor/esm/vs/editor/common/services/editorWorker.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { LineRange } from './lineRange.js';
import { DetailedLineRangeMapping, RangeMapping } from './mapping.js';
import { observableConfigValue } from '../utils.js';
let MergeDiffComputer = class MergeDiffComputer {
    constructor(editorWorkerService, configurationService) {
        this.editorWorkerService = editorWorkerService;
        this.configurationService = configurationService;
        this.mergeAlgorithm = ( observableConfigValue('mergeEditor.diffAlgorithm', 'advanced', this.configurationService)
            .map(v => v === 'smart' ? 'legacy' : v === 'experimental' ? 'advanced' : v));
    }
    async computeDiff(textModel1, textModel2, reader) {
        const diffAlgorithm = this.mergeAlgorithm.read(reader);
        const result = await this.editorWorkerService.computeDiff(textModel1.uri, textModel2.uri, {
            ignoreTrimWhitespace: false,
            maxComputationTimeMs: 0,
            computeMoves: false,
        }, diffAlgorithm);
        if (!result) {
            throw new Error('Diff computation failed');
        }
        if (textModel1.isDisposed() || textModel2.isDisposed()) {
            return { diffs: null };
        }
        const changes = ( result.changes.map(c => ( new DetailedLineRangeMapping(
            toLineRange(c.originalRange),
            textModel1,
            toLineRange(c.modifiedRange),
            textModel2,
            c.innerChanges?.map(ic => toRangeMapping(ic))
        ))));
        assertFn(() => {
            return changes.length === 0 || (changes[0].inputRange.startLineNumber === changes[0].outputRange.startLineNumber &&
                checkAdjacentItems(changes, (m1, m2) => m2.inputRange.startLineNumber - m1.inputRange.endLineNumberExclusive === m2.outputRange.startLineNumber - m1.outputRange.endLineNumberExclusive &&
                    m1.inputRange.endLineNumberExclusive < m2.inputRange.startLineNumber &&
                    m1.outputRange.endLineNumberExclusive < m2.outputRange.startLineNumber));
        });
        return {
            diffs: changes
        };
    }
};
MergeDiffComputer = ( __decorate([
    ( __param(0, IEditorWorkerService)),
    ( __param(1, IConfigurationService))
], MergeDiffComputer));
function toLineRange(range) {
    return ( new LineRange(range.startLineNumber, range.length));
}
function toRangeMapping(mapping) {
    return ( new RangeMapping(mapping.originalRange, mapping.modifiedRange));
}
export { MergeDiffComputer, toLineRange, toRangeMapping };
