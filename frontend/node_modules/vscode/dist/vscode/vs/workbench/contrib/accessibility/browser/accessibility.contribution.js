import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { ICodeEditorService } from 'monaco-editor/esm/vs/editor/browser/services/codeEditorService.js';
import { AccessibilityHelpNLS } from 'monaco-editor/esm/vs/editor/common/standaloneStrings.js';
import { ToggleTabFocusModeAction } from 'monaco-editor/esm/vs/editor/contrib/toggleTabFocusMode/browser/toggleTabFocusMode.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';
import { registerAccessibilityConfiguration, AccessibilityHelpAction, AccessibleViewAction, AccessibleViewNextAction, AccessibleViewPreviousAction } from './accessibilityContribution.js';
import * as strings from 'monaco-editor/esm/vs/base/common/strings.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { Extensions } from '../../../common/contributions.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { ICommandService } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';
import { NEW_UNTITLED_FILE_COMMAND_ID } from '../../files/browser/fileConstants.js';
import { ModesHoverController } from 'monaco-editor/esm/vs/editor/contrib/hover/browser/hover.js';
import { IContextViewService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';
import { EditorContextKeys } from 'monaco-editor/esm/vs/editor/common/editorContextKeys.js';
import { getNotificationFromContext } from '../../../browser/parts/notifications/notificationsCommands.js';
import { IListService, WorkbenchList } from 'monaco-editor/esm/vs/platform/list/browser/listService.js';
import { NotificationFocusedContext } from '../../../common/contextkeys.js';
import { IAccessibleViewService } from './accessibleView.js';
import { IHoverService } from '../../../services/hover/browser/hover.js';
import { alert } from 'monaco-editor/esm/vs/base/browser/ui/aria/aria.js';
registerAccessibilityConfiguration();
let AccessibilityHelpProvider = class AccessibilityHelpProvider {
    onClose() {
        this._editor.focus();
    }
    constructor(_editor, _keybindingService) {
        this._editor = _editor;
        this._keybindingService = _keybindingService;
        this.options = { type: "help" , ariaLabel: ( localize('editor-help', "editor accessibility help")), readMoreUrl: 'https://go.microsoft.com/fwlink/?linkid=851010' };
        this.verbositySettingKey = "accessibility.verbosity.editor" ;
    }
    _descriptionForCommand(commandId, msg, noKbMsg) {
        const kb = this._keybindingService.lookupKeybinding(commandId);
        if (kb) {
            return strings.format(msg, kb.getAriaLabel());
        }
        return strings.format(noKbMsg, commandId);
    }
    provideContent() {
        const options = this._editor.getOptions();
        const content = [];
        if (options.get(60 )) {
            if (options.get(89 )) {
                content.push(AccessibilityHelpNLS.readonlyDiffEditor);
            }
            else {
                content.push(AccessibilityHelpNLS.editableDiffEditor);
            }
        }
        else {
            if (options.get(89 )) {
                content.push(AccessibilityHelpNLS.readonlyEditor);
            }
            else {
                content.push(AccessibilityHelpNLS.editableEditor);
            }
        }
        if (options.get(141 )) {
            content.push(this._descriptionForCommand(ToggleTabFocusModeAction.ID, AccessibilityHelpNLS.tabFocusModeOnMsg, AccessibilityHelpNLS.tabFocusModeOnMsgNoKb));
        }
        else {
            content.push(this._descriptionForCommand(ToggleTabFocusModeAction.ID, AccessibilityHelpNLS.tabFocusModeOffMsg, AccessibilityHelpNLS.tabFocusModeOffMsgNoKb));
        }
        return content.join('\n');
    }
};
AccessibilityHelpProvider = ( __decorate([
    ( __param(1, IKeybindingService))
], AccessibilityHelpProvider));
class EditorAccessibilityHelpContribution extends Disposable {
    constructor() {
        super();
        this._register(AccessibilityHelpAction.addImplementation(95, 'editor', async (accessor) => {
            const codeEditorService = accessor.get(ICodeEditorService);
            const accessibleViewService = accessor.get(IAccessibleViewService);
            const instantiationService = accessor.get(IInstantiationService);
            const commandService = accessor.get(ICommandService);
            let codeEditor = codeEditorService.getActiveCodeEditor() || codeEditorService.getFocusedCodeEditor();
            if (!codeEditor) {
                await commandService.executeCommand(NEW_UNTITLED_FILE_COMMAND_ID);
                codeEditor = codeEditorService.getActiveCodeEditor();
            }
            accessibleViewService.show(instantiationService.createInstance(AccessibilityHelpProvider, codeEditor));
        }));
    }
}
const workbenchRegistry = ( Registry.as(Extensions.Workbench));
workbenchRegistry.registerWorkbenchContribution(EditorAccessibilityHelpContribution, 4 );
class HoverAccessibleViewContribution extends Disposable {
    constructor() {
        super();
        this._options = {
            ariaLabel: ( localize('hoverAccessibleView', "Hover Accessible View")), language: 'typescript', type: "view"
        };
        this._register(AccessibleViewAction.addImplementation(95, 'hover', accessor => {
            const accessibleViewService = accessor.get(IAccessibleViewService);
            const codeEditorService = accessor.get(ICodeEditorService);
            const editor = codeEditorService.getActiveCodeEditor() || codeEditorService.getFocusedCodeEditor();
            const editorHoverContent = editor ? ModesHoverController.get(editor)?.getWidgetContent() ?? undefined : undefined;
            if (!editor || !editorHoverContent) {
                return false;
            }
            this._options.language = editor?.getModel()?.getLanguageId() ?? undefined;
            accessibleViewService.show({
                verbositySettingKey: "accessibility.verbosity.hover" ,
                provideContent() { return editorHoverContent; },
                onClose() {
                    ModesHoverController.get(editor)?.focus();
                },
                options: this._options
            });
            return true;
        }, EditorContextKeys.hoverFocused));
        this._register(AccessibleViewAction.addImplementation(90, 'extension-hover', accessor => {
            const accessibleViewService = accessor.get(IAccessibleViewService);
            const contextViewService = accessor.get(IContextViewService);
            const contextViewElement = contextViewService.getContextViewElement();
            const extensionHoverContent = contextViewElement?.textContent ?? undefined;
            const hoverService = accessor.get(IHoverService);
            if (contextViewElement.classList.contains('accessible-view-container') || !extensionHoverContent) {
                return false;
            }
            accessibleViewService.show({
                verbositySettingKey: "accessibility.verbosity.hover" ,
                provideContent() { return extensionHoverContent; },
                onClose() {
                    hoverService.showAndFocusLastHover();
                },
                options: this._options
            });
            return true;
        }));
    }
}
const workbenchContributionsRegistry = ( Registry.as(Extensions.Workbench));
workbenchContributionsRegistry.registerWorkbenchContribution(HoverAccessibleViewContribution, 4 );
class NotificationAccessibleViewContribution extends Disposable {
    constructor() {
        super();
        this._register(AccessibleViewAction.addImplementation(90, 'notifications', accessor => {
            const accessibleViewService = accessor.get(IAccessibleViewService);
            const listService = accessor.get(IListService);
            const commandService = accessor.get(ICommandService);
            function renderAccessibleView() {
                const notification = getNotificationFromContext(listService);
                if (!notification) {
                    return false;
                }
                commandService.executeCommand('notifications.showList');
                let notificationIndex;
                let length;
                const list = listService.lastFocusedList;
                if (list instanceof WorkbenchList) {
                    notificationIndex = list.indexOf(notification);
                    length = list.length;
                }
                if (notificationIndex === undefined) {
                    return false;
                }
                function focusList() {
                    commandService.executeCommand('notifications.showList');
                    if (list && notificationIndex !== undefined) {
                        list.domFocus();
                        try {
                            list.setFocus([notificationIndex]);
                        }
                        catch { }
                    }
                }
                const message = ( notification.message.original.toString());
                if (!message) {
                    return false;
                }
                accessibleViewService.show({
                    provideContent: () => {
                        return ( localize(
                            'notification.accessibleView',
                            '{0} Source: {1}',
                            message,
                            notification.source
                        ));
                    },
                    onClose() {
                        focusList();
                    },
                    next() {
                        if (!list) {
                            return;
                        }
                        focusList();
                        list.focusNext();
                        alertFocusChange(notificationIndex, length, 'next');
                        renderAccessibleView();
                    },
                    previous() {
                        if (!list) {
                            return;
                        }
                        focusList();
                        list.focusPrevious();
                        alertFocusChange(notificationIndex, length, 'previous');
                        renderAccessibleView();
                    },
                    verbositySettingKey: "accessibility.verbosity.notification" ,
                    options: {
                        ariaLabel: ( localize('notification', "Notification Accessible View")),
                        type: "view"
                    }
                });
                return true;
            }
            return renderAccessibleView();
        }, NotificationFocusedContext));
    }
}
workbenchContributionsRegistry.registerWorkbenchContribution(NotificationAccessibleViewContribution, 4 );
class AccessibleViewNavigatorContribution extends Disposable {
    constructor() {
        super();
        this._register(AccessibleViewNextAction.addImplementation(95, 'next', accessor => {
            const accessibleViewService = accessor.get(IAccessibleViewService);
            accessibleViewService.next();
            return true;
        }));
        this._register(AccessibleViewPreviousAction.addImplementation(95, 'previous', accessor => {
            const accessibleViewService = accessor.get(IAccessibleViewService);
            accessibleViewService.previous();
            return true;
        }));
    }
}
workbenchContributionsRegistry.registerWorkbenchContribution(AccessibleViewNavigatorContribution, 4 );
function alertFocusChange(index, length, type) {
    if (index === undefined || length === undefined) {
        return;
    }
    const number = index + 1;
    if (type === 'next' && number + 1 <= length) {
        alert(`Focused ${number + 1} of ${length}`);
    }
    else if (type === 'previous' && number - 1 > 0) {
        alert(`Focused ${number - 1} of ${length}`);
    }
    return;
}
export { alertFocusChange };
