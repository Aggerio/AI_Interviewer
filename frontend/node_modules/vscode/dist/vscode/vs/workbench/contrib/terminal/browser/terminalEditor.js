import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import * as dom from 'monaco-editor/esm/vs/base/browser/dom.js';
import { DropdownWithPrimaryActionViewItem } from '../../../../platform/actions/browser/dropdownWithPrimaryActionViewItem.js';
import { MenuId, MenuItemAction, IMenuService } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { IContextMenuService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';
import { ITelemetryService } from 'monaco-editor/esm/vs/platform/telemetry/common/telemetry.js';
import { IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';
import { EditorPane } from '../../../browser/parts/editor/editorPane.js';
import { terminalEditorId, ITerminalEditorService, ITerminalService } from './terminal.js';
import { getTerminalActionBarArgs } from './terminalMenus.js';
import { ITerminalProfileResolverService, ITerminalProfileService } from '../common/terminal.js';
import { isLinux, isMacintosh } from 'monaco-editor/esm/vs/base/common/platform.js';
import { BrowserFeatures } from 'monaco-editor/esm/vs/base/browser/canIUse.js';
import { INotificationService } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';
import { openContextMenu } from './terminalContextMenu.js';
import { ACTIVE_GROUP } from '../../../services/editor/common/editorService.js';
import { IWorkbenchLayoutService } from '../../../services/layout/browser/layoutService.js';
let TerminalEditor = class TerminalEditor extends EditorPane {
    constructor(telemetryService, themeService, storageService, _terminalEditorService, _terminalProfileResolverService, _terminalService, contextKeyService, menuService, _instantiationService, _contextMenuService, _notificationService, _terminalProfileService, _workbenchLayoutService) {
        super(terminalEditorId, telemetryService, themeService, storageService);
        this._terminalEditorService = _terminalEditorService;
        this._terminalProfileResolverService = _terminalProfileResolverService;
        this._terminalService = _terminalService;
        this._instantiationService = _instantiationService;
        this._contextMenuService = _contextMenuService;
        this._notificationService = _notificationService;
        this._terminalProfileService = _terminalProfileService;
        this._workbenchLayoutService = _workbenchLayoutService;
        this._editorInput = undefined;
        this._cancelContextMenu = false;
        this._dropdownMenu = this._register(menuService.createMenu(MenuId.TerminalNewDropdownContext, contextKeyService));
        this._instanceMenu = this._register(menuService.createMenu(MenuId.TerminalEditorInstanceContext, contextKeyService));
    }
    async setInput(newInput, options, context, token) {
        this._editorInput?.terminalInstance?.detachFromElement();
        this._editorInput = newInput;
        await super.setInput(newInput, options, context, token);
        this._editorInput.terminalInstance?.attachToElement(this._overflowGuardElement);
        if (this._lastDimension) {
            this.layout(this._lastDimension);
        }
        this._editorInput.terminalInstance?.setVisible(this.isVisible() && this._workbenchLayoutService.isVisible("workbench.parts.editor" ));
        if (this._editorInput.terminalInstance) {
            this._register(this._editorInput.terminalInstance.onDidFocus(() => this._setActiveInstance()));
            this._editorInput.setCopyLaunchConfig(this._editorInput.terminalInstance.shellLaunchConfig);
        }
    }
    clearInput() {
        super.clearInput();
        this._editorInput?.terminalInstance?.detachFromElement();
        this._editorInput = undefined;
    }
    _setActiveInstance() {
        if (!this._editorInput?.terminalInstance) {
            return;
        }
        this._terminalEditorService.setActiveInstance(this._editorInput.terminalInstance);
    }
    focus() {
        this._editorInput?.terminalInstance?.focus();
    }
    createEditor(parent) {
        this._editorInstanceElement = parent;
        this._overflowGuardElement = dom.$('.terminal-overflow-guard.terminal-editor');
        this._editorInstanceElement.appendChild(this._overflowGuardElement);
        this._registerListeners();
    }
    _registerListeners() {
        if (!this._editorInstanceElement) {
            return;
        }
        this._register(dom.addDisposableListener(this._editorInstanceElement, 'mousedown', async (event) => {
            if (this._terminalEditorService.instances.length === 0) {
                return;
            }
            if (event.which === 2 && isLinux) {
                const terminal = this._terminalEditorService.activeInstance;
                terminal?.focus();
            }
            else if (event.which === 3) {
                const rightClickBehavior = this._terminalService.configHelper.config.rightClickBehavior;
                if (rightClickBehavior === 'nothing') {
                    if (!event.shiftKey) {
                        this._cancelContextMenu = true;
                    }
                    return;
                }
                else if (rightClickBehavior === 'copyPaste' || rightClickBehavior === 'paste') {
                    const terminal = this._terminalEditorService.activeInstance;
                    if (!terminal) {
                        return;
                    }
                    if (rightClickBehavior === 'copyPaste' && event.shiftKey) {
                        openContextMenu(event, this._editorInstanceElement, this._instanceMenu, this._contextMenuService);
                        return;
                    }
                    if (rightClickBehavior === 'copyPaste' && terminal.hasSelection()) {
                        await terminal.copySelection();
                        terminal.clearSelection();
                    }
                    else {
                        if (BrowserFeatures.clipboard.readText) {
                            terminal.paste();
                        }
                        else {
                            this._notificationService.info(`This browser doesn't support the clipboard.readText API needed to trigger a paste, try ${isMacintosh ? 'âŒ˜' : 'Ctrl'}+V instead.`);
                        }
                    }
                    if (isMacintosh) {
                        setTimeout(() => {
                            terminal.clearSelection();
                        }, 0);
                    }
                    this._cancelContextMenu = true;
                }
            }
        }));
        this._register(dom.addDisposableListener(this._editorInstanceElement, 'contextmenu', (event) => {
            const rightClickBehavior = this._terminalService.configHelper.config.rightClickBehavior;
            if (rightClickBehavior === 'nothing' && !event.shiftKey) {
                event.preventDefault();
                event.stopImmediatePropagation();
                this._cancelContextMenu = false;
                return;
            }
            else if (!this._cancelContextMenu && rightClickBehavior !== 'copyPaste' && rightClickBehavior !== 'paste') {
                if (!this._cancelContextMenu) {
                    openContextMenu(event, this._editorInstanceElement, this._instanceMenu, this._contextMenuService);
                }
                event.preventDefault();
                event.stopImmediatePropagation();
                this._cancelContextMenu = false;
            }
        }));
    }
    layout(dimension) {
        this._editorInput?.terminalInstance?.layout(dimension);
        this._lastDimension = dimension;
    }
    setVisible(visible, group) {
        super.setVisible(visible, group);
        this._editorInput?.terminalInstance?.setVisible(visible && this._workbenchLayoutService.isVisible("workbench.parts.editor" ));
    }
    getActionViewItem(action) {
        switch (action.id) {
            case "workbench.action.createTerminalEditor" : {
                if (action instanceof MenuItemAction) {
                    const location = { viewColumn: ACTIVE_GROUP };
                    const actions = getTerminalActionBarArgs(location, this._terminalProfileService.availableProfiles, this._getDefaultProfileName(), this._terminalProfileService.contributedProfiles, this._terminalService, this._dropdownMenu);
                    const button = this._instantiationService.createInstance(DropdownWithPrimaryActionViewItem, action, actions.dropdownAction, actions.dropdownMenuActions, actions.className, this._contextMenuService, {});
                    return button;
                }
            }
        }
        return super.getActionViewItem(action);
    }
    _getDefaultProfileName() {
        let defaultProfileName;
        try {
            defaultProfileName = this._terminalProfileService.getDefaultProfileName();
        }
        catch (e) {
            defaultProfileName = this._terminalProfileResolverService.defaultProfileName;
        }
        return defaultProfileName;
    }
};
TerminalEditor = ( __decorate([
    ( __param(0, ITelemetryService)),
    ( __param(1, IThemeService)),
    ( __param(2, IStorageService)),
    ( __param(3, ITerminalEditorService)),
    ( __param(4, ITerminalProfileResolverService)),
    ( __param(5, ITerminalService)),
    ( __param(6, IContextKeyService)),
    ( __param(7, IMenuService)),
    ( __param(8, IInstantiationService)),
    ( __param(9, IContextMenuService)),
    ( __param(10, INotificationService)),
    ( __param(11, ITerminalProfileService)),
    ( __param(12, IWorkbenchLayoutService))
], TerminalEditor));
export { TerminalEditor };
