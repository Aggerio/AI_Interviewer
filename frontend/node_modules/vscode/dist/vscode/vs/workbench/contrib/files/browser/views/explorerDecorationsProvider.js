import { __decorate, __param } from '../../../../../../../node_modules/tslib/tslib.es6.js';
import { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';
import { listInvalidItemForeground, listDeemphasizedForeground } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';
import { DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { explorerRootErrorEmitter } from './explorerViewer.js';
import { IExplorerService } from '../files.js';
import { toErrorMessage } from 'monaco-editor/esm/vs/base/common/errorMessage.js';
function provideDecorations(fileStat) {
    if (fileStat.isRoot && fileStat.error) {
        return {
            tooltip: ( localize(
                'canNotResolve',
                "Unable to resolve workspace folder ({0})",
                toErrorMessage(fileStat.error)
            )),
            letter: '!',
            color: listInvalidItemForeground,
        };
    }
    if (fileStat.isSymbolicLink) {
        return {
            tooltip: ( localize('symbolicLlink', "Symbolic Link")),
            letter: '\u2937'
        };
    }
    if (fileStat.isUnknown) {
        return {
            tooltip: ( localize('unknown', "Unknown File Type")),
            letter: '?'
        };
    }
    if (fileStat.isExcluded) {
        return {
            color: listDeemphasizedForeground,
        };
    }
    return undefined;
}
let ExplorerDecorationsProvider = class ExplorerDecorationsProvider {
    constructor(explorerService, contextService) {
        this.explorerService = explorerService;
        this.label = ( localize('label', "Explorer"));
        this._onDidChange = ( new Emitter());
        this.toDispose = ( new DisposableStore());
        this.toDispose.add(this._onDidChange);
        this.toDispose.add(contextService.onDidChangeWorkspaceFolders(e => {
            this._onDidChange.fire(( e.changed.concat(e.added).map(wf => wf.uri)));
        }));
        this.toDispose.add(explorerRootErrorEmitter.event((resource => {
            this._onDidChange.fire([resource]);
        })));
    }
    get onDidChange() {
        return this._onDidChange.event;
    }
    async provideDecorations(resource) {
        const fileStat = this.explorerService.findClosest(resource);
        if (!fileStat) {
            throw new Error('ExplorerItem not found');
        }
        return provideDecorations(fileStat);
    }
    dispose() {
        this.toDispose.dispose();
    }
};
ExplorerDecorationsProvider = ( __decorate([
    ( __param(0, IExplorerService)),
    ( __param(1, IWorkspaceContextService))
], ExplorerDecorationsProvider));
export { ExplorerDecorationsProvider, provideDecorations };
