import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import * as dom from 'monaco-editor/esm/vs/base/browser/dom.js';
import { ActionBar } from 'monaco-editor/esm/vs/base/browser/ui/actionbar/actionbar.js';
import { HighlightedLabel } from 'monaco-editor/esm/vs/base/browser/ui/highlightedlabel/highlightedLabel.js';
import { InputBox } from 'monaco-editor/esm/vs/base/browser/ui/inputbox/inputBox.js';
import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';
import { ThemeIcon } from 'monaco-editor/esm/vs/base/common/themables.js';
import { createMatches } from 'monaco-editor/esm/vs/base/common/filters.js';
import { once } from 'monaco-editor/esm/vs/base/common/functional.js';
import { dispose, toDisposable, DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { IContextViewService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';
import { defaultInputBoxStyles } from 'monaco-editor/esm/vs/platform/theme/browser/defaultStyles.js';
import { IDebugService } from '../common/debug.js';
import { Expression, Variable, ExpressionContainer } from '../common/debugModel.js';
import { ReplEvaluationResult } from '../common/replModel.js';
const MAX_VALUE_RENDER_LENGTH_IN_VIEWLET = 1024;
const booleanRegex = /^(true|false)$/i;
const stringRegex = /^(['"]).*\1$/;
const $ = dom.$;
function renderViewTree(container) {
    const treeContainer = $('.');
    treeContainer.classList.add('debug-view-content');
    container.appendChild(treeContainer);
    return treeContainer;
}
function renderExpressionValue(expressionOrValue, container, options) {
    let value = typeof expressionOrValue === 'string' ? expressionOrValue : expressionOrValue.value;
    container.className = 'value';
    if (value === null || ((expressionOrValue instanceof Expression || expressionOrValue instanceof Variable || expressionOrValue instanceof ReplEvaluationResult) && !expressionOrValue.available)) {
        container.classList.add('unavailable');
        if (value !== Expression.DEFAULT_VALUE) {
            container.classList.add('error');
        }
    }
    else {
        if ((expressionOrValue instanceof ExpressionContainer) && options.showChanged && expressionOrValue.valueChanged && value !== Expression.DEFAULT_VALUE) {
            container.className = 'value changed';
            expressionOrValue.valueChanged = false;
        }
        if (options.colorize && typeof expressionOrValue !== 'string') {
            if (expressionOrValue.type === 'number' || expressionOrValue.type === 'boolean' || expressionOrValue.type === 'string') {
                container.classList.add(expressionOrValue.type);
            }
            else if (!isNaN(+value)) {
                container.classList.add('number');
            }
            else if (booleanRegex.test(value)) {
                container.classList.add('boolean');
            }
            else if (stringRegex.test(value)) {
                container.classList.add('string');
            }
        }
    }
    if (options.maxValueLength && value && value.length > options.maxValueLength) {
        value = value.substring(0, options.maxValueLength) + '...';
    }
    if (!value) {
        value = '';
    }
    if (options.linkDetector) {
        container.textContent = '';
        const session = (expressionOrValue instanceof ExpressionContainer) ? expressionOrValue.getSession() : undefined;
        container.appendChild(options.linkDetector.linkify(value, false, session ? session.root : undefined, true));
    }
    else {
        container.textContent = value;
    }
    if (options.showHover) {
        container.title = value || '';
    }
}
function renderVariable(variable, data, showChanged, highlights, linkDetector) {
    if (variable.available) {
        let text = variable.name;
        if (variable.value && typeof variable.name === 'string') {
            text += ':';
        }
        data.label.set(text, highlights, variable.type ? variable.type : variable.name);
        data.name.classList.toggle('virtual', variable.presentationHint?.kind === 'virtual');
        data.name.classList.toggle('internal', variable.presentationHint?.visibility === 'internal');
    }
    else if (variable.value && typeof variable.name === 'string' && variable.name) {
        data.label.set(':');
    }
    data.expression.classList.toggle('lazy', !!variable.presentationHint?.lazy);
    renderExpressionValue(variable, data.value, {
        showChanged,
        maxValueLength: MAX_VALUE_RENDER_LENGTH_IN_VIEWLET,
        showHover: true,
        colorize: true,
        linkDetector
    });
}
let AbstractExpressionsRenderer = class AbstractExpressionsRenderer {
    constructor(debugService, contextViewService) {
        this.debugService = debugService;
        this.contextViewService = contextViewService;
    }
    renderTemplate(container) {
        const expression = dom.append(container, $('.expression'));
        const name = dom.append(expression, $('span.name'));
        const lazyButton = dom.append(expression, $('span.lazy-button'));
        lazyButton.classList.add(...ThemeIcon.asClassNameArray(Codicon.eye));
        lazyButton.title = ( localize('debug.lazyButton.tooltip', "Click to expand"));
        const value = dom.append(expression, $('span.value'));
        const label = ( new HighlightedLabel(name));
        const inputBoxContainer = dom.append(expression, $('.inputBoxContainer'));
        const templateDisposable = ( new DisposableStore());
        let actionBar;
        if (this.renderActionBar) {
            dom.append(expression, $('.span.actionbar-spacer'));
            actionBar = templateDisposable.add(( new ActionBar(expression)));
        }
        const template = { expression, name, value, label, inputBoxContainer, actionBar, elementDisposable: [], templateDisposable, lazyButton, currentElement: undefined };
        templateDisposable.add(dom.addDisposableListener(lazyButton, dom.EventType.CLICK, () => {
            if (template.currentElement) {
                this.debugService.getViewModel().evaluateLazyExpression(template.currentElement);
            }
        }));
        return template;
    }
    renderExpressionElement(element, node, data) {
        data.currentElement = element;
        this.renderExpression(node.element, data, createMatches(node.filterData));
        if (data.actionBar) {
            this.renderActionBar(data.actionBar, element, data);
        }
        const selectedExpression = this.debugService.getViewModel().getSelectedExpression();
        if (element === selectedExpression?.expression || (element instanceof Variable && element.errorMessage)) {
            const options = this.getInputBoxOptions(element, !!selectedExpression?.settingWatch);
            if (options) {
                data.elementDisposable.push(this.renderInputBox(data.name, data.value, data.inputBoxContainer, options));
            }
        }
    }
    renderInputBox(nameElement, valueElement, inputBoxContainer, options) {
        nameElement.style.display = 'none';
        valueElement.style.display = 'none';
        inputBoxContainer.style.display = 'initial';
        dom.clearNode(inputBoxContainer);
        const inputBox = ( new InputBox(
            inputBoxContainer,
            this.contextViewService,
            { ...options, inputBoxStyles: defaultInputBoxStyles }
        ));
        inputBox.value = options.initialValue;
        inputBox.focus();
        inputBox.select();
        const done = once((success, finishEditing) => {
            nameElement.style.display = '';
            valueElement.style.display = '';
            inputBoxContainer.style.display = 'none';
            const value = inputBox.value;
            dispose(toDispose);
            if (finishEditing) {
                this.debugService.getViewModel().setSelectedExpression(undefined, false);
                options.onFinish(value, success);
            }
        });
        const toDispose = [
            inputBox,
            dom.addStandardDisposableListener(inputBox.inputElement, dom.EventType.KEY_DOWN, (e) => {
                const isEscape = e.equals(9 );
                const isEnter = e.equals(3 );
                if (isEscape || isEnter) {
                    e.preventDefault();
                    e.stopPropagation();
                    done(isEnter, true);
                }
            }),
            dom.addDisposableListener(inputBox.inputElement, dom.EventType.BLUR, () => {
                done(true, true);
            }),
            dom.addDisposableListener(inputBox.inputElement, dom.EventType.CLICK, e => {
                e.preventDefault();
                e.stopPropagation();
            })
        ];
        return toDisposable(() => {
            done(false, false);
        });
    }
    disposeElement(node, index, templateData) {
        dispose(templateData.elementDisposable);
        templateData.elementDisposable = [];
    }
    disposeTemplate(templateData) {
        dispose(templateData.elementDisposable);
        templateData.templateDisposable.dispose();
    }
};
AbstractExpressionsRenderer = ( __decorate([
    ( __param(0, IDebugService)),
    ( __param(1, IContextViewService))
], AbstractExpressionsRenderer));
export { AbstractExpressionsRenderer, renderExpressionValue, renderVariable, renderViewTree };
