import { localize } from 'monaco-editor/esm/vs/nls.js';
import { Action2, MenuId, registerAction2 } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { ContextKeyExpr } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { Categories } from 'monaco-editor/esm/vs/platform/action/common/actionCommonCategories.js';
class ToggleMinimapAction extends Action2 {
    static { this.ID = 'editor.action.toggleMinimap'; }
    constructor() {
        super({
            id: ToggleMinimapAction.ID,
            title: {
                value: ( localize('toggleMinimap', "Toggle Minimap")),
                original: 'Toggle Minimap',
                mnemonicTitle: ( localize({ key: 'miMinimap', comment: ['&& denotes a mnemonic'] }, "&&Minimap"))
            },
            category: Categories.View,
            f1: true,
            toggled: ( ContextKeyExpr.equals('config.editor.minimap.enabled', true)),
            menu: {
                id: MenuId.MenubarAppearanceMenu,
                group: '4_editor',
                order: 1
            }
        });
    }
    async run(accessor) {
        const configurationService = accessor.get(IConfigurationService);
        const newValue = !configurationService.getValue('editor.minimap.enabled');
        return configurationService.updateValue('editor.minimap.enabled', newValue);
    }
}
registerAction2(ToggleMinimapAction);
export { ToggleMinimapAction };
