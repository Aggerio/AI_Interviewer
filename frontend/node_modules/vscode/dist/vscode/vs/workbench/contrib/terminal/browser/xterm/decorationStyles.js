import { __decorate, __param } from '../../../../../../../node_modules/tslib/tslib.es6.js';
import * as dom from 'monaco-editor/esm/vs/base/browser/dom.js';
import { Delayer } from 'monaco-editor/esm/vs/base/common/async.js';
import { fromNow } from '../../../../../base/common/date.js';
import { MarkdownString } from 'monaco-editor/esm/vs/base/common/htmlContent.js';
import { Disposable, combinedDisposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { IContextMenuService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';
import { IHoverService } from '../../../../services/hover/browser/hover.js';
let TerminalDecorationHoverManager = class TerminalDecorationHoverManager extends Disposable {
    constructor(_hoverService, configurationService, contextMenuService) {
        super();
        this._hoverService = _hoverService;
        this._contextMenuVisible = false;
        this._register(contextMenuService.onDidShowContextMenu(() => this._contextMenuVisible = true));
        this._register(contextMenuService.onDidHideContextMenu(() => this._contextMenuVisible = false));
        this._hoverDelayer = this._register(( (new Delayer(configurationService.getValue('workbench.hover.delay')))));
    }
    hideHover() {
        this._hoverDelayer.cancel();
        this._hoverService.hideHover();
    }
    createHover(element, command, hoverMessage) {
        return combinedDisposable(dom.addDisposableListener(element, dom.EventType.MOUSE_ENTER, () => {
            if (this._contextMenuVisible) {
                return;
            }
            this._hoverDelayer.trigger(() => {
                let hoverContent = `${( ( localize('terminalPromptContextMenu', "Show Command Actions")))}`;
                hoverContent += '\n\n---\n\n';
                if (!command) {
                    if (hoverMessage) {
                        hoverContent = hoverMessage;
                    }
                    else {
                        return;
                    }
                }
                else if (command.markProperties || hoverMessage) {
                    if (command.markProperties?.hoverMessage || hoverMessage) {
                        hoverContent = command.markProperties?.hoverMessage || hoverMessage || '';
                    }
                    else {
                        return;
                    }
                }
                else if (command.exitCode) {
                    if (command.exitCode === -1) {
                        hoverContent += ( (localize(
                            'terminalPromptCommandFailed',
                            'Command executed {0} and failed',
                            fromNow(command.timestamp, true)
                        )));
                    }
                    else {
                        hoverContent += ( (localize(
                            'terminalPromptCommandFailedWithExitCode',
                            'Command executed {0} and failed (Exit Code {1})',
                            fromNow(command.timestamp, true),
                            command.exitCode
                        )));
                    }
                }
                else {
                    hoverContent += ( (localize(
                        'terminalPromptCommandSuccess',
                        'Command executed {0}',
                        fromNow(command.timestamp, true)
                    )));
                }
                this._hoverService.showHover({ content: ( (new MarkdownString(hoverContent))), target: element });
            });
        }), dom.addDisposableListener(element, dom.EventType.MOUSE_LEAVE, () => this.hideHover()), dom.addDisposableListener(element, dom.EventType.MOUSE_OUT, () => this.hideHover()));
    }
};
TerminalDecorationHoverManager = ( (__decorate([
    ( (__param(0, IHoverService))),
    ( (__param(1, IConfigurationService))),
    ( (__param(2, IContextMenuService)))
], TerminalDecorationHoverManager)));
function updateLayout(configurationService, element) {
    if (!element) {
        return;
    }
    const fontSize = configurationService.inspect("terminal.integrated.fontSize" ).value;
    const defaultFontSize = configurationService.inspect("terminal.integrated.fontSize" ).defaultValue;
    const lineHeight = configurationService.inspect("terminal.integrated.lineHeight" ).value;
    if (typeof fontSize === 'number' && typeof defaultFontSize === 'number' && typeof lineHeight === 'number') {
        const scalar = (fontSize / defaultFontSize) <= 1 ? (fontSize / defaultFontSize) : 1;
        element.style.width = `${scalar * 16 }px`;
        element.style.height = `${scalar * 16  * lineHeight}px`;
        element.style.fontSize = `${scalar * 16 }px`;
        element.style.marginLeft = `${scalar * -17 }px`;
    }
}
export { TerminalDecorationHoverManager, updateLayout };
