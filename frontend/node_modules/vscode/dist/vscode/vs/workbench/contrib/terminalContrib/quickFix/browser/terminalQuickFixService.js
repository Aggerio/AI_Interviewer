import { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { toDisposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { isProposedApiEnabled } from '../../../../services/extensions/common/extensions.js';
import { ExtensionsRegistry } from '../../../../services/extensions/common/extensionsRegistry.js';
class TerminalQuickFixService {
    get providers() { return this._providers; }
    constructor() {
        this._selectors = ( new Map());
        this._providers = ( new Map());
        this._onDidRegisterProvider = ( new Emitter());
        this.onDidRegisterProvider = this._onDidRegisterProvider.event;
        this._onDidRegisterCommandSelector = ( new Emitter());
        this.onDidRegisterCommandSelector = this._onDidRegisterCommandSelector.event;
        this._onDidUnregisterProvider = ( new Emitter());
        this.onDidUnregisterProvider = this._onDidUnregisterProvider.event;
        this.extensionQuickFixes = ( new Promise((r) => quickFixExtensionPoint.setHandler(fixes => {
            r(( fixes.filter(c => isProposedApiEnabled(c.description, 'terminalQuickFixProvider')).map(c => {
                if (!c.value) {
                    return [];
                }
                return ( c.value.map(
                    fix => { return { ...fix, extensionIdentifier: c.description.identifier.value }; }
                ));
            })).flat());
        })));
        this.extensionQuickFixes.then(selectors => {
            for (const selector of selectors) {
                this.registerCommandSelector(selector);
            }
        });
    }
    registerCommandSelector(selector) {
        this._selectors.set(selector.id, selector);
        this._onDidRegisterCommandSelector.fire(selector);
    }
    registerQuickFixProvider(id, provider) {
        let disposed = false;
        this.extensionQuickFixes.then(() => {
            if (disposed) {
                return;
            }
            this._providers.set(id, provider);
            const selector = this._selectors.get(id);
            if (!selector) {
                throw new Error(`No registered selector for ID: ${id}`);
            }
            this._onDidRegisterProvider.fire({ selector, provider });
        });
        return toDisposable(() => {
            disposed = true;
            this._providers.delete(id);
            const selector = this._selectors.get(id);
            if (selector) {
                this._selectors.delete(id);
                this._onDidUnregisterProvider.fire(selector.id);
            }
        });
    }
}
const quickFixExtensionPoint = ( ExtensionsRegistry.registerExtensionPoint({
    extensionPoint: 'terminalQuickFixes',
    defaultExtensionKind: ['workspace'],
    activationEventsGenerator: (terminalQuickFixes, result) => {
        for (const quickFixContrib of terminalQuickFixes ?? []) {
            result.push(`onTerminalQuickFixRequest:${quickFixContrib.id}`);
        }
    },
    jsonSchema: {
        description: ( localize(
            'vscode.extension.contributes.terminalQuickFixes',
            'Contributes terminal quick fixes.'
        )),
        type: 'array',
        items: {
            type: 'object',
            additionalProperties: false,
            required: ['id', 'commandLineMatcher', 'outputMatcher', 'commandExitResult'],
            defaultSnippets: [{
                    body: {
                        id: '$1',
                        commandLineMatcher: '$2',
                        outputMatcher: '$3',
                        exitStatus: '$4'
                    }
                }],
            properties: {
                id: {
                    description: ( localize(
                        'vscode.extension.contributes.terminalQuickFixes.id',
                        "The ID of the quick fix provider"
                    )),
                    type: 'string',
                },
                commandLineMatcher: {
                    description: ( localize(
                        'vscode.extension.contributes.terminalQuickFixes.commandLineMatcher',
                        "A regular expression or string to test the command line against"
                    )),
                    type: 'string',
                },
                outputMatcher: {
                    markdownDescription: ( localize(
                        'vscode.extension.contributes.terminalQuickFixes.outputMatcher',
                        "A regular expression or string to match a single line of the output against, which provides groups to be referenced in terminalCommand and uri.\n\nFor example:\n\n `lineMatcher: /git push --set-upstream origin (?<branchName>[^\s]+)/;`\n\n`terminalCommand: 'git push --set-upstream origin ${group:branchName}';`\n"
                    )),
                    type: 'object',
                    required: ['lineMatcher', 'anchor', 'offset', 'length'],
                    properties: {
                        lineMatcher: {
                            description: 'A regular expression or string to test the command line against',
                            type: 'string'
                        },
                        anchor: {
                            description: 'Where the search should begin in the buffer',
                            enum: ['top', 'bottom']
                        },
                        offset: {
                            description: 'The number of lines vertically from the anchor in the buffer to start matching against',
                            type: 'number'
                        },
                        length: {
                            description: 'The number of rows to match against, this should be as small as possible for performance reasons',
                            type: 'number'
                        }
                    }
                },
                commandExitResult: {
                    description: ( localize(
                        'vscode.extension.contributes.terminalQuickFixes.commandExitResult',
                        "The command exit result to match on"
                    )),
                    enum: ['success', 'error'],
                    enumDescriptions: [
                        'The command exited with an exit code of zero.',
                        'The command exited with a non-zero exit code.'
                    ]
                }
            },
        }
    },
}));
export { TerminalQuickFixService };
