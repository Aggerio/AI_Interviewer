import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import './media/explorerviewlet.css.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { mark } from 'monaco-editor/esm/vs/base/common/performance.js';
import { VIEWLET_ID, VIEW_ID, ExplorerViewletVisibleContext } from '../common/files.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { ExplorerView } from './views/explorerView.js';
import { EmptyView } from './views/emptyView.js';
import { OpenEditorsView } from './views/openEditorsView.js';
import { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { IExtensionService } from '../../../services/extensions/common/extensions.js';
import { IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';
import { ITelemetryService } from 'monaco-editor/esm/vs/platform/telemetry/common/telemetry.js';
import { ContextKeyExpr, IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';
import { ViewContentGroups, Extensions, IViewDescriptorService } from '../../../common/views.js';
import { IContextMenuService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { IWorkbenchLayoutService } from '../../../services/layout/browser/layoutService.js';
import { ViewPaneContainer } from '../../../browser/parts/views/viewPaneContainer.js';
import { KeyChord } from 'monaco-editor/esm/vs/base/common/keyCodes.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { IProgressService } from 'monaco-editor/esm/vs/platform/progress/common/progress.js';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
import { WorkbenchStateContext, RemoteNameContext } from '../../../common/contextkeys.js';
import { IsWebContext } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkeys.js';
import { OpenFileFolderAction, OpenFolderAction } from '../../../browser/actions/workspaceActions.js';
import { isMacintosh, isWeb } from 'monaco-editor/esm/vs/base/common/platform.js';
import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';
import { registerIcon } from 'monaco-editor/esm/vs/platform/theme/common/iconRegistry.js';
const explorerViewIcon = registerIcon('explorer-view-icon', Codicon.files, ( localize('explorerViewIcon', 'View icon of the explorer view.')));
const openEditorsViewIcon = registerIcon('open-editors-view-icon', Codicon.book, ( localize('openEditorsIcon', 'View icon of the open editors view.')));
let ExplorerViewletViewsContribution = class ExplorerViewletViewsContribution extends Disposable {
    constructor(workspaceContextService, progressService) {
        super();
        this.workspaceContextService = workspaceContextService;
        progressService.withProgress({ location: 1  }, () => workspaceContextService.getCompleteWorkspace()).finally(() => {
            this.registerViews();
            this._register(workspaceContextService.onDidChangeWorkbenchState(() => this.registerViews()));
            this._register(workspaceContextService.onDidChangeWorkspaceFolders(() => this.registerViews()));
        });
    }
    registerViews() {
        mark('code/willRegisterExplorerViews');
        const viewDescriptors = viewsRegistry.getViews(VIEW_CONTAINER);
        const viewDescriptorsToRegister = [];
        const viewDescriptorsToDeregister = [];
        this.createOpenEditorsViewDescriptor();
        const explorerViewDescriptor = this.createExplorerViewDescriptor();
        const registeredExplorerViewDescriptor = viewDescriptors.find(v => v.id === explorerViewDescriptor.id);
        const emptyViewDescriptor = this.createEmptyViewDescriptor();
        const registeredEmptyViewDescriptor = viewDescriptors.find(v => v.id === emptyViewDescriptor.id);
        if (this.workspaceContextService.getWorkbenchState() === 1  || this.workspaceContextService.getWorkspace().folders.length === 0) {
            if (registeredExplorerViewDescriptor) {
                viewDescriptorsToDeregister.push(registeredExplorerViewDescriptor);
            }
            if (!registeredEmptyViewDescriptor) {
                viewDescriptorsToRegister.push(emptyViewDescriptor);
            }
        }
        else {
            if (registeredEmptyViewDescriptor) {
                viewDescriptorsToDeregister.push(registeredEmptyViewDescriptor);
            }
            if (!registeredExplorerViewDescriptor) {
                viewDescriptorsToRegister.push(explorerViewDescriptor);
            }
        }
        if (viewDescriptorsToRegister.length) {
            viewsRegistry.registerViews(viewDescriptorsToRegister, VIEW_CONTAINER);
        }
        if (viewDescriptorsToDeregister.length) {
            viewsRegistry.deregisterViews(viewDescriptorsToDeregister, VIEW_CONTAINER);
        }
        mark('code/didRegisterExplorerViews');
    }
    createOpenEditorsViewDescriptor() {
        return {
            id: OpenEditorsView.ID,
            name: OpenEditorsView.NAME,
            ctorDescriptor: ( new SyncDescriptor(OpenEditorsView)),
            containerIcon: openEditorsViewIcon,
            order: 0,
            canToggleVisibility: true,
            canMoveView: true,
            collapsed: false,
            hideByDefault: true,
            focusCommand: {
                id: 'workbench.files.action.focusOpenEditorsView',
                keybindings: { primary: KeyChord(2048  | 41 , 35 ) }
            }
        };
    }
    createEmptyViewDescriptor() {
        return {
            id: EmptyView.ID,
            name: EmptyView.NAME,
            containerIcon: explorerViewIcon,
            ctorDescriptor: ( new SyncDescriptor(EmptyView)),
            order: 1,
            canToggleVisibility: true,
            focusCommand: {
                id: 'workbench.explorer.fileView.focus'
            }
        };
    }
    createExplorerViewDescriptor() {
        return {
            id: VIEW_ID,
            name: ( localize('folders', "Folders")),
            containerIcon: explorerViewIcon,
            ctorDescriptor: ( new SyncDescriptor(ExplorerView)),
            order: 1,
            canMoveView: true,
            canToggleVisibility: false,
            focusCommand: {
                id: 'workbench.explorer.fileView.focus'
            }
        };
    }
};
ExplorerViewletViewsContribution = ( __decorate([
    ( __param(0, IWorkspaceContextService)),
    ( __param(1, IProgressService))
], ExplorerViewletViewsContribution));
let ExplorerViewPaneContainer = class ExplorerViewPaneContainer extends ViewPaneContainer {
    constructor(layoutService, telemetryService, contextService, storageService, configurationService, instantiationService, contextKeyService, themeService, contextMenuService, extensionService, viewDescriptorService) {
        super(VIEWLET_ID, { mergeViewWithContainerWhenSingleView: true }, instantiationService, configurationService, layoutService, contextMenuService, telemetryService, extensionService, themeService, storageService, contextService, viewDescriptorService);
        this.viewletVisibleContextKey = ExplorerViewletVisibleContext.bindTo(contextKeyService);
        this._register(this.contextService.onDidChangeWorkspaceName(e => this.updateTitleArea()));
    }
    create(parent) {
        super.create(parent);
        parent.classList.add('explorer-viewlet');
    }
    createView(viewDescriptor, options) {
        if (viewDescriptor.id === VIEW_ID) {
            return this.instantiationService.createInstance(ExplorerView, {
                ...options, delegate: {
                    willOpenElement: e => {
                        if (!(e instanceof MouseEvent)) {
                            return;
                        }
                        const openEditorsView = this.getOpenEditorsView();
                        if (openEditorsView) {
                            let delay = 0;
                            const config = this.configurationService.getValue();
                            if (!!config.workbench?.editor?.enablePreview) {
                                delay = 250;
                            }
                            openEditorsView.setStructuralRefreshDelay(delay);
                        }
                    },
                    didOpenElement: e => {
                        if (!(e instanceof MouseEvent)) {
                            return;
                        }
                        const openEditorsView = this.getOpenEditorsView();
                        openEditorsView?.setStructuralRefreshDelay(0);
                    }
                }
            });
        }
        return super.createView(viewDescriptor, options);
    }
    getExplorerView() {
        return this.getView(VIEW_ID);
    }
    getOpenEditorsView() {
        return this.getView(OpenEditorsView.ID);
    }
    setVisible(visible) {
        this.viewletVisibleContextKey.set(visible);
        super.setVisible(visible);
    }
    focus() {
        const explorerView = this.getView(VIEW_ID);
        if (explorerView && this.panes.every(p => !p.isExpanded())) {
            explorerView.setExpanded(true);
        }
        if (explorerView?.isExpanded()) {
            explorerView.focus();
        }
        else {
            super.focus();
        }
    }
};
ExplorerViewPaneContainer = ( __decorate([
    ( __param(0, IWorkbenchLayoutService)),
    ( __param(1, ITelemetryService)),
    ( __param(2, IWorkspaceContextService)),
    ( __param(3, IStorageService)),
    ( __param(4, IConfigurationService)),
    ( __param(5, IInstantiationService)),
    ( __param(6, IContextKeyService)),
    ( __param(7, IThemeService)),
    ( __param(8, IContextMenuService)),
    ( __param(9, IExtensionService)),
    ( __param(10, IViewDescriptorService))
], ExplorerViewPaneContainer));
const viewContainerRegistry = ( Registry.as(Extensions.ViewContainersRegistry));
const VIEW_CONTAINER = viewContainerRegistry.registerViewContainer({
    id: VIEWLET_ID,
    title: ( localize('explore', "Explorer")),
    ctorDescriptor: ( new SyncDescriptor(ExplorerViewPaneContainer)),
    storageId: 'workbench.explorer.views.state',
    icon: explorerViewIcon,
    alwaysUseContainerInfo: true,
    hideIfEmpty: true,
    order: 0,
    openCommandActionDescriptor: {
        id: VIEWLET_ID,
        title: { value: ( localize('explore', "Explorer")), original: 'Explorer' },
        mnemonicTitle: ( localize(
            { key: 'miViewExplorer', comment: ['&& denotes a mnemonic'] },
            "&&Explorer"
        )),
        keybindings: { primary: 2048  | 1024  | 35  },
        order: 0
    },
}, 0 , { isDefault: true });
const openFolder = ( localize('openFolder', "Open Folder"));
const openFolderButton = `[${openFolder}](command:${(isMacintosh && !isWeb) ? OpenFileFolderAction.ID : OpenFolderAction.ID})`;
const viewsRegistry = ( Registry.as(Extensions.ViewsRegistry));
( viewsRegistry.registerViewWelcomeContent(EmptyView.ID, {
    content: ( localize(
        { key: 'noFolderHelp', comment: ['Please do not translate the word "commmand", it is part of our internal syntax which must not change'] },
        "You have not yet opened a folder.\n{0}",
        openFolderButton
    )),
    when: ( ContextKeyExpr.and(
    ( ContextKeyExpr.has('editorIsOpen'))?.negate(), ( ContextKeyExpr.or((
    ContextKeyExpr.and(( WorkbenchStateContext.notEqualsTo('workspace')), ( RemoteNameContext.isEqualTo('')))), (
    ContextKeyExpr.and(( WorkbenchStateContext.notEqualsTo('workspace')), IsWebContext)))))),
    group: ViewContentGroups.Open,
    order: 1
}));
export { ExplorerViewPaneContainer, ExplorerViewletViewsContribution, VIEW_CONTAINER };
