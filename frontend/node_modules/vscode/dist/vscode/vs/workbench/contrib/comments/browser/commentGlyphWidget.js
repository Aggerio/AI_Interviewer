import * as nls from 'monaco-editor/esm/vs/nls.js';
import { Color } from 'monaco-editor/esm/vs/base/common/color.js';
import { OverviewRulerLane } from 'monaco-editor/esm/vs/editor/common/model.js';
import { ModelDecorationOptions } from 'monaco-editor/esm/vs/editor/common/model/textModel.js';
import { registerColor, opaque, listInactiveSelectionBackground, editorBackground, darken, editorForeground } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';
import { themeColorFromId } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';
import { CommentThreadState } from 'monaco-editor/esm/vs/editor/common/languages.js';
const overviewRulerCommentingRangeForeground = registerColor('editorGutter.commentRangeForeground', { dark: opaque(listInactiveSelectionBackground, editorBackground), light: ( darken(opaque(listInactiveSelectionBackground, editorBackground), .05)), hcDark: Color.white, hcLight: Color.black }, ( nls.localize(
    'editorGutterCommentRangeForeground',
    'Editor gutter decoration color for commenting ranges. This color should be opaque.'
)));
const overviewRulerCommentForeground = registerColor('editorOverviewRuler.commentForeground', { dark: overviewRulerCommentingRangeForeground, light: overviewRulerCommentingRangeForeground, hcDark: overviewRulerCommentingRangeForeground, hcLight: overviewRulerCommentingRangeForeground }, ( nls.localize(
    'editorOverviewRuler.commentForeground',
    'Editor overview ruler decoration color for resolved comments. This color should be opaque.'
)));
const overviewRulerCommentUnresolvedForeground = registerColor('editorOverviewRuler.commentUnresolvedForeground', { dark: overviewRulerCommentForeground, light: overviewRulerCommentForeground, hcDark: overviewRulerCommentForeground, hcLight: overviewRulerCommentForeground }, ( nls.localize(
    'editorOverviewRuler.commentUnresolvedForeground',
    'Editor overview ruler decoration color for unresolved comments. This color should be opaque.'
)));
const editorGutterCommentGlyphForeground = registerColor('editorGutter.commentGlyphForeground', { dark: editorForeground, light: editorForeground, hcDark: Color.black, hcLight: Color.white }, ( nls.localize(
    'editorGutterCommentGlyphForeground',
    'Editor gutter decoration color for commenting glyphs.'
)));
registerColor('editorGutter.commentUnresolvedGlyphForeground', { dark: editorGutterCommentGlyphForeground, light: editorGutterCommentGlyphForeground, hcDark: editorGutterCommentGlyphForeground, hcLight: editorGutterCommentGlyphForeground }, ( nls.localize(
    'editorGutterCommentUnresolvedGlyphForeground',
    'Editor gutter decoration color for commenting glyphs for unresolved comment threads.'
)));
class CommentGlyphWidget {
    static { this.description = 'comment-glyph-widget'; }
    constructor(editor, lineNumber) {
        this._commentsOptions = this.createDecorationOptions();
        this._editor = editor;
        this._commentsDecorations = this._editor.createDecorationsCollection();
        this.setLineNumber(lineNumber);
    }
    createDecorationOptions() {
        const unresolved = this._threadState === CommentThreadState.Unresolved;
        const decorationOptions = {
            description: CommentGlyphWidget.description,
            isWholeLine: true,
            overviewRuler: {
                color: themeColorFromId(unresolved ? overviewRulerCommentUnresolvedForeground : overviewRulerCommentForeground),
                position: OverviewRulerLane.Center
            },
            collapseOnReplaceEdit: true,
            linesDecorationsClassName: `comment-range-glyph comment-thread${unresolved ? '-unresolved' : ''}`
        };
        return ModelDecorationOptions.createDynamic(decorationOptions);
    }
    setThreadState(state) {
        if (this._threadState !== state) {
            this._threadState = state;
            this._commentsOptions = this.createDecorationOptions();
            this._updateDecorations();
        }
    }
    _updateDecorations() {
        const commentsDecorations = [{
                range: {
                    startLineNumber: this._lineNumber, startColumn: 1,
                    endLineNumber: this._lineNumber, endColumn: 1
                },
                options: this._commentsOptions
            }];
        this._commentsDecorations.set(commentsDecorations);
    }
    setLineNumber(lineNumber) {
        this._lineNumber = lineNumber;
        this._updateDecorations();
    }
    getPosition() {
        const range = (this._commentsDecorations.length > 0 ? this._commentsDecorations.getRange(0) : null);
        return {
            position: {
                lineNumber: range ? range.endLineNumber : this._lineNumber,
                column: 1
            },
            preference: [0 ]
        };
    }
    dispose() {
        this._commentsDecorations.clear();
    }
}
export { CommentGlyphWidget, overviewRulerCommentingRangeForeground };
