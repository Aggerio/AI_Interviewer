import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { editorConfigurationBaseNode } from 'monaco-editor/esm/vs/editor/common/config/editorConfigurationSchema.js';
import { codeActionCommandId, refactorCommandId, sourceActionCommandId } from 'monaco-editor/esm/vs/editor/contrib/codeAction/browser/codeAction.js';
import { CodeActionKind } from 'monaco-editor/esm/vs/editor/contrib/codeAction/common/types.js';
import * as nls from 'monaco-editor/esm/vs/nls.js';
import { Extensions } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';
import { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
const codeActionsOnSaveDefaultProperties = ( Object.freeze({
    'source.fixAll': {
        type: 'boolean',
        description: ( nls.localize(
            'codeActionsOnSave.fixAll',
            "Controls whether auto fix action should be run on file save."
        ))
    }
}));
const codeActionsOnSaveSchema = {
    oneOf: [
        {
            type: 'object',
            properties: codeActionsOnSaveDefaultProperties,
            additionalProperties: {
                type: 'boolean'
            },
        },
        {
            type: 'array',
            items: { type: 'string' }
        }
    ],
    default: {},
    description: ( nls.localize('codeActionsOnSave', "Code Action kinds to be run on save.")),
    scope: 5 ,
};
const editorConfiguration = ( Object.freeze({
    ...editorConfigurationBaseNode,
    properties: {
        'editor.codeActionsOnSave': codeActionsOnSaveSchema
    }
}));
let CodeActionsContribution = class CodeActionsContribution extends Disposable {
    constructor(codeActionsExtensionPoint, keybindingService) {
        super();
        this._contributedCodeActions = [];
        this._onDidChangeContributions = this._register(( new Emitter()));
        codeActionsExtensionPoint.setHandler(extensionPoints => {
            this._contributedCodeActions = ( extensionPoints.map(x => x.value)).flat();
            this.updateConfigurationSchema(this._contributedCodeActions);
            this._onDidChangeContributions.fire();
        });
        keybindingService.registerSchemaContribution({
            getSchemaAdditions: () => this.getSchemaAdditions(),
            onDidChange: this._onDidChangeContributions.event,
        });
    }
    updateConfigurationSchema(codeActionContributions) {
        const newProperties = { ...codeActionsOnSaveDefaultProperties };
        for (const [sourceAction, props] of this.getSourceActions(codeActionContributions)) {
            newProperties[sourceAction] = {
                type: 'boolean',
                description: ( nls.localize(
                    'codeActionsOnSave.generic',
                    "Controls whether '{0}' actions should be run on file save.",
                    props.title
                ))
            };
        }
        codeActionsOnSaveSchema.properties = newProperties;
        ( Registry.as(Extensions.Configuration))
            .notifyConfigurationSchemaUpdated(editorConfiguration);
    }
    getSourceActions(contributions) {
        const defaultKinds = ( ( Object.keys(codeActionsOnSaveDefaultProperties)).map(value => ( new CodeActionKind(value))));
        const sourceActions = ( new Map());
        for (const contribution of contributions) {
            for (const action of contribution.actions) {
                const kind = ( new CodeActionKind(action.kind));
                if (CodeActionKind.Source.contains(kind)
                    && !( defaultKinds.some(defaultKind => defaultKind.contains(kind)))) {
                    sourceActions.set(kind.value, action);
                }
            }
        }
        return sourceActions;
    }
    getSchemaAdditions() {
        const conditionalSchema = (command, actions) => {
            return {
                if: {
                    required: ['command'],
                    properties: {
                        'command': { const: command }
                    }
                },
                then: {
                    properties: {
                        'args': {
                            required: ['kind'],
                            properties: {
                                'kind': {
                                    anyOf: [
                                        {
                                            enum: ( actions.map(action => action.kind)),
                                            enumDescriptions: ( actions.map(action => action.description ?? action.title)),
                                        },
                                        { type: 'string' },
                                    ]
                                }
                            }
                        }
                    }
                }
            };
        };
        const getActions = (ofKind) => {
            const allActions = ( this._contributedCodeActions.map(desc => desc.actions)).flat();
            const out = ( new Map());
            for (const action of allActions) {
                if (!( out.has(action.kind)) && ofKind.contains(( new CodeActionKind(action.kind)))) {
                    out.set(action.kind, action);
                }
            }
            return Array.from(( out.values()));
        };
        return [
            conditionalSchema(codeActionCommandId, getActions(CodeActionKind.Empty)),
            conditionalSchema(refactorCommandId, getActions(CodeActionKind.Refactor)),
            conditionalSchema(sourceActionCommandId, getActions(CodeActionKind.Source)),
        ];
    }
};
CodeActionsContribution = ( __decorate([
    ( __param(1, IKeybindingService))
], CodeActionsContribution));
export { CodeActionsContribution, editorConfiguration };
