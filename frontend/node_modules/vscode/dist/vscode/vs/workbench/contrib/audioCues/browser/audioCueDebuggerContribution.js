import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { Disposable, toDisposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { observableFromEvent, autorunWithStore } from 'monaco-editor/esm/vs/base/common/observable.js';
import { AudioCue, IAudioCueService } from 'monaco-editor/esm/vs/platform/audioCues/browser/audioCueService.js';
import { IDebugService } from '../../debug/common/debug.js';
let AudioCueLineDebuggerContribution = class AudioCueLineDebuggerContribution extends Disposable {
    constructor(debugService, audioCueService) {
        super();
        this.audioCueService = audioCueService;
        const isEnabled = observableFromEvent(audioCueService.onEnabledChanged(AudioCue.onDebugBreak), () => audioCueService.isEnabled(AudioCue.onDebugBreak));
        this._register(autorunWithStore((reader, store) => {
            if (!isEnabled.read(reader)) {
                return;
            }
            const sessionDisposables = ( new Map());
            store.add(toDisposable(() => {
                sessionDisposables.forEach(d => d.dispose());
                sessionDisposables.clear();
            }));
            store.add(debugService.onDidNewSession((session) => sessionDisposables.set(session, this.handleSession(session))));
            store.add(debugService.onDidEndSession(session => {
                sessionDisposables.get(session)?.dispose();
                sessionDisposables.delete(session);
            }));
            debugService
                .getModel()
                .getSessions()
                .forEach((session) => sessionDisposables.set(session, this.handleSession(session)));
        }, 'subscribe to debug sessions'));
    }
    handleSession(session) {
        return session.onDidChangeState(e => {
            const stoppedDetails = session.getStoppedDetails();
            const BREAKPOINT_STOP_REASON = 'breakpoint';
            if (stoppedDetails && stoppedDetails.reason === BREAKPOINT_STOP_REASON) {
                this.audioCueService.playAudioCue(AudioCue.onDebugBreak);
            }
        });
    }
};
AudioCueLineDebuggerContribution = ( __decorate([
    ( __param(0, IDebugService)),
    ( __param(1, IAudioCueService))
], AudioCueLineDebuggerContribution));
export { AudioCueLineDebuggerContribution };
