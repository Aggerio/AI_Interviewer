import { Button } from 'monaco-editor/esm/vs/base/browser/ui/button/button.js';
import { DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { defaultButtonStyles } from 'monaco-editor/esm/vs/platform/theme/browser/defaultStyles.js';
class CommentFormActions {
    constructor(container, actionHandler, maxActions) {
        this.container = container;
        this.actionHandler = actionHandler;
        this.maxActions = maxActions;
        this._buttonElements = [];
        this._toDispose = ( new DisposableStore());
        this._actions = [];
    }
    setActions(menu, hasOnlySecondaryActions = false) {
        this._toDispose.clear();
        this._buttonElements.forEach(b => b.remove());
        this._buttonElements = [];
        const groups = menu.getActions({ shouldForwardArgs: true });
        let isPrimary = !hasOnlySecondaryActions;
        for (const group of groups) {
            const [, actions] = group;
            this._actions = actions;
            for (const action of actions) {
                const button = ( new Button(this.container, { secondary: !isPrimary, ...defaultButtonStyles }));
                isPrimary = false;
                this._buttonElements.push(button.element);
                this._toDispose.add(button);
                this._toDispose.add(button.onDidClick(() => this.actionHandler(action)));
                button.enabled = action.enabled;
                button.label = action.label;
                if ((this.maxActions !== undefined) && (this._buttonElements.length >= this.maxActions)) {
                    console.warn(`An extension has contributed more than the allowable number of actions to a comments menu.`);
                    return;
                }
            }
        }
    }
    triggerDefaultAction() {
        if (this._actions.length) {
            const lastAction = this._actions[0];
            if (lastAction.enabled) {
                return this.actionHandler(lastAction);
            }
        }
    }
    dispose() {
        this._toDispose.dispose();
    }
}
export { CommentFormActions };
