import { CompareResult, ArrayQueue } from 'monaco-editor/esm/vs/base/common/arrays.js';
import { BugIndicatingError } from 'monaco-editor/esm/vs/base/common/errors.js';
import { observableFromEvent } from 'monaco-editor/esm/vs/base/common/observable.js';
class ReentrancyBarrier {
    constructor() {
        this._isActive = false;
    }
    get isActive() {
        return this._isActive;
    }
    makeExclusive(fn) {
        return ((...args) => {
            if (this._isActive) {
                return;
            }
            this._isActive = true;
            try {
                return fn(...args);
            }
            finally {
                this._isActive = false;
            }
        });
    }
    runExclusively(fn) {
        if (this._isActive) {
            return;
        }
        this._isActive = true;
        try {
            fn();
        }
        finally {
            this._isActive = false;
        }
    }
    runExclusivelyOrThrow(fn) {
        if (this._isActive) {
            throw new BugIndicatingError();
        }
        this._isActive = true;
        try {
            fn();
        }
        finally {
            this._isActive = false;
        }
    }
}
function* leftJoin(left, right, compare) {
    const rightQueue = ( new ArrayQueue(right));
    for (const leftElement of left) {
        rightQueue.takeWhile(rightElement => CompareResult.isGreaterThan(compare(leftElement, rightElement)));
        const equals = rightQueue.takeWhile(rightElement => CompareResult.isNeitherLessOrGreaterThan(compare(leftElement, rightElement)));
        yield { left: leftElement, rights: equals || [] };
    }
}
function concatArrays(...arrays) {
    return [].concat(...arrays);
}
function observableConfigValue(key, defaultValue, configurationService) {
    return observableFromEvent((handleChange) => configurationService.onDidChangeConfiguration(e => {
        if (e.affectsConfiguration(key)) {
            handleChange(e);
        }
    }), () => configurationService.getValue(key) ?? defaultValue);
}
export { ReentrancyBarrier, concatArrays, leftJoin, observableConfigValue };
