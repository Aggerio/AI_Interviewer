import './accessibility.css.js';
import * as nls from 'monaco-editor/esm/vs/nls.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { IAccessibilityService } from 'monaco-editor/esm/vs/platform/accessibility/common/accessibility.js';
import { registerAction2, Action2 } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { accessibilityHelpIsShown } from '../../../accessibility/browser/accessibilityContribution.js';
import { alert } from 'monaco-editor/esm/vs/base/browser/ui/aria/aria.js';
import { AccessibilityHelpNLS } from 'monaco-editor/esm/vs/editor/common/standaloneStrings.js';
class ToggleScreenReaderMode extends Action2 {
    constructor() {
        super({
            id: 'editor.action.toggleScreenReaderAccessibilityMode',
            title: { value: ( nls.localize('toggleScreenReaderMode', "Toggle Screen Reader Accessibility Mode")), original: 'Toggle Screen Reader Accessibility Mode' },
            f1: true,
            keybinding: [{
                    primary: 2048  | 35 ,
                    weight: 200  + 10,
                    when: accessibilityHelpIsShown
                },
                {
                    primary: 512  | 59  | 1024 ,
                    linux: { primary: 512  | 62  | 1024  },
                    weight: 200  + 10,
                }]
        });
    }
    async run(accessor) {
        const accessibiiltyService = accessor.get(IAccessibilityService);
        const configurationService = accessor.get(IConfigurationService);
        const isScreenReaderOptimized = accessibiiltyService.isScreenReaderOptimized();
        configurationService.updateValue('editor.accessibilitySupport', isScreenReaderOptimized ? 'off' : 'on', 2 );
        alert(isScreenReaderOptimized ? AccessibilityHelpNLS.screenReaderModeDisabled : AccessibilityHelpNLS.screenReaderModeEnabled);
    }
}
registerAction2(ToggleScreenReaderMode);
