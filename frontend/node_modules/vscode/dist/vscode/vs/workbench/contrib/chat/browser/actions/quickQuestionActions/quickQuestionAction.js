import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';
import { Lazy } from 'monaco-editor/esm/vs/base/common/lazy.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { Action2, MenuId } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { ContextKeyExpr } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { CHAT_CATEGORY } from '../chatActions.js';
import { CONTEXT_PROVIDER_EXISTS } from '../../../common/chatContextKeys.js';
const ASK_QUICK_QUESTION_ACTION_ID = 'chat.action.askQuickQuestion';
class AskQuickQuestionAction extends Action2 {
    static { this.modeRegistry = ( new Map()); }
    static registerMode(mode, modeAction) {
        AskQuickQuestionAction.modeRegistry.set(mode, ( new Lazy(() => ( new modeAction()))));
    }
    constructor() {
        super({
            id: ASK_QUICK_QUESTION_ACTION_ID,
            title: { value: ( localize('chat', "Chat")), original: 'Chat' },
            precondition: CONTEXT_PROVIDER_EXISTS,
            icon: Codicon.commentDiscussion,
            f1: false,
            category: CHAT_CATEGORY,
            keybinding: {
                weight: 200 ,
                primary: 2048  | 1024  | 39 ,
                linux: {
                    primary: 2048  | 1024  | 512  | 39
                }
            },
            menu: {
                id: MenuId.LayoutControlMenu,
                group: '0_workbench_toggles',
                when: ( ContextKeyExpr.notEquals('config.chat.experimental.defaultMode', 'chatView')),
                order: 0
            }
        });
    }
    run(accessor, query) {
        const configurationService = accessor.get(IConfigurationService);
        const mode = configurationService.getValue('chat.experimental.quickQuestion.mode');
        const modeAction = AskQuickQuestionAction.modeRegistry.get(mode);
        if (modeAction) {
            modeAction.value.run(accessor, query);
        }
    }
}
export { ASK_QUICK_QUESTION_ACTION_ID, AskQuickQuestionAction };
