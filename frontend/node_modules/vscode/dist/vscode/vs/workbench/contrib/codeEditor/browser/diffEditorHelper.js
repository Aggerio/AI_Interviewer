import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { registerDiffEditorContribution } from 'monaco-editor/esm/vs/editor/browser/editorExtensions.js';
import { ICodeEditorService } from 'monaco-editor/esm/vs/editor/browser/services/codeEditorService.js';
import { AccessibleDiffViewerNext, AccessibleDiffViewerPrev } from 'monaco-editor/esm/vs/editor/browser/widget/diffEditor.contribution.js';
import { DiffEditorWidget2 } from 'monaco-editor/esm/vs/editor/browser/widget/diffEditorWidget2/diffEditorWidget2.js';
import { EmbeddedDiffEditorWidget, EmbeddedDiffEditorWidget2 } from 'monaco-editor/esm/vs/editor/browser/widget/embeddedCodeEditorWidget.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { ContextKeyExpr, ContextKeyEqualsExpr } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';
import { Severity, INotificationService } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';
import { FloatingClickWidget } from '../../../browser/codeeditor.js';
import { AccessibilityHelpAction } from '../../accessibility/browser/accessibilityContribution.js';
import { IEditorService } from '../../../services/editor/common/editorService.js';
import { IAccessibleViewService } from '../../accessibility/browser/accessibleView.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { observableFromEvent } from 'monaco-editor/esm/vs/base/common/observable.js';
import { autorunWithStore2 } from 'monaco-editor/esm/vs/base/common/observableImpl/autorun.js';
let DiffEditorHelperContribution = class DiffEditorHelperContribution extends Disposable {
    static { this.ID = 'editor.contrib.diffEditorHelper'; }
    constructor(_diffEditor, _instantiationService, _configurationService, _notificationService) {
        super();
        this._diffEditor = _diffEditor;
        this._instantiationService = _instantiationService;
        this._configurationService = _configurationService;
        this._notificationService = _notificationService;
        this._register(createScreenReaderHelp());
        const isEmbeddedDiffEditor = (this._diffEditor instanceof EmbeddedDiffEditorWidget) || (this._diffEditor instanceof EmbeddedDiffEditorWidget2);
        if (!isEmbeddedDiffEditor) {
            const computationResult = observableFromEvent(e => this._diffEditor.onDidUpdateDiff(e), () => this._diffEditor.getDiffComputationResult());
            const onlyWhiteSpaceChange = ( computationResult.map(r => r && !r.identical && r.changes2.length === 0));
            this._register(autorunWithStore2('update state', (reader, store) => {
                if (onlyWhiteSpaceChange.read(reader)) {
                    const helperWidget = store.add(this._instantiationService.createInstance(FloatingClickWidget, this._diffEditor.getModifiedEditor(), ( localize('hintWhitespace', "Show Whitespace Differences")), null));
                    store.add(helperWidget.onClick(() => {
                        this._configurationService.updateValue('diffEditor.ignoreTrimWhitespace', false);
                    }));
                    helperWidget.render();
                }
            }));
            this._register(this._diffEditor.onDidUpdateDiff(() => {
                const diffComputationResult = this._diffEditor.getDiffComputationResult();
                if (diffComputationResult && diffComputationResult.quitEarly) {
                    this._notificationService.prompt(Severity.Warning, ( localize(
                        'hintTimeout',
                        "The diff algorithm was stopped early (after {0} ms.)",
                        this._diffEditor.maxComputationTime
                    )), [{
                            label: ( localize('removeTimeout', "Remove Limit")),
                            run: () => {
                                this._configurationService.updateValue('diffEditor.maxComputationTime', 0);
                            }
                        }], {});
                }
            }));
        }
    }
};
DiffEditorHelperContribution = ( __decorate([
    ( __param(1, IInstantiationService)),
    ( __param(2, IConfigurationService)),
    ( __param(3, INotificationService))
], DiffEditorHelperContribution));
function createScreenReaderHelp() {
    return AccessibilityHelpAction.addImplementation(105, 'diff-editor', async (accessor) => {
        const accessibleViewService = accessor.get(IAccessibleViewService);
        const editorService = accessor.get(IEditorService);
        const codeEditorService = accessor.get(ICodeEditorService);
        const keybindingService = accessor.get(IKeybindingService);
        const next = keybindingService.lookupKeybinding(AccessibleDiffViewerNext.id)?.getAriaLabel();
        const previous = keybindingService.lookupKeybinding(AccessibleDiffViewerPrev.id)?.getAriaLabel();
        if (!(editorService.activeTextEditorControl instanceof DiffEditorWidget2)) {
            return;
        }
        const codeEditor = codeEditorService.getActiveCodeEditor() || codeEditorService.getFocusedCodeEditor();
        if (!codeEditor) {
            return;
        }
        const keys = ['audioCues.diffLineDeleted', 'audioCues.diffLineInserted', 'audioCues.diffLineModified'];
        accessibleViewService.show({
            verbositySettingKey: "accessibility.verbosity.diffEditor" ,
            provideContent: () => [
                ( localize('msg1', "You are in a diff editor.")),
                ( localize(
                    'msg2',
                    "Press {0} or {1} to view the next or previous diff in the diff review mode that is optimized for screen readers.",
                    next,
                    previous
                )),
                ( localize(
                    'msg3',
                    "To control which audio cues should be played, the following settings can be configured: {0}.",
                    keys.join(', ')
                )),
            ].join('\n'),
            onClose: () => {
                codeEditor.focus();
            },
            options: { type: "help" , ariaLabel: ( localize('chat-help-label', "Diff editor accessibility help")) }
        });
    }, ( ContextKeyExpr.and(
        ContextKeyEqualsExpr.create('diffEditorVersion', 2),
        ContextKeyEqualsExpr.create('isInDiffEditor', true)
    )));
}
registerDiffEditorContribution(DiffEditorHelperContribution.ID, DiffEditorHelperContribution);
