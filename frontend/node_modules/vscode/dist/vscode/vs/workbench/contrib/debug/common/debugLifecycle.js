import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import * as nls from 'monaco-editor/esm/vs/nls.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import '../../../../../../override/vs/platform/dialogs/common/dialogs.js';
import { IDebugService } from './debug.js';
import { ILifecycleService } from '../../../services/lifecycle/common/lifecycle.js';
import { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';
let DebugLifecycle = class DebugLifecycle {
    constructor(lifecycleService, debugService, configurationService, dialogService) {
        this.debugService = debugService;
        this.configurationService = configurationService;
        this.dialogService = dialogService;
        lifecycleService.onBeforeShutdown(async (e) => e.veto(this.shouldVetoShutdown(e.reason), 'veto.debug'));
    }
    shouldVetoShutdown(_reason) {
        const rootSessions = this.debugService.getModel().getSessions().filter(s => s.parentSession === undefined);
        if (rootSessions.length === 0) {
            return false;
        }
        const shouldConfirmOnExit = this.configurationService.getValue('debug').confirmOnExit;
        if (shouldConfirmOnExit === 'never') {
            return false;
        }
        return this.showWindowCloseConfirmation(rootSessions.length);
    }
    async showWindowCloseConfirmation(numSessions) {
        let message;
        if (numSessions === 1) {
            message = ( nls.localize(
                'debug.debugSessionCloseConfirmationSingular',
                "There is an active debug session, are you sure you want to stop it?"
            ));
        }
        else {
            message = ( nls.localize(
                'debug.debugSessionCloseConfirmationPlural',
                "There are active debug sessions, are you sure you want to stop them?"
            ));
        }
        const res = await this.dialogService.confirm({
            message,
            type: 'warning',
            primaryButton: ( nls.localize(
                { key: 'debug.stop', comment: ['&& denotes a mnemonic'] },
                "&&Stop Debugging"
            ))
        });
        return !res.confirmed;
    }
};
DebugLifecycle = ( __decorate([
    ( __param(0, ILifecycleService)),
    ( __param(1, IDebugService)),
    ( __param(2, IConfigurationService)),
    ( __param(3, IDialogService))
], DebugLifecycle));
export { DebugLifecycle };
