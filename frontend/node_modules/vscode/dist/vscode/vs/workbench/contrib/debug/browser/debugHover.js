import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import * as dom from 'monaco-editor/esm/vs/base/browser/dom.js';
import { DomScrollableElement } from 'monaco-editor/esm/vs/base/browser/ui/scrollbar/scrollableElement.js';
import { coalesce } from 'monaco-editor/esm/vs/base/common/arrays.js';
import { CancellationTokenSource } from 'monaco-editor/esm/vs/base/common/cancellation.js';
import * as lifecycle from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { clamp } from 'monaco-editor/esm/vs/base/common/numbers.js';
import { isMacintosh } from 'monaco-editor/esm/vs/base/common/platform.js';
import { Range } from 'monaco-editor/esm/vs/editor/common/core/range.js';
import { ModelDecorationOptions } from 'monaco-editor/esm/vs/editor/common/model/textModel.js';
import { ILanguageFeaturesService } from 'monaco-editor/esm/vs/editor/common/services/languageFeatures.js';
import * as nls from 'monaco-editor/esm/vs/nls.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { WorkbenchAsyncDataTree } from 'monaco-editor/esm/vs/platform/list/browser/listService.js';
import { ILogService } from 'monaco-editor/esm/vs/platform/log/common/log.js';
import { editorHoverBackground, asCssVariable, editorHoverBorder, editorHoverForeground } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';
import { renderExpressionValue } from './baseDebugView.js';
import { LinkDetector } from './linkDetector.js';
import { VariablesRenderer } from './variablesView.js';
import { IDebugService } from '../common/debug.js';
import { Variable, Expression } from '../common/debugModel.js';
import { getEvaluatableExpressionAtPosition } from '../common/debugUtils.js';
const $ = dom.$;
async function doFindExpression(container, namesToFind) {
    if (!container) {
        return null;
    }
    const children = await container.getChildren();
    const filtered = children.filter(v => namesToFind[0] === v.name);
    if (filtered.length !== 1) {
        return null;
    }
    if (namesToFind.length === 1) {
        return filtered[0];
    }
    else {
        return doFindExpression(filtered[0], namesToFind.slice(1));
    }
}
async function findExpressionInStackFrame(stackFrame, namesToFind) {
    const scopes = await stackFrame.getScopes();
    const nonExpensive = scopes.filter(s => !s.expensive);
    const expressions = coalesce(await Promise.all(( nonExpensive.map(scope => doFindExpression(scope, namesToFind)))));
    return expressions.length > 0 && expressions.every(e => e.value === expressions[0].value) ? expressions[0] : undefined;
}
let DebugHoverWidget = class DebugHoverWidget {
    static { this.ID = 'debug.hoverWidget'; }
    constructor(editor, debugService, instantiationService) {
        this.editor = editor;
        this.debugService = debugService;
        this.instantiationService = instantiationService;
        this.allowEditorOverflow = true;
        this.highlightDecorations = this.editor.createDecorationsCollection();
        this.isUpdatingTree = false;
        this.toDispose = [];
        this._isVisible = false;
        this.showAtPosition = null;
        this.positionPreference = [1 , 2 ];
        this.debugHoverComputer = this.instantiationService.createInstance(DebugHoverComputer, this.editor);
    }
    create() {
        this.domNode = $('.debug-hover-widget');
        this.complexValueContainer = dom.append(this.domNode, $('.complex-value'));
        this.complexValueTitle = dom.append(this.complexValueContainer, $('.title'));
        this.treeContainer = dom.append(this.complexValueContainer, $('.debug-hover-tree'));
        this.treeContainer.setAttribute('role', 'tree');
        const tip = dom.append(this.complexValueContainer, $('.tip'));
        tip.textContent = ( nls.localize(
            { key: 'quickTip', comment: ['"switch to editor language hover" means to show the programming language hover widget instead of the debug hover'] },
            'Hold {0} key to switch to editor language hover',
            isMacintosh ? 'Option' : 'Alt'
        ));
        const dataSource = ( new DebugHoverDataSource());
        const linkeDetector = this.instantiationService.createInstance(LinkDetector);
        this.tree = this.instantiationService.createInstance(WorkbenchAsyncDataTree, 'DebugHover', this.treeContainer, ( new DebugHoverDelegate()), [this.instantiationService.createInstance(VariablesRenderer, linkeDetector)], dataSource, {
            accessibilityProvider: ( new DebugHoverAccessibilityProvider()),
            mouseSupport: false,
            horizontalScrolling: true,
            useShadows: false,
            keyboardNavigationLabelProvider: { getKeyboardNavigationLabel: (e) => e.name },
            overrideStyles: {
                listBackground: editorHoverBackground
            }
        });
        this.valueContainer = $('.value');
        this.valueContainer.tabIndex = 0;
        this.valueContainer.setAttribute('role', 'tooltip');
        this.scrollbar = ( new DomScrollableElement(this.valueContainer, { horizontal: 2  }));
        this.domNode.appendChild(this.scrollbar.getDomNode());
        this.toDispose.push(this.scrollbar);
        this.editor.applyFontInfo(this.domNode);
        this.domNode.style.backgroundColor = asCssVariable(editorHoverBackground);
        this.domNode.style.border = `1px solid ${asCssVariable(editorHoverBorder)}`;
        this.domNode.style.color = asCssVariable(editorHoverForeground);
        this.toDispose.push(this.tree.onDidChangeContentHeight(() => {
            if (!this.isUpdatingTree) {
                this.layoutTreeAndContainer();
            }
        }));
        this.toDispose.push(this.tree.onDidChangeContentWidth(() => {
            if (!this.isUpdatingTree) {
                this.layoutTreeAndContainer();
            }
        }));
        this.registerListeners();
        this.editor.addContentWidget(this);
    }
    registerListeners() {
        this.toDispose.push(dom.addStandardDisposableListener(this.domNode, 'keydown', (e) => {
            if (e.equals(9 )) {
                this.hide();
            }
        }));
        this.toDispose.push(this.editor.onDidChangeConfiguration((e) => {
            if (e.hasChanged(49 )) {
                this.editor.applyFontInfo(this.domNode);
            }
        }));
        this.toDispose.push(this.debugService.getViewModel().onDidEvaluateLazyExpression(async (e) => {
            if (e instanceof Variable && this.tree.hasNode(e)) {
                await this.tree.updateChildren(e, false, true);
                await this.tree.expand(e);
            }
        }));
    }
    isHovered() {
        return !!this.domNode?.matches(':hover');
    }
    isVisible() {
        return this._isVisible;
    }
    willBeVisible() {
        return !!this.showCancellationSource;
    }
    getId() {
        return DebugHoverWidget.ID;
    }
    getDomNode() {
        return this.domNode;
    }
    async showAt(position, focus) {
        this.showCancellationSource?.cancel();
        const cancellationSource = this.showCancellationSource = ( new CancellationTokenSource());
        const session = this.debugService.getViewModel().focusedSession;
        if (!session || !this.editor.hasModel()) {
            this.hide();
            return 1 ;
        }
        const result = await this.debugHoverComputer.compute(position, cancellationSource.token);
        if (cancellationSource.token.isCancellationRequested) {
            this.hide();
            return 2 ;
        }
        if (!result.range) {
            this.hide();
            return 1 ;
        }
        if (this.isVisible() && !result.rangeChanged) {
            return 0 ;
        }
        const expression = await this.debugHoverComputer.evaluate(session);
        if (cancellationSource.token.isCancellationRequested) {
            this.hide();
            return 2 ;
        }
        if (!expression || (expression instanceof Expression && !expression.available)) {
            this.hide();
            return 1 ;
        }
        this.highlightDecorations.set([{
                range: result.range,
                options: DebugHoverWidget._HOVER_HIGHLIGHT_DECORATION_OPTIONS
            }]);
        return this.doShow(result.range.getStartPosition(), expression, focus);
    }
    static { this._HOVER_HIGHLIGHT_DECORATION_OPTIONS = ModelDecorationOptions.register({
        description: 'bdebug-hover-highlight',
        className: 'hoverHighlight'
    }); }
    async doShow(position, expression, focus, forceValueHover = false) {
        if (!this.domNode) {
            this.create();
        }
        this.showAtPosition = position;
        this._isVisible = true;
        if (!expression.hasChildren || forceValueHover) {
            this.complexValueContainer.hidden = true;
            this.valueContainer.hidden = false;
            renderExpressionValue(expression, this.valueContainer, {
                showChanged: false,
                colorize: true
            });
            this.valueContainer.title = '';
            this.editor.layoutContentWidget(this);
            this.scrollbar.scanDomNode();
            if (focus) {
                this.editor.render();
                this.valueContainer.focus();
            }
            return undefined;
        }
        this.valueContainer.hidden = true;
        this.expressionToRender = expression;
        this.complexValueTitle.textContent = expression.value;
        this.complexValueTitle.title = expression.value;
        this.editor.layoutContentWidget(this);
        this.tree.scrollTop = 0;
        this.tree.scrollLeft = 0;
        this.complexValueContainer.hidden = false;
        if (focus) {
            this.editor.render();
            this.tree.domFocus();
        }
    }
    layoutTreeAndContainer() {
        this.layoutTree();
        this.editor.layoutContentWidget(this);
    }
    layoutTree() {
        const scrollBarHeight = 10;
        const treeHeight = Math.min(Math.max(266, this.editor.getLayoutInfo().height * 0.55), this.tree.contentHeight + scrollBarHeight);
        const realTreeWidth = this.tree.contentWidth;
        const treeWidth = clamp(realTreeWidth, 400, 550);
        this.tree.layout(treeHeight, treeWidth);
        this.treeContainer.style.height = `${treeHeight}px`;
        this.scrollbar.scanDomNode();
    }
    beforeRender() {
        if (this.expressionToRender) {
            const expression = this.expressionToRender;
            this.expressionToRender = undefined;
            this.isUpdatingTree = true;
            this.tree.setInput(expression).finally(() => {
                this.isUpdatingTree = false;
            });
        }
        return null;
    }
    afterRender(positionPreference) {
        if (positionPreference) {
            this.positionPreference = [positionPreference];
        }
    }
    hide() {
        if (this.showCancellationSource) {
            this.showCancellationSource.cancel();
            this.showCancellationSource = undefined;
        }
        if (!this._isVisible) {
            return;
        }
        if (dom.isAncestor(document.activeElement, this.domNode)) {
            this.editor.focus();
        }
        this._isVisible = false;
        this.highlightDecorations.clear();
        this.editor.layoutContentWidget(this);
        this.positionPreference = [1 , 2 ];
    }
    getPosition() {
        return this._isVisible ? {
            position: this.showAtPosition,
            preference: this.positionPreference
        } : null;
    }
    dispose() {
        this.toDispose = lifecycle.dispose(this.toDispose);
    }
};
DebugHoverWidget = ( __decorate([
    ( __param(1, IDebugService)),
    ( __param(2, IInstantiationService))
], DebugHoverWidget));
class DebugHoverAccessibilityProvider {
    getWidgetAriaLabel() {
        return ( nls.localize('treeAriaLabel', "Debug Hover"));
    }
    getAriaLabel(element) {
        return ( nls.localize(
            { key: 'variableAriaLabel', comment: ['Do not translate placeholders. Placeholders are name and value of a variable.'] },
            "{0}, value {1}, variables, debug",
            element.name,
            element.value
        ));
    }
}
class DebugHoverDataSource {
    hasChildren(element) {
        return element.hasChildren;
    }
    getChildren(element) {
        return element.getChildren();
    }
}
class DebugHoverDelegate {
    getHeight(element) {
        return 18;
    }
    getTemplateId(element) {
        return VariablesRenderer.ID;
    }
}
let DebugHoverComputer = class DebugHoverComputer {
    constructor(editor, debugService, languageFeaturesService, logService) {
        this.editor = editor;
        this.debugService = debugService;
        this.languageFeaturesService = languageFeaturesService;
        this.logService = logService;
    }
    async compute(position, token) {
        const session = this.debugService.getViewModel().focusedSession;
        if (!session || !this.editor.hasModel()) {
            return { rangeChanged: false };
        }
        const model = this.editor.getModel();
        const result = await getEvaluatableExpressionAtPosition(this.languageFeaturesService, model, position, token);
        if (!result) {
            return { rangeChanged: false };
        }
        const { range, matchingExpression } = result;
        const rangeChanged = this._currentRange ?
            !this._currentRange.equalsRange(range) :
            true;
        this._currentExpression = matchingExpression;
        this._currentRange = Range.lift(range);
        return { rangeChanged, range: this._currentRange };
    }
    async evaluate(session) {
        if (!this._currentExpression) {
            this.logService.error('No expression to evaluate');
            return;
        }
        if (session.capabilities.supportsEvaluateForHovers) {
            const expression = ( new Expression(this._currentExpression));
            await expression.evaluate(session, this.debugService.getViewModel().focusedStackFrame, 'hover');
            return expression;
        }
        else {
            const focusedStackFrame = this.debugService.getViewModel().focusedStackFrame;
            if (focusedStackFrame) {
                return await findExpressionInStackFrame(focusedStackFrame, coalesce(( this._currentExpression.split('.').map(word => word.trim()))));
            }
        }
        return undefined;
    }
};
DebugHoverComputer = ( __decorate([
    ( __param(1, IDebugService)),
    ( __param(2, ILanguageFeaturesService)),
    ( __param(3, ILogService))
], DebugHoverComputer));
export { DebugHoverWidget, findExpressionInStackFrame };
