import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { basename, dirname } from 'monaco-editor/esm/vs/base/common/path.js';
import { ITelemetryService } from 'monaco-editor/esm/vs/platform/telemetry/common/telemetry.js';
import { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';
import { ITextResourceConfigurationService } from 'monaco-editor/esm/vs/editor/common/services/textResourceConfiguration.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { AbstractTextResourceEditor } from '../../../browser/parts/editor/textResourceEditor.js';
import { IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';
import { TextResourceEditorInput } from '../../../common/editor/textResourceEditorInput.js';
import { URI } from 'monaco-editor/esm/vs/base/common/uri.js';
import { ITextModelService } from 'monaco-editor/esm/vs/editor/common/services/resolverService.js';
import { LOG_SCHEME } from '../../../services/output/common/output.js';
import { IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';
import { IEditorService } from '../../../services/editor/common/editorService.js';
import { ITextFileService } from '../../../services/textfile/common/textfiles.js';
import { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';
import { ILabelService } from 'monaco-editor/esm/vs/platform/label/common/label.js';
import { IFilesConfigurationService } from '../../../services/filesConfiguration/common/filesConfigurationService.js';
let LogViewerInput = class LogViewerInput extends TextResourceEditorInput {
    static { this.ID = 'workbench.editorinputs.output'; }
    get typeId() {
        return LogViewerInput.ID;
    }
    constructor(outputChannelDescriptor, textModelResolverService, textFileService, editorService, fileService, labelService, filesConfigurationService) {
        super(( URI.from({ scheme: LOG_SCHEME, path: outputChannelDescriptor.id })), basename(outputChannelDescriptor.file.path), dirname(outputChannelDescriptor.file.path), undefined, undefined, textModelResolverService, textFileService, editorService, fileService, labelService, filesConfigurationService);
    }
};
LogViewerInput = ( __decorate([
    ( __param(1, ITextModelService)),
    ( __param(2, ITextFileService)),
    ( __param(3, IEditorService)),
    ( __param(4, IFileService)),
    ( __param(5, ILabelService)),
    ( __param(6, IFilesConfigurationService))
], LogViewerInput));
let LogViewer = class LogViewer extends AbstractTextResourceEditor {
    static { this.LOG_VIEWER_EDITOR_ID = 'workbench.editors.logViewer'; }
    constructor(telemetryService, instantiationService, storageService, textResourceConfigurationService, themeService, editorGroupService, editorService, fileService) {
        super(LogViewer.LOG_VIEWER_EDITOR_ID, telemetryService, instantiationService, storageService, textResourceConfigurationService, themeService, editorGroupService, editorService, fileService);
    }
    getConfigurationOverrides() {
        const options = super.getConfigurationOverrides();
        options.wordWrap = 'off';
        options.folding = false;
        options.scrollBeyondLastLine = false;
        options.renderValidationDecorations = 'editable';
        return options;
    }
    getAriaLabel() {
        return ( localize('logViewerAriaLabel', "Log viewer"));
    }
};
LogViewer = ( __decorate([
    ( __param(0, ITelemetryService)),
    ( __param(1, IInstantiationService)),
    ( __param(2, IStorageService)),
    ( __param(3, ITextResourceConfigurationService)),
    ( __param(4, IThemeService)),
    ( __param(5, IEditorGroupsService)),
    ( __param(6, IEditorService)),
    ( __param(7, IFileService))
], LogViewer));
export { LogViewer, LogViewerInput };
