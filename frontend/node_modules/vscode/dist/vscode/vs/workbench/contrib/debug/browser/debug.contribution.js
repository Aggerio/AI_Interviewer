import { isMacintosh } from 'monaco-editor/esm/vs/base/common/platform.js';
import './media/debug.contribution.css.js';
import './media/debugHover.css.js';
import { registerEditorContribution } from 'monaco-editor/esm/vs/editor/browser/editorExtensions.js';
import * as nls from 'monaco-editor/esm/vs/nls.js';
import { MenuRegistry, MenuId } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { Extensions as Extensions$3 } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';
import { ContextKeyExpr } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
import { Extensions as Extensions$1 } from 'monaco-editor/esm/vs/platform/quickinput/common/quickAccess.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { EditorPaneDescriptor } from '../../../browser/editor.js';
import { ViewPaneContainer } from '../../../browser/parts/views/viewPaneContainer.js';
import { Extensions } from '../../../common/contributions.js';
import { EditorExtensions } from '../../../common/editor.js';
import { Extensions as Extensions$2 } from '../../../common/views.js';
import { BreakpointEditorContribution } from './breakpointEditorContribution.js';
import { BreakpointsView } from './breakpointsView.js';
import { CallStackEditorContribution } from './callStackEditorContribution.js';
import { CallStackView } from './callStackView.js';
import { registerColors } from './debugColors.js';
import { DEBUG_QUICK_ACCESS_PREFIX, SELECT_AND_START_ID, DEBUG_CONSOLE_QUICK_ACCESS_PREFIX, SELECT_DEBUG_CONSOLE_ID, TOGGLE_INLINE_BREAKPOINT_ID, DEBUG_COMMAND_CATEGORY, TERMINATE_THREAD_ID, STEP_OVER_LABEL, STEP_OVER_ID, STEP_INTO_LABEL, STEP_INTO_ID, STEP_INTO_TARGET_LABEL, STEP_INTO_TARGET_ID, STEP_OUT_LABEL, STEP_OUT_ID, PAUSE_LABEL, PAUSE_ID, STOP_LABEL, STOP_ID, CONTINUE_LABEL, CONTINUE_ID, FOCUS_REPL_ID, JUMP_TO_CURSOR_ID, SELECT_AND_START_LABEL, NEXT_DEBUG_CONSOLE_LABEL, NEXT_DEBUG_CONSOLE_ID, PREV_DEBUG_CONSOLE_LABEL, PREV_DEBUG_CONSOLE_ID, OPEN_LOADED_SCRIPTS_LABEL, SHOW_LOADED_SCRIPTS_ID, SELECT_DEBUG_CONSOLE_LABEL, SELECT_DEBUG_SESSION_LABEL, SELECT_DEBUG_SESSION_ID, CALLSTACK_TOP_LABEL, CALLSTACK_TOP_ID, CALLSTACK_BOTTOM_LABEL, CALLSTACK_BOTTOM_ID, CALLSTACK_UP_LABEL, CALLSTACK_UP_ID, CALLSTACK_DOWN_LABEL, CALLSTACK_DOWN_ID, RESTART_LABEL, RESTART_SESSION_ID, DISCONNECT_LABEL, DISCONNECT_ID, DISCONNECT_AND_SUSPEND_LABEL, DISCONNECT_AND_SUSPEND_ID, RESTART_FRAME_ID, COPY_STACK_TRACE_ID, EDIT_EXPRESSION_COMMAND_ID, SET_EXPRESSION_COMMAND_ID, REMOVE_EXPRESSION_COMMAND_ID } from './debugCommands.js';
import { DebugConsoleQuickAccess } from './debugConsoleQuickAccess.js';
import { RunToCursorAction, SelectionToReplAction, SelectionToWatchExpressionsAction } from './debugEditorActions.js';
import { DebugEditorContribution } from './debugEditorContribution.js';
import { debugRun, debugConsoleViewIcon, runViewIcon, variablesViewIcon, watchViewIcon, callStackViewIcon, breakpointsViewIcon, loadedScriptsViewIcon, debugInspectMemory, watchExpressionRemove } from './debugIcons.js';
import { DebugProgressContribution } from './debugProgress.js';
import { StartDebugQuickAccessProvider } from './debugQuickAccess.js';
import { DebugToolBar } from './debugToolBar.js';
import { DebugViewPaneContainer } from './debugViewlet.js';
import { DisassemblyViewContribution, DisassemblyView } from './disassemblyView.js';
import { LoadedScriptsView } from './loadedScriptsView.js';
import { Repl } from './repl.js';
import { StatusBarColorProvider } from './statusbarColorProvider.js';
import { VariablesView, VIEW_MEMORY_ID, SET_VARIABLE_ID, COPY_VALUE_ID, COPY_EVALUATE_PATH_ID, ADD_TO_WATCH_ID, BREAK_WHEN_VALUE_IS_READ_ID, BREAK_WHEN_VALUE_CHANGES_ID, BREAK_WHEN_VALUE_IS_ACCESSED_ID } from './variablesView.js';
import { WatchExpressionsView, ADD_WATCH_LABEL, ADD_WATCH_ID, REMOVE_WATCH_EXPRESSIONS_LABEL, REMOVE_WATCH_EXPRESSIONS_COMMAND_ID } from './watchExpressionsView.js';
import { BREAKPOINT_EDITOR_CONTRIBUTION_ID, EDITOR_CONTRIBUTION_ID, CONTEXT_DEBUGGERS_AVAILABLE, DEBUG_PANEL_ID, REPL_VIEW_ID, VIEWLET_ID, VARIABLES_VIEW_ID, CONTEXT_DEBUG_UX, WATCH_VIEW_ID, CALLSTACK_VIEW_ID, BREAKPOINTS_VIEW_ID, CONTEXT_BREAKPOINTS_EXIST, CONTEXT_HAS_DEBUGGED, LOADED_SCRIPTS_VIEW_ID, CONTEXT_LOADED_SCRIPTS_SUPPORTED, DISASSEMBLY_VIEW_ID, INTERNAL_CONSOLE_OPTIONS_SCHEMA, CONTEXT_IN_DEBUG_MODE, CONTEXT_DEBUG_STATE, CONTEXT_STEP_INTO_TARGETS_SUPPORTED, CONTEXT_FOCUSED_SESSION_IS_ATTACH, CONTEXT_TERMINATE_DEBUGGEE_SUPPORTED, CONTEXT_JUMP_TO_CURSOR_SUPPORTED, getStateLabel, CONTEXT_CALLSTACK_ITEM_TYPE, CONTEXT_SUSPEND_DEBUGGEE_SUPPORTED, CONTEXT_STACK_FRAME_SUPPORTS_RESTART, CONTEXT_RESTART_FRAME_SUPPORTED, CONTEXT_CAN_VIEW_MEMORY, CONTEXT_VARIABLE_IS_READONLY, CONTEXT_SET_VARIABLE_SUPPORTED, CONTEXT_VARIABLE_EVALUATE_NAME_PRESENT, CONTEXT_SET_EXPRESSION_SUPPORTED, CONTEXT_BREAK_WHEN_VALUE_IS_READ_SUPPORTED, CONTEXT_BREAK_WHEN_VALUE_CHANGES_SUPPORTED, CONTEXT_BREAK_WHEN_VALUE_IS_ACCESSED_SUPPORTED, CONTEXT_WATCH_ITEM_TYPE } from '../common/debug.js';
import { DebugContentProvider } from '../common/debugContentProvider.js';
import { DebugLifecycle } from '../common/debugLifecycle.js';
import { DisassemblyViewInput } from '../common/disassemblyViewInput.js';
import { launchSchemaId } from '../../../services/configuration/common/configuration.js';
const debugCategory = ( nls.localize('debugCategory', "Debug"));
registerColors();
( Registry.as(Extensions.Workbench)).registerWorkbenchContribution(DebugProgressContribution, 4 );
( Registry.as(Extensions.Workbench)).registerWorkbenchContribution(DebugToolBar, 3 );
( Registry.as(Extensions.Workbench)).registerWorkbenchContribution(DebugContentProvider, 4 );
( Registry.as(Extensions.Workbench)).registerWorkbenchContribution(StatusBarColorProvider, 4 );
( Registry.as(Extensions.Workbench)).registerWorkbenchContribution(DisassemblyViewContribution, 4 );
( Registry.as(Extensions.Workbench)).registerWorkbenchContribution(DebugLifecycle, 4 );
( Registry.as(Extensions$1.Quickaccess)).registerQuickAccessProvider({
    ctor: StartDebugQuickAccessProvider,
    prefix: DEBUG_QUICK_ACCESS_PREFIX,
    contextKey: 'inLaunchConfigurationsPicker',
    placeholder: ( nls.localize('startDebugPlaceholder', "Type the name of a launch configuration to run.")),
    helpEntries: [{ description: ( nls.localize('startDebuggingHelp', "Start Debugging")), commandId: SELECT_AND_START_ID }]
});
( Registry.as(Extensions$1.Quickaccess)).registerQuickAccessProvider({
    ctor: DebugConsoleQuickAccess,
    prefix: DEBUG_CONSOLE_QUICK_ACCESS_PREFIX,
    contextKey: 'inDebugConsolePicker',
    placeholder: ( nls.localize('tasksQuickAccessPlaceholder', "Type the name of a debug console to open.")),
    helpEntries: [{ description: ( nls.localize('tasksQuickAccessHelp', "Show All Debug Consoles")), commandId: SELECT_DEBUG_CONSOLE_ID }]
});
registerEditorContribution('editor.contrib.callStack', CallStackEditorContribution, 1 );
registerEditorContribution(BREAKPOINT_EDITOR_CONTRIBUTION_ID, BreakpointEditorContribution, 1 );
registerEditorContribution(EDITOR_CONTRIBUTION_ID, DebugEditorContribution, 2 );
const registerDebugCommandPaletteItem = (id, title, when, precondition) => {
    MenuRegistry.appendMenuItem(MenuId.CommandPalette, {
        when: ( ContextKeyExpr.and(CONTEXT_DEBUGGERS_AVAILABLE, when)),
        group: debugCategory,
        command: {
            id,
            title,
            category: DEBUG_COMMAND_CATEGORY,
            precondition
        }
    });
};
registerDebugCommandPaletteItem(TERMINATE_THREAD_ID, { value: ( nls.localize('terminateThread', "Terminate Thread")), original: 'Terminate Thread' }, CONTEXT_IN_DEBUG_MODE);
registerDebugCommandPaletteItem(STEP_OVER_ID, STEP_OVER_LABEL, CONTEXT_IN_DEBUG_MODE, ( CONTEXT_DEBUG_STATE.isEqualTo('stopped')));
registerDebugCommandPaletteItem(STEP_INTO_ID, STEP_INTO_LABEL, CONTEXT_IN_DEBUG_MODE, ( CONTEXT_DEBUG_STATE.isEqualTo('stopped')));
registerDebugCommandPaletteItem(STEP_INTO_TARGET_ID, STEP_INTO_TARGET_LABEL, CONTEXT_IN_DEBUG_MODE, ( ContextKeyExpr.and(CONTEXT_STEP_INTO_TARGETS_SUPPORTED, CONTEXT_IN_DEBUG_MODE, ( CONTEXT_DEBUG_STATE.isEqualTo('stopped')))));
registerDebugCommandPaletteItem(STEP_OUT_ID, STEP_OUT_LABEL, CONTEXT_IN_DEBUG_MODE, ( CONTEXT_DEBUG_STATE.isEqualTo('stopped')));
registerDebugCommandPaletteItem(PAUSE_ID, PAUSE_LABEL, CONTEXT_IN_DEBUG_MODE, ( CONTEXT_DEBUG_STATE.isEqualTo('running')));
registerDebugCommandPaletteItem(STOP_ID, STOP_LABEL, CONTEXT_IN_DEBUG_MODE, ( ContextKeyExpr.or(( CONTEXT_FOCUSED_SESSION_IS_ATTACH.toNegated()), CONTEXT_TERMINATE_DEBUGGEE_SUPPORTED)));
registerDebugCommandPaletteItem(CONTINUE_ID, CONTINUE_LABEL, CONTEXT_IN_DEBUG_MODE, ( CONTEXT_DEBUG_STATE.isEqualTo('stopped')));
registerDebugCommandPaletteItem(FOCUS_REPL_ID, { value: ( nls.localize(
    { comment: ['Debug is a noun in this context, not a verb.'], key: 'debugFocusConsole' },
    "Focus on Debug Console View"
)), original: 'Focus on Debug Console View' });
registerDebugCommandPaletteItem(JUMP_TO_CURSOR_ID, { value: ( nls.localize('jumpToCursor', "Jump to Cursor")), original: 'Jump to Cursor' }, CONTEXT_JUMP_TO_CURSOR_SUPPORTED);
registerDebugCommandPaletteItem(JUMP_TO_CURSOR_ID, { value: ( nls.localize('SetNextStatement', "Set Next Statement")), original: 'Set Next Statement' }, CONTEXT_JUMP_TO_CURSOR_SUPPORTED);
registerDebugCommandPaletteItem(RunToCursorAction.ID, { value: RunToCursorAction.LABEL, original: 'Run to Cursor' }, CONTEXT_DEBUGGERS_AVAILABLE);
registerDebugCommandPaletteItem(SelectionToReplAction.ID, { value: SelectionToReplAction.LABEL, original: 'Evaluate in Debug Console' }, CONTEXT_IN_DEBUG_MODE);
registerDebugCommandPaletteItem(SelectionToWatchExpressionsAction.ID, { value: SelectionToWatchExpressionsAction.LABEL, original: 'Add to Watch' });
registerDebugCommandPaletteItem(TOGGLE_INLINE_BREAKPOINT_ID, { value: ( nls.localize('inlineBreakpoint', "Inline Breakpoint")), original: 'Inline Breakpoint' });
registerDebugCommandPaletteItem(SELECT_AND_START_ID, SELECT_AND_START_LABEL, ( ContextKeyExpr.and(CONTEXT_DEBUGGERS_AVAILABLE, ( CONTEXT_DEBUG_STATE.notEqualsTo(getStateLabel(1 ))))));
registerDebugCommandPaletteItem(NEXT_DEBUG_CONSOLE_ID, NEXT_DEBUG_CONSOLE_LABEL);
registerDebugCommandPaletteItem(PREV_DEBUG_CONSOLE_ID, PREV_DEBUG_CONSOLE_LABEL);
registerDebugCommandPaletteItem(SHOW_LOADED_SCRIPTS_ID, OPEN_LOADED_SCRIPTS_LABEL, CONTEXT_IN_DEBUG_MODE);
registerDebugCommandPaletteItem(SELECT_DEBUG_CONSOLE_ID, SELECT_DEBUG_CONSOLE_LABEL);
registerDebugCommandPaletteItem(SELECT_DEBUG_SESSION_ID, SELECT_DEBUG_SESSION_LABEL);
registerDebugCommandPaletteItem(CALLSTACK_TOP_ID, CALLSTACK_TOP_LABEL, CONTEXT_IN_DEBUG_MODE, ( CONTEXT_DEBUG_STATE.isEqualTo('stopped')));
registerDebugCommandPaletteItem(CALLSTACK_BOTTOM_ID, CALLSTACK_BOTTOM_LABEL, CONTEXT_IN_DEBUG_MODE, ( CONTEXT_DEBUG_STATE.isEqualTo('stopped')));
registerDebugCommandPaletteItem(CALLSTACK_UP_ID, CALLSTACK_UP_LABEL, CONTEXT_IN_DEBUG_MODE, ( CONTEXT_DEBUG_STATE.isEqualTo('stopped')));
registerDebugCommandPaletteItem(CALLSTACK_DOWN_ID, CALLSTACK_DOWN_LABEL, CONTEXT_IN_DEBUG_MODE, ( CONTEXT_DEBUG_STATE.isEqualTo('stopped')));
const registerDebugViewMenuItem = (menuId, id, title, order, when, precondition, group = 'navigation', icon) => {
    MenuRegistry.appendMenuItem(menuId, {
        group,
        when,
        order,
        icon,
        command: {
            id,
            title,
            icon,
            precondition
        }
    });
};
registerDebugViewMenuItem(MenuId.DebugCallStackContext, RESTART_SESSION_ID, RESTART_LABEL, 10, ( CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('session')), undefined, '3_modification');
registerDebugViewMenuItem(MenuId.DebugCallStackContext, DISCONNECT_ID, DISCONNECT_LABEL, 20, ( CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('session')), undefined, '3_modification');
registerDebugViewMenuItem(MenuId.DebugCallStackContext, DISCONNECT_AND_SUSPEND_ID, DISCONNECT_AND_SUSPEND_LABEL, 21, ( ContextKeyExpr.and(( CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('session')), CONTEXT_SUSPEND_DEBUGGEE_SUPPORTED, CONTEXT_TERMINATE_DEBUGGEE_SUPPORTED)), undefined, '3_modification');
registerDebugViewMenuItem(MenuId.DebugCallStackContext, STOP_ID, STOP_LABEL, 30, ( CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('session')), undefined, '3_modification');
registerDebugViewMenuItem(MenuId.DebugCallStackContext, PAUSE_ID, PAUSE_LABEL, 10, ( ContextKeyExpr.and(( CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread')), ( CONTEXT_DEBUG_STATE.isEqualTo('running')))));
registerDebugViewMenuItem(MenuId.DebugCallStackContext, CONTINUE_ID, CONTINUE_LABEL, 10, ( ContextKeyExpr.and(( CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread')), ( CONTEXT_DEBUG_STATE.isEqualTo('stopped')))));
registerDebugViewMenuItem(MenuId.DebugCallStackContext, STEP_OVER_ID, STEP_OVER_LABEL, 20, ( CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread')), ( CONTEXT_DEBUG_STATE.isEqualTo('stopped')));
registerDebugViewMenuItem(MenuId.DebugCallStackContext, STEP_INTO_ID, STEP_INTO_LABEL, 30, ( CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread')), ( CONTEXT_DEBUG_STATE.isEqualTo('stopped')));
registerDebugViewMenuItem(MenuId.DebugCallStackContext, STEP_OUT_ID, STEP_OUT_LABEL, 40, ( CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread')), ( CONTEXT_DEBUG_STATE.isEqualTo('stopped')));
registerDebugViewMenuItem(MenuId.DebugCallStackContext, TERMINATE_THREAD_ID, ( nls.localize('terminateThread', "Terminate Thread")), 10, ( CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('thread')), undefined, 'termination');
registerDebugViewMenuItem(MenuId.DebugCallStackContext, RESTART_FRAME_ID, ( nls.localize('restartFrame', "Restart Frame")), 10, ( ContextKeyExpr.and(( CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('stackFrame')), CONTEXT_RESTART_FRAME_SUPPORTED)), CONTEXT_STACK_FRAME_SUPPORTS_RESTART);
registerDebugViewMenuItem(MenuId.DebugCallStackContext, COPY_STACK_TRACE_ID, ( nls.localize('copyStackTrace', "Copy Call Stack")), 20, ( CONTEXT_CALLSTACK_ITEM_TYPE.isEqualTo('stackFrame')), undefined, '3_modification');
registerDebugViewMenuItem(MenuId.DebugVariablesContext, VIEW_MEMORY_ID, ( nls.localize('viewMemory', "View Binary Data")), 15, CONTEXT_CAN_VIEW_MEMORY, CONTEXT_IN_DEBUG_MODE, 'inline', debugInspectMemory);
registerDebugViewMenuItem(MenuId.DebugVariablesContext, SET_VARIABLE_ID, ( nls.localize('setValue', "Set Value")), 10, ( ContextKeyExpr.or(CONTEXT_SET_VARIABLE_SUPPORTED, ( ContextKeyExpr.and(CONTEXT_VARIABLE_EVALUATE_NAME_PRESENT, CONTEXT_SET_EXPRESSION_SUPPORTED)))), ( CONTEXT_VARIABLE_IS_READONLY.toNegated()), '3_modification');
registerDebugViewMenuItem(MenuId.DebugVariablesContext, COPY_VALUE_ID, ( nls.localize('copyValue', "Copy Value")), 10, undefined, undefined, '5_cutcopypaste');
registerDebugViewMenuItem(MenuId.DebugVariablesContext, COPY_EVALUATE_PATH_ID, ( nls.localize('copyAsExpression', "Copy as Expression")), 20, CONTEXT_VARIABLE_EVALUATE_NAME_PRESENT, undefined, '5_cutcopypaste');
registerDebugViewMenuItem(MenuId.DebugVariablesContext, ADD_TO_WATCH_ID, ( nls.localize('addToWatchExpressions', "Add to Watch")), 100, CONTEXT_VARIABLE_EVALUATE_NAME_PRESENT, undefined, 'z_commands');
registerDebugViewMenuItem(MenuId.DebugVariablesContext, BREAK_WHEN_VALUE_IS_READ_ID, ( nls.localize('breakWhenValueIsRead', "Break on Value Read")), 200, CONTEXT_BREAK_WHEN_VALUE_IS_READ_SUPPORTED, undefined, 'z_commands');
registerDebugViewMenuItem(MenuId.DebugVariablesContext, BREAK_WHEN_VALUE_CHANGES_ID, ( nls.localize('breakWhenValueChanges', "Break on Value Change")), 210, CONTEXT_BREAK_WHEN_VALUE_CHANGES_SUPPORTED, undefined, 'z_commands');
registerDebugViewMenuItem(MenuId.DebugVariablesContext, BREAK_WHEN_VALUE_IS_ACCESSED_ID, ( nls.localize('breakWhenValueIsAccessed', "Break on Value Access")), 220, CONTEXT_BREAK_WHEN_VALUE_IS_ACCESSED_SUPPORTED, undefined, 'z_commands');
registerDebugViewMenuItem(MenuId.DebugWatchContext, ADD_WATCH_ID, ADD_WATCH_LABEL, 10, undefined, undefined, '3_modification');
registerDebugViewMenuItem(MenuId.DebugWatchContext, EDIT_EXPRESSION_COMMAND_ID, ( nls.localize('editWatchExpression', "Edit Expression")), 20, ( CONTEXT_WATCH_ITEM_TYPE.isEqualTo('expression')), undefined, '3_modification');
registerDebugViewMenuItem(MenuId.DebugWatchContext, SET_EXPRESSION_COMMAND_ID, ( nls.localize('setValue', "Set Value")), 30, ( ContextKeyExpr.or(( ContextKeyExpr.and(( CONTEXT_WATCH_ITEM_TYPE.isEqualTo('expression')), CONTEXT_SET_EXPRESSION_SUPPORTED)), ( ContextKeyExpr.and(( CONTEXT_WATCH_ITEM_TYPE.isEqualTo('variable')), CONTEXT_SET_VARIABLE_SUPPORTED)))), ( CONTEXT_VARIABLE_IS_READONLY.toNegated()), '3_modification');
registerDebugViewMenuItem(MenuId.DebugWatchContext, COPY_VALUE_ID, ( nls.localize('copyValue', "Copy Value")), 40, ( ContextKeyExpr.or(( CONTEXT_WATCH_ITEM_TYPE.isEqualTo('expression')), ( CONTEXT_WATCH_ITEM_TYPE.isEqualTo('variable')))), CONTEXT_IN_DEBUG_MODE, '3_modification');
registerDebugViewMenuItem(MenuId.DebugWatchContext, VIEW_MEMORY_ID, ( nls.localize('viewMemory', "View Binary Data")), 10, CONTEXT_CAN_VIEW_MEMORY, undefined, 'inline', debugInspectMemory);
registerDebugViewMenuItem(MenuId.DebugWatchContext, REMOVE_EXPRESSION_COMMAND_ID, ( nls.localize('removeWatchExpression', "Remove Expression")), 20, ( CONTEXT_WATCH_ITEM_TYPE.isEqualTo('expression')), undefined, 'inline', watchExpressionRemove);
registerDebugViewMenuItem(MenuId.DebugWatchContext, REMOVE_WATCH_EXPRESSIONS_COMMAND_ID, REMOVE_WATCH_EXPRESSIONS_LABEL, 20, undefined, undefined, 'z_commands');
MenuRegistry.appendMenuItem(MenuId.EditorTitle, { submenu: MenuId.EditorTitleRun, rememberDefaultAction: true, title: { value: ( nls.localize('run', "Run or Debug...")), original: 'Run or Debug...', }, icon: debugRun, group: 'navigation', order: -1 });
MenuRegistry.appendMenuItem(MenuId.MenubarMainMenu, {
    submenu: MenuId.MenubarDebugMenu,
    title: {
        value: 'Run',
        original: 'Run',
        mnemonicTitle: ( nls.localize({ key: 'mRun', comment: ['&& denotes a mnemonic'] }, "&&Run"))
    },
    order: 6
});
MenuRegistry.appendMenuItem(MenuId.MenubarNewBreakpointMenu, {
    group: '1_breakpoints',
    command: {
        id: TOGGLE_INLINE_BREAKPOINT_ID,
        title: ( nls.localize(
            { key: 'miInlineBreakpoint', comment: ['&& denotes a mnemonic'] },
            "Inline Breakp&&oint"
        ))
    },
    order: 2,
    when: CONTEXT_DEBUGGERS_AVAILABLE
});
const VIEW_CONTAINER = ( Registry.as(Extensions$2.ViewContainersRegistry)).registerViewContainer({
    id: DEBUG_PANEL_ID,
    title: ( nls.localize(
        { comment: ['Debug is a noun in this context, not a verb.'], key: 'debugPanel' },
        "Debug Console"
    )),
    icon: debugConsoleViewIcon,
    ctorDescriptor: ( new SyncDescriptor(
        ViewPaneContainer,
        [DEBUG_PANEL_ID, { mergeViewWithContainerWhenSingleView: true }]
    )),
    storageId: DEBUG_PANEL_ID,
    hideIfEmpty: true,
    order: 2,
}, 1 , { doNotRegisterOpenCommand: true });
( Registry.as(Extensions$2.ViewsRegistry)).registerViews([{
        id: REPL_VIEW_ID,
        name: ( nls.localize(
            { comment: ['Debug is a noun in this context, not a verb.'], key: 'debugPanel' },
            "Debug Console"
        )),
        containerIcon: debugConsoleViewIcon,
        canToggleVisibility: false,
        canMoveView: true,
        when: CONTEXT_DEBUGGERS_AVAILABLE,
        ctorDescriptor: ( new SyncDescriptor(Repl)),
        openCommandActionDescriptor: {
            id: 'workbench.debug.action.toggleRepl',
            mnemonicTitle: ( nls.localize(
                { key: 'miToggleDebugConsole', comment: ['&& denotes a mnemonic'] },
                "De&&bug Console"
            )),
            keybindings: { primary: 2048  | 1024  | 55  },
            order: 2
        }
    }], VIEW_CONTAINER);
const viewContainer = ( Registry.as(Extensions$2.ViewContainersRegistry)).registerViewContainer({
    id: VIEWLET_ID,
    title: { value: ( nls.localize('run and debug', "Run and Debug")), original: 'Run and Debug' },
    openCommandActionDescriptor: {
        id: VIEWLET_ID,
        mnemonicTitle: ( nls.localize({ key: 'miViewRun', comment: ['&& denotes a mnemonic'] }, "&&Run")),
        keybindings: { primary: 2048  | 1024  | 34  },
        order: 3
    },
    ctorDescriptor: ( new SyncDescriptor(DebugViewPaneContainer)),
    icon: runViewIcon,
    alwaysUseContainerInfo: true,
    order: 3,
}, 0 );
const viewsRegistry = ( Registry.as(Extensions$2.ViewsRegistry));
viewsRegistry.registerViews([{ id: VARIABLES_VIEW_ID, name: ( nls.localize('variables', "Variables")), containerIcon: variablesViewIcon, ctorDescriptor: ( new SyncDescriptor(VariablesView)), order: 10, weight: 40, canToggleVisibility: true, canMoveView: true, focusCommand: { id: 'workbench.debug.action.focusVariablesView' }, when: ( CONTEXT_DEBUG_UX.isEqualTo('default')) }], viewContainer);
viewsRegistry.registerViews([{ id: WATCH_VIEW_ID, name: ( nls.localize('watch', "Watch")), containerIcon: watchViewIcon, ctorDescriptor: ( new SyncDescriptor(WatchExpressionsView)), order: 20, weight: 10, canToggleVisibility: true, canMoveView: true, focusCommand: { id: 'workbench.debug.action.focusWatchView' }, when: ( CONTEXT_DEBUG_UX.isEqualTo('default')) }], viewContainer);
viewsRegistry.registerViews([{ id: CALLSTACK_VIEW_ID, name: ( nls.localize('callStack', "Call Stack")), containerIcon: callStackViewIcon, ctorDescriptor: ( new SyncDescriptor(CallStackView)), order: 30, weight: 30, canToggleVisibility: true, canMoveView: true, focusCommand: { id: 'workbench.debug.action.focusCallStackView' }, when: ( CONTEXT_DEBUG_UX.isEqualTo('default')) }], viewContainer);
viewsRegistry.registerViews([{ id: BREAKPOINTS_VIEW_ID, name: ( nls.localize('breakpoints', "Breakpoints")), containerIcon: breakpointsViewIcon, ctorDescriptor: ( new SyncDescriptor(BreakpointsView)), order: 40, weight: 20, canToggleVisibility: true, canMoveView: true, focusCommand: { id: 'workbench.debug.action.focusBreakpointsView' }, when: ( ContextKeyExpr.or(CONTEXT_BREAKPOINTS_EXIST, ( CONTEXT_DEBUG_UX.isEqualTo('default')), CONTEXT_HAS_DEBUGGED)) }], viewContainer);
viewsRegistry.registerViews([{ id: LOADED_SCRIPTS_VIEW_ID, name: ( nls.localize('loadedScripts', "Loaded Scripts")), containerIcon: loadedScriptsViewIcon, ctorDescriptor: ( new SyncDescriptor(LoadedScriptsView)), order: 35, weight: 5, canToggleVisibility: true, canMoveView: true, collapsed: true, when: ( ContextKeyExpr.and(CONTEXT_LOADED_SCRIPTS_SUPPORTED, ( CONTEXT_DEBUG_UX.isEqualTo('default')))) }], viewContainer);
( Registry.as(EditorExtensions.EditorPane)).registerEditorPane(EditorPaneDescriptor.create(DisassemblyView, DISASSEMBLY_VIEW_ID, ( nls.localize('disassembly', "Disassembly"))), [( new SyncDescriptor(DisassemblyViewInput))]);
const configurationRegistry = ( Registry.as(Extensions$3.Configuration));
configurationRegistry.registerConfiguration({
    id: 'debug',
    order: 20,
    title: ( nls.localize('debugConfigurationTitle', "Debug")),
    type: 'object',
    properties: {
        'debug.allowBreakpointsEverywhere': {
            type: 'boolean',
            description: ( nls.localize(
                { comment: ['This is the description for a setting'], key: 'allowBreakpointsEverywhere' },
                "Allow setting breakpoints in any file."
            )),
            default: false
        },
        'debug.openExplorerOnEnd': {
            type: 'boolean',
            description: ( nls.localize(
                { comment: ['This is the description for a setting'], key: 'openExplorerOnEnd' },
                "Automatically open the explorer view at the end of a debug session."
            )),
            default: false
        },
        'debug.inlineValues': {
            type: 'string',
            'enum': ['on', 'off', 'auto'],
            description: ( nls.localize(
                { comment: ['This is the description for a setting'], key: 'inlineValues' },
                "Show variable values inline in editor while debugging."
            )),
            'enumDescriptions': [
                ( nls.localize(
                    'inlineValues.on',
                    "Always show variable values inline in editor while debugging."
                )),
                ( nls.localize(
                    'inlineValues.off',
                    "Never show variable values inline in editor while debugging."
                )),
                ( nls.localize(
                    'inlineValues.focusNoScroll',
                    "Show variable values inline in editor while debugging when the language supports inline value locations."
                )),
            ],
            default: 'auto'
        },
        'debug.toolBarLocation': {
            enum: ['floating', 'docked', 'hidden'],
            markdownDescription: ( nls.localize(
                { comment: ['This is the description for a setting'], key: 'toolBarLocation' },
                "Controls the location of the debug toolbar. Either `floating` in all views, `docked` in the debug view, or `hidden`."
            )),
            default: 'floating'
        },
        'debug.showInStatusBar': {
            enum: ['never', 'always', 'onFirstSessionStart'],
            enumDescriptions: [( nls.localize('never', "Never show debug in Status bar")), ( nls.localize('always', "Always show debug in Status bar")), ( nls.localize(
                'onFirstSessionStart',
                "Show debug in Status bar only after debug was started for the first time"
            ))],
            description: ( nls.localize(
                { comment: ['This is the description for a setting'], key: 'showInStatusBar' },
                "Controls when the debug Status bar should be visible."
            )),
            default: 'onFirstSessionStart'
        },
        'debug.internalConsoleOptions': INTERNAL_CONSOLE_OPTIONS_SCHEMA,
        'debug.console.closeOnEnd': {
            type: 'boolean',
            description: ( nls.localize(
                'debug.console.closeOnEnd',
                "Controls if the Debug Console should be automatically closed when the debug session ends."
            )),
            default: false
        },
        'debug.terminal.clearBeforeReusing': {
            type: 'boolean',
            description: ( nls.localize(
                { comment: ['This is the description for a setting'], key: 'debug.terminal.clearBeforeReusing' },
                "Before starting a new debug session in an integrated or external terminal, clear the terminal."
            )),
            default: false
        },
        'debug.openDebug': {
            enum: ['neverOpen', 'openOnSessionStart', 'openOnFirstSessionStart', 'openOnDebugBreak'],
            default: 'openOnDebugBreak',
            description: ( nls.localize('openDebug', "Controls when the debug view should open."))
        },
        'debug.showSubSessionsInToolBar': {
            type: 'boolean',
            description: ( nls.localize(
                { comment: ['This is the description for a setting'], key: 'showSubSessionsInToolBar' },
                "Controls whether the debug sub-sessions are shown in the debug tool bar. When this setting is false the stop command on a sub-session will also stop the parent session."
            )),
            default: false
        },
        'debug.console.fontSize': {
            type: 'number',
            description: ( nls.localize(
                'debug.console.fontSize',
                "Controls the font size in pixels in the Debug Console."
            )),
            default: isMacintosh ? 12 : 14,
        },
        'debug.console.fontFamily': {
            type: 'string',
            description: ( nls.localize(
                'debug.console.fontFamily',
                "Controls the font family in the Debug Console."
            )),
            default: 'default'
        },
        'debug.console.lineHeight': {
            type: 'number',
            description: ( nls.localize(
                'debug.console.lineHeight',
                "Controls the line height in pixels in the Debug Console. Use 0 to compute the line height from the font size."
            )),
            default: 0
        },
        'debug.console.wordWrap': {
            type: 'boolean',
            description: ( nls.localize(
                'debug.console.wordWrap',
                "Controls if the lines should wrap in the Debug Console."
            )),
            default: true
        },
        'debug.console.historySuggestions': {
            type: 'boolean',
            description: ( nls.localize(
                'debug.console.historySuggestions',
                "Controls if the Debug Console should suggest previously typed input."
            )),
            default: true
        },
        'debug.console.collapseIdenticalLines': {
            type: 'boolean',
            description: ( nls.localize(
                'debug.console.collapseIdenticalLines',
                "Controls if the Debug Console should collapse identical lines and show a number of occurrences with a badge."
            )),
            default: true
        },
        'debug.console.acceptSuggestionOnEnter': {
            enum: ['off', 'on'],
            description: ( nls.localize(
                'debug.console.acceptSuggestionOnEnter',
                "Controls whether suggestions should be accepted on Enter in the Debug Console. Enter is also used to evaluate whatever is typed in the Debug Console."
            )),
            default: 'off'
        },
        'launch': {
            type: 'object',
            description: ( nls.localize(
                { comment: ['This is the description for a setting'], key: 'launch' },
                "Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces."
            )),
            default: { configurations: [], compounds: [] },
            $ref: launchSchemaId
        },
        'debug.focusWindowOnBreak': {
            type: 'boolean',
            description: ( nls.localize(
                'debug.focusWindowOnBreak',
                "Controls whether the workbench window should be focused when the debugger breaks."
            )),
            default: true
        },
        'debug.focusEditorOnBreak': {
            type: 'boolean',
            description: ( nls.localize(
                'debug.focusEditorOnBreak',
                "Controls whether the editor should be focused when the debugger breaks."
            )),
            default: true
        },
        'debug.onTaskErrors': {
            enum: ['debugAnyway', 'showErrors', 'prompt', 'abort'],
            enumDescriptions: [( nls.localize('debugAnyway', "Ignore task errors and start debugging.")), ( nls.localize('showErrors', "Show the Problems view and do not start debugging.")), ( nls.localize('prompt', "Prompt user.")), ( nls.localize('cancel', "Cancel debugging."))],
            description: ( nls.localize(
                'debug.onTaskErrors',
                "Controls what to do when errors are encountered after running a preLaunchTask."
            )),
            default: 'prompt'
        },
        'debug.showBreakpointsInOverviewRuler': {
            type: 'boolean',
            description: ( nls.localize(
                { comment: ['This is the description for a setting'], key: 'showBreakpointsInOverviewRuler' },
                "Controls whether breakpoints should be shown in the overview ruler."
            )),
            default: false
        },
        'debug.showInlineBreakpointCandidates': {
            type: 'boolean',
            description: ( nls.localize(
                { comment: ['This is the description for a setting'], key: 'showInlineBreakpointCandidates' },
                "Controls whether inline breakpoints candidate decorations should be shown in the editor while debugging."
            )),
            default: true
        },
        'debug.saveBeforeStart': {
            description: ( nls.localize(
                'debug.saveBeforeStart',
                "Controls what editors to save before starting a debug session."
            )),
            enum: ['allEditorsInActiveGroup', 'nonUntitledEditorsInActiveGroup', 'none'],
            enumDescriptions: [
                ( nls.localize(
                    'debug.saveBeforeStart.allEditorsInActiveGroup',
                    "Save all editors in the active group before starting a debug session."
                )),
                ( nls.localize(
                    'debug.saveBeforeStart.nonUntitledEditorsInActiveGroup',
                    "Save all editors in the active group except untitled ones before starting a debug session."
                )),
                ( nls.localize(
                    'debug.saveBeforeStart.none',
                    "Don't save any editors before starting a debug session."
                )),
            ],
            default: 'allEditorsInActiveGroup',
            scope: 5
        },
        'debug.confirmOnExit': {
            description: ( nls.localize(
                'debug.confirmOnExit',
                "Controls whether to confirm when the window closes if there are active debug sessions."
            )),
            type: 'string',
            enum: ['never', 'always'],
            enumDescriptions: [
                ( nls.localize('debug.confirmOnExit.never', "Never confirm.")),
                ( nls.localize(
                    'debug.confirmOnExit.always',
                    "Always confirm if there are debug sessions."
                )),
            ],
            default: 'never'
        },
        'debug.disassemblyView.showSourceCode': {
            type: 'boolean',
            default: true,
            description: ( nls.localize(
                'debug.disassemblyView.showSourceCode',
                "Show Source Code in Disassembly View."
            ))
        },
        'debug.autoExpandLazyVariables': {
            type: 'boolean',
            default: false,
            description: ( nls.localize(
                'debug.autoExpandLazyVariables',
                "Automatically show values for variables that are lazily resolved by the debugger, such as getters."
            ))
        },
        'debug.enableStatusBarColor': {
            type: 'boolean',
            description: ( nls.localize('debug.enableStatusBarColor', "Color status bar when debugger is active")),
            default: true
        }
    }
});
