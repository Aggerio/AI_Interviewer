import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { Schemas } from 'monaco-editor/esm/vs/base/common/network.js';
import { ILabelService } from 'monaco-editor/esm/vs/platform/label/common/label.js';
import { TerminalLocation } from '../../../../platform/terminal/common/terminal.js';
import { terminalEditorId, ITerminalService, ITerminalEditorService, ITerminalGroupService, ITerminalInstanceService } from './terminal.js';
import { parseTerminalUri } from './terminalUri.js';
import { terminalStrings } from '../common/terminalStrings.js';
import { RegisteredEditorPriority, IEditorResolverService } from '../../../services/editor/common/editorResolverService.js';
import { IEmbedderTerminalService } from '../../../services/terminal/common/embedderTerminalService.js';
let TerminalMainContribution = class TerminalMainContribution extends Disposable {
    constructor(editorResolverService, embedderTerminalService, labelService, terminalService, terminalEditorService, terminalGroupService, terminalInstanceService) {
        super();
        editorResolverService.registerEditor(`${Schemas.vscodeTerminal}:/**`, {
            id: terminalEditorId,
            label: terminalStrings.terminal,
            priority: RegisteredEditorPriority.exclusive
        }, {
            canSupportResource: uri => uri.scheme === Schemas.vscodeTerminal,
            singlePerResource: true
        }, {
            createEditorInput: async ({ resource, options }) => {
                let instance = terminalService.getInstanceFromResource(resource);
                if (instance) {
                    const sourceGroup = terminalGroupService.getGroupForInstance(instance);
                    sourceGroup?.removeInstance(instance);
                }
                else {
                    const terminalIdentifier = parseTerminalUri(resource);
                    if (!terminalIdentifier.instanceId) {
                        throw new Error('Terminal identifier without instanceId');
                    }
                    const primaryBackend = terminalService.getPrimaryBackend();
                    if (!primaryBackend) {
                        throw new Error('No terminal primary backend');
                    }
                    const attachPersistentProcess = await primaryBackend.requestDetachInstance(terminalIdentifier.workspaceId, terminalIdentifier.instanceId);
                    if (!attachPersistentProcess) {
                        throw new Error('No terminal persistent process to attach');
                    }
                    instance = terminalInstanceService.createInstance({ attachPersistentProcess }, TerminalLocation.Editor);
                }
                const resolvedResource = terminalEditorService.resolveResource(instance);
                const editor = terminalEditorService.getInputFromResource(resolvedResource);
                return {
                    editor,
                    options: {
                        ...options,
                        pinned: true,
                        forceReload: true,
                        override: terminalEditorId
                    }
                };
            }
        });
        labelService.registerFormatter({
            scheme: Schemas.vscodeTerminal,
            formatting: {
                label: '${path}',
                separator: ''
            }
        });
        embedderTerminalService.onDidCreateTerminal(async (embedderTerminal) => {
            const terminal = await terminalService.createTerminal({
                config: embedderTerminal,
                location: TerminalLocation.Panel
            });
            terminalService.setActiveInstance(terminal);
            await terminalService.revealActiveTerminal();
        });
    }
};
TerminalMainContribution = ( __decorate([
    ( __param(0, IEditorResolverService)),
    ( __param(1, IEmbedderTerminalService)),
    ( __param(2, ILabelService)),
    ( __param(3, ITerminalService)),
    ( __param(4, ITerminalEditorService)),
    ( __param(5, ITerminalGroupService)),
    ( __param(6, ITerminalInstanceService))
], TerminalMainContribution));
export { TerminalMainContribution };
