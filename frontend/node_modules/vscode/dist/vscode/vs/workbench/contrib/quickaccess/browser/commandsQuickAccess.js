import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { CommandsHistory } from 'monaco-editor/esm/vs/platform/quickinput/browser/commandsQuickAccess.js';
import { IEditorService } from '../../../services/editor/common/editorService.js';
import { MenuId, MenuItemAction, Action2, IMenuService } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { IExtensionService } from '../../../services/extensions/common/extensions.js';
import { raceTimeout, timeout } from 'monaco-editor/esm/vs/base/common/async.js';
import { AbstractEditorCommandsQuickAccessProvider } from 'monaco-editor/esm/vs/editor/contrib/quickAccess/browser/commandsQuickAccess.js';
import { Language } from 'monaco-editor/esm/vs/base/common/platform.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';
import { ICommandService } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';
import { ITelemetryService } from 'monaco-editor/esm/vs/platform/telemetry/common/telemetry.js';
import '../../../../../../override/vs/platform/dialogs/common/dialogs.js';
import { DefaultQuickAccessFilterValue } from 'monaco-editor/esm/vs/platform/quickinput/common/quickAccess.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';
import { ThemeIcon } from 'monaco-editor/esm/vs/base/common/themables.js';
import { IQuickInputService } from 'monaco-editor/esm/vs/platform/quickinput/common/quickInput.js';
import { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';
import { IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';
import { TriggerAction } from 'monaco-editor/esm/vs/platform/quickinput/browser/pickerQuickAccess.js';
import { IPreferencesService } from '../../../services/preferences/common/preferences.js';
import { stripIcons } from 'monaco-editor/esm/vs/base/common/iconLabels.js';
import { isFirefox } from 'monaco-editor/esm/vs/base/browser/browser.js';
import { IProductService } from 'monaco-editor/esm/vs/platform/product/common/productService.js';
import { ISemanticSimilarityService } from '../../../services/semanticSimilarity/common/semanticSimilarityService.js';
import { IChatService } from '../../chat/common/chatService.js';
import { ASK_QUICK_QUESTION_ACTION_ID } from '../../chat/browser/actions/quickQuestionActions/quickQuestionAction.js';
import { IDialogService } from '../../../../platform/dialogs/common/dialogs.js';
let CommandsQuickAccessProvider = class CommandsQuickAccessProvider extends AbstractEditorCommandsQuickAccessProvider {
    static { this.SEMANTIC_SIMILARITY_MAX_PICKS = 3; }
    static { this.SEMANTIC_SIMILARITY_THRESHOLD = 0.8; }
    static { this.SEMANTIC_SIMILARITY_DEBOUNCE = 200; }
    get activeTextEditorControl() { return this.editorService.activeTextEditorControl; }
    get defaultFilterValue() {
        if (this.configuration.preserveInput) {
            return DefaultQuickAccessFilterValue.LAST;
        }
        return undefined;
    }
    constructor(editorService, menuService, extensionService, instantiationService, keybindingService, commandService, telemetryService, dialogService, configurationService, editorGroupService, preferencesService, productService, semanticSimilarityService, chatService) {
        super({
            showAlias: !Language.isDefaultVariant(),
            noResultsPick: () => ({
                label: ( localize('noCommandResults', "No matching commands")),
                commandId: ''
            }),
        }, instantiationService, keybindingService, commandService, telemetryService, dialogService);
        this.editorService = editorService;
        this.menuService = menuService;
        this.extensionService = extensionService;
        this.configurationService = configurationService;
        this.editorGroupService = editorGroupService;
        this.preferencesService = preferencesService;
        this.productService = productService;
        this.semanticSimilarityService = semanticSimilarityService;
        this.chatService = chatService;
        this.extensionRegistrationRace = raceTimeout(this.extensionService.whenInstalledExtensionsRegistered(), 800);
        this.useSemanticSimilarity = false;
        this._register(configurationService.onDidChangeConfiguration((e) => this.updateOptions(e)));
        this.updateOptions();
    }
    get configuration() {
        const commandPaletteConfig = this.configurationService.getValue().workbench.commandPalette;
        return {
            preserveInput: commandPaletteConfig.preserveInput,
            experimental: commandPaletteConfig.experimental
        };
    }
    updateOptions(e) {
        if (e && !e.affectsConfiguration('workbench.commandPalette.experimental')) {
            return;
        }
        const config = this.configuration;
        const suggestedCommandIds = config.experimental.suggestCommands && this.productService.commandPaletteSuggestedCommandIds?.length
            ? ( new Set(this.productService.commandPaletteSuggestedCommandIds))
            : undefined;
        this.options.suggestedCommandIds = suggestedCommandIds;
        this.useSemanticSimilarity = config.experimental.useSemanticSimilarity;
    }
    async getCommandPicks(token) {
        await this.extensionRegistrationRace;
        if (token.isCancellationRequested) {
            return [];
        }
        return ( [
            ...this.getCodeEditorCommandPicks(),
            ...this.getGlobalCommandPicks()
        ].map(picks => ({
            ...picks,
            buttons: [{
                    iconClass: ThemeIcon.asClassName(Codicon.gear),
                    tooltip: ( localize('configure keybinding', "Configure Keybinding")),
                }],
            trigger: () => {
                this.preferencesService.openGlobalKeybindingSettings(false, { query: `@command:${picks.commandId}` });
                return TriggerAction.CLOSE_PICKER;
            },
        })));
    }
    hasAdditionalCommandPicks(filter, token) {
        if (!this.useSemanticSimilarity || filter === '' || token.isCancellationRequested || !this.semanticSimilarityService.isEnabled()) {
            return false;
        }
        return true;
    }
    async getAdditionalCommandPicks(allPicks, picksSoFar, filter, token) {
        if (!this.hasAdditionalCommandPicks(filter, token)) {
            return [];
        }
        const format = ( allPicks.map(p => p.commandId));
        let scores;
        try {
            await timeout(CommandsQuickAccessProvider.SEMANTIC_SIMILARITY_DEBOUNCE, token);
            scores = await this.semanticSimilarityService.getSimilarityScore(filter, format, token);
        }
        catch (e) {
            return [];
        }
        if (token.isCancellationRequested) {
            return [];
        }
        const sortedIndices = ( scores.map((_, i) => i)).sort((a, b) => scores[b] - scores[a]);
        const setOfPicksSoFar = ( new Set(( picksSoFar.map(p => p.commandId))));
        const additionalPicks = ( new Array());
        let numOfSmartPicks = 0;
        for (const i of sortedIndices) {
            const score = scores[i];
            if (score < CommandsQuickAccessProvider.SEMANTIC_SIMILARITY_THRESHOLD || numOfSmartPicks === CommandsQuickAccessProvider.SEMANTIC_SIMILARITY_MAX_PICKS) {
                break;
            }
            const pick = allPicks[i];
            if (!( setOfPicksSoFar.has(pick.commandId))) {
                additionalPicks.push(pick);
                numOfSmartPicks++;
            }
        }
        if (numOfSmartPicks) {
            additionalPicks.unshift({
                type: 'separator',
                label: ( localize('semanticSimilarity', "similar commands"))
            });
        }
        if (picksSoFar.length || additionalPicks.length) {
            additionalPicks.push({
                type: 'separator'
            });
        }
        const info = this.chatService.getProviderInfos()[0];
        if (info) {
            additionalPicks.push({
                label: ( localize('askXInChat', "Ask {0}: {1}", info.displayName, filter)),
                commandId: ASK_QUICK_QUESTION_ACTION_ID,
                args: [filter]
            });
        }
        return additionalPicks;
    }
    getGlobalCommandPicks() {
        const globalCommandPicks = [];
        const scopedContextKeyService = this.editorService.activeEditorPane?.scopedContextKeyService || this.editorGroupService.activeGroup.scopedContextKeyService;
        const globalCommandsMenu = this.menuService.createMenu(MenuId.CommandPalette, scopedContextKeyService);
        const globalCommandsMenuActions = globalCommandsMenu.getActions()
            .reduce((r, [, actions]) => [...r, ...actions], [])
            .filter(action => action instanceof MenuItemAction && action.enabled);
        for (const action of globalCommandsMenuActions) {
            let label = (typeof action.item.title === 'string' ? action.item.title : action.item.title.value) || action.item.id;
            const category = typeof action.item.category === 'string' ? action.item.category : action.item.category?.value;
            if (category) {
                label = ( localize('commandWithCategory', "{0}: {1}", category, label));
            }
            const aliasLabel = typeof action.item.title !== 'string' ? action.item.title.original : undefined;
            const aliasCategory = (category && action.item.category && typeof action.item.category !== 'string') ? action.item.category.original : undefined;
            const commandAlias = (aliasLabel && category) ?
                aliasCategory ? `${aliasCategory}: ${aliasLabel}` : `${category}: ${aliasLabel}` :
                aliasLabel;
            globalCommandPicks.push({
                commandId: action.item.id,
                commandAlias,
                label: stripIcons(label)
            });
        }
        globalCommandsMenu.dispose();
        return globalCommandPicks;
    }
};
CommandsQuickAccessProvider = ( __decorate([
    ( __param(0, IEditorService)),
    ( __param(1, IMenuService)),
    ( __param(2, IExtensionService)),
    ( __param(3, IInstantiationService)),
    ( __param(4, IKeybindingService)),
    ( __param(5, ICommandService)),
    ( __param(6, ITelemetryService)),
    ( __param(7, IDialogService)),
    ( __param(8, IConfigurationService)),
    ( __param(9, IEditorGroupsService)),
    ( __param(10, IPreferencesService)),
    ( __param(11, IProductService)),
    ( __param(12, ISemanticSimilarityService)),
    ( __param(13, IChatService))
], CommandsQuickAccessProvider));
class ShowAllCommandsAction extends Action2 {
    static { this.ID = 'workbench.action.showCommands'; }
    constructor() {
        super({
            id: ShowAllCommandsAction.ID,
            title: { value: ( localize('showTriggerActions', "Show All Commands")), original: 'Show All Commands' },
            keybinding: {
                weight: 200 ,
                when: undefined,
                primary: !isFirefox ? ((2048  | 1024  | 46) ) : undefined,
                secondary: [59 ]
            },
            f1: true
        });
    }
    async run(accessor) {
        accessor.get(IQuickInputService).quickAccess.show(CommandsQuickAccessProvider.PREFIX);
    }
}
class ClearCommandHistoryAction extends Action2 {
    constructor() {
        super({
            id: 'workbench.action.clearCommandHistory',
            title: { value: ( localize('clearCommandHistory', "Clear Command History")), original: 'Clear Command History' },
            f1: true
        });
    }
    async run(accessor) {
        const configurationService = accessor.get(IConfigurationService);
        const storageService = accessor.get(IStorageService);
        const dialogService = accessor.get(IDialogService);
        const commandHistoryLength = CommandsHistory.getConfiguredCommandHistoryLength(configurationService);
        if (commandHistoryLength > 0) {
            const { confirmed } = await dialogService.confirm({
                type: 'warning',
                message: ( localize(
                    'confirmClearMessage',
                    "Do you want to clear the history of recently used commands?"
                )),
                detail: ( localize('confirmClearDetail', "This action is irreversible!")),
                primaryButton: ( localize({ key: 'clearButtonLabel', comment: ['&& denotes a mnemonic'] }, "&&Clear"))
            });
            if (!confirmed) {
                return;
            }
            CommandsHistory.clearHistory(configurationService, storageService);
        }
    }
}
export { ClearCommandHistoryAction, CommandsQuickAccessProvider, ShowAllCommandsAction };
