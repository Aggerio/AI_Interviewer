import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { equals } from 'monaco-editor/esm/vs/base/common/arrays.js';
import { isEqual } from 'monaco-editor/esm/vs/base/common/resources.js';
import { generateUuid } from 'monaco-editor/esm/vs/base/common/uuid.js';
import { RawContextKey } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { createDecorator } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';
import { Memento } from '../../../common/memento.js';
const KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_VISIBLE = ( new RawContextKey('webviewFindWidgetVisible', false));
const KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_FOCUSED = ( new RawContextKey('webviewFindWidgetFocused', false));
const KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_ENABLED = ( new RawContextKey('webviewFindWidgetEnabled', false));
const IWebviewService = ( createDecorator('webviewService'));
function areWebviewContentOptionsEqual(a, b) {
    return (a.allowMultipleAPIAcquire === b.allowMultipleAPIAcquire
        && a.allowScripts === b.allowScripts
        && a.allowForms === b.allowForms
        && equals(a.localResourceRoots, b.localResourceRoots, isEqual)
        && equals(a.portMapping, b.portMapping, (a, b) => a.extensionHostPort === b.extensionHostPort && a.webviewPort === b.webviewPort)
        && areEnableCommandUrisEqual(a, b));
}
function areEnableCommandUrisEqual(a, b) {
    if (a.enableCommandUris === b.enableCommandUris) {
        return true;
    }
    if (Array.isArray(a.enableCommandUris) && Array.isArray(b.enableCommandUris)) {
        return equals(a.enableCommandUris, b.enableCommandUris);
    }
    return false;
}
let WebviewOriginStore = class WebviewOriginStore {
    constructor(rootStorageKey, storageService) {
        this._memento = ( new Memento(rootStorageKey, storageService));
        this._state = this._memento.getMemento(-1 , 1 );
    }
    getOrigin(viewType, additionalKey) {
        const key = this._getKey(viewType, additionalKey);
        const existing = this._state[key];
        if (existing && typeof existing === 'string') {
            return existing;
        }
        const newOrigin = generateUuid();
        this._state[key] = newOrigin;
        this._memento.saveMemento();
        return newOrigin;
    }
    _getKey(viewType, additionalKey) {
        return JSON.stringify({ viewType, key: additionalKey });
    }
};
WebviewOriginStore = ( __decorate([
    ( __param(1, IStorageService))
], WebviewOriginStore));
let ExtensionKeyedWebviewOriginStore = class ExtensionKeyedWebviewOriginStore {
    constructor(rootStorageKey, storageService) {
        this._store = ( new WebviewOriginStore(rootStorageKey, storageService));
    }
    getOrigin(viewType, extId) {
        return this._store.getOrigin(viewType, extId.value);
    }
};
ExtensionKeyedWebviewOriginStore = ( __decorate([
    ( __param(1, IStorageService))
], ExtensionKeyedWebviewOriginStore));
export { ExtensionKeyedWebviewOriginStore, IWebviewService, KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_ENABLED, KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_FOCUSED, KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_VISIBLE, WebviewOriginStore, areWebviewContentOptionsEqual };
