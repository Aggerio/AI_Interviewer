import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { ITerminalService } from './terminal.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';
import Severity from 'monaco-editor/esm/vs/base/common/severity.js';
import { ICommandService } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';
import { IExtensionService } from '../../../services/extensions/common/extensions.js';
let EnvironmentVariableInfoStale = class EnvironmentVariableInfoStale {
    constructor(_diff, _terminalId, _collection, _terminalService, _extensionService) {
        this._diff = _diff;
        this._terminalId = _terminalId;
        this._collection = _collection;
        this._terminalService = _terminalService;
        this._extensionService = _extensionService;
        this.requiresAction = true;
    }
    _getInfo(scope) {
        const extSet = ( (new Set()));
        addExtensionIdentifiers(extSet, ( (this._diff.added.values())));
        addExtensionIdentifiers(extSet, ( (this._diff.removed.values())));
        addExtensionIdentifiers(extSet, ( (this._diff.changed.values())));
        let message = ( (localize(
            'extensionEnvironmentContributionInfoStale',
            "The following extensions want to relaunch the terminal to contribute to its environment:"
        )));
        message += getMergedDescription(this._collection, scope, this._extensionService, extSet);
        return message;
    }
    _getActions() {
        return [{
                label: ( (localize('relaunchTerminalLabel', "Relaunch terminal"))),
                run: () => this._terminalService.getInstanceFromId(this._terminalId)?.relaunch(),
                commandId: "workbench.action.terminal.relaunch"
            }];
    }
    getStatus(scope) {
        return {
            id: "relaunch-needed" ,
            severity: Severity.Warning,
            icon: Codicon.warning,
            tooltip: this._getInfo(scope),
            hoverActions: this._getActions()
        };
    }
};
EnvironmentVariableInfoStale = ( (__decorate([
    ( (__param(3, ITerminalService))),
    ( (__param(4, IExtensionService)))
], EnvironmentVariableInfoStale)));
let EnvironmentVariableInfoChangesActive = class EnvironmentVariableInfoChangesActive {
    constructor(_collection, _commandService, _extensionService) {
        this._collection = _collection;
        this._commandService = _commandService;
        this._extensionService = _extensionService;
        this.requiresAction = false;
    }
    _getInfo(scope) {
        const extSet = ( (new Set()));
        addExtensionIdentifiers(extSet, ( (this._collection.getVariableMap(scope).values())));
        let message = ( (localize(
            'extensionEnvironmentContributionInfoActive',
            "The following extensions have contributed to this terminal's environment:"
        )));
        message += getMergedDescription(this._collection, scope, this._extensionService, extSet);
        return message;
    }
    _getActions(scope) {
        return [{
                label: ( (localize('showEnvironmentContributions', "Show environment contributions"))),
                run: () => this._commandService.executeCommand("workbench.action.terminal.showEnvironmentContributions" , scope),
                commandId: "workbench.action.terminal.showEnvironmentContributions"
            }];
    }
    getStatus(scope) {
        return {
            id: "env-var-info-changes-active" ,
            severity: Severity.Info,
            tooltip: this._getInfo(scope),
            hoverActions: this._getActions(scope)
        };
    }
};
EnvironmentVariableInfoChangesActive = ( (__decorate([
    ( (__param(1, ICommandService))),
    ( (__param(2, IExtensionService)))
], EnvironmentVariableInfoChangesActive)));
function getMergedDescription(collection, scope, extensionService, extSet) {
    const message = ['\n'];
    const globalDescriptions = collection.getDescriptionMap(undefined);
    const workspaceDescriptions = collection.getDescriptionMap(scope);
    for (const ext of extSet) {
        const globalDescription = globalDescriptions.get(ext);
        if (globalDescription) {
            message.push(`\n- \`${getExtensionName(ext, extensionService)}\``);
            message.push(`: ${globalDescription}`);
        }
        const workspaceDescription = workspaceDescriptions.get(ext);
        if (workspaceDescription) {
            const workspaceSuffix = globalDescription ? ` (${( ( localize('ScopedEnvironmentContributionInfo', 'workspace')))})` : '';
            message.push(`\n- \`${getExtensionName(ext, extensionService)}${workspaceSuffix}\``);
            message.push(`: ${workspaceDescription}`);
        }
        if (!globalDescription && !workspaceDescription) {
            message.push(`\n- \`${getExtensionName(ext, extensionService)}\``);
        }
    }
    return message.join('');
}
function addExtensionIdentifiers(extSet, diff) {
    for (const mutators of diff) {
        for (const mutator of mutators) {
            extSet.add(mutator.extensionIdentifier);
        }
    }
}
function getExtensionName(id, extensionService) {
    return extensionService.extensions.find(e => e.id === id)?.displayName || id;
}
export { EnvironmentVariableInfoChangesActive, EnvironmentVariableInfoStale };
