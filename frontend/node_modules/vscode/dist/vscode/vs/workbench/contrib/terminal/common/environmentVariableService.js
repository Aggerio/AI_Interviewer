import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { throttle, debounce } from 'monaco-editor/esm/vs/base/common/decorators.js';
import { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';
import { IExtensionService } from '../../../services/extensions/common/extensions.js';
import { MergedEnvironmentVariableCollection } from '../../../../platform/terminal/common/environmentVariableCollection.js';
import { deserializeEnvironmentVariableCollection, deserializeEnvironmentDescriptionMap, serializeEnvironmentVariableCollection, serializeEnvironmentDescriptionMap } from '../../../../platform/terminal/common/environmentVariableShared.js';
let EnvironmentVariableService = class EnvironmentVariableService {
    get onDidChangeCollections() { return this._onDidChangeCollections.event; }
    constructor(_extensionService, _storageService) {
        this._extensionService = _extensionService;
        this._storageService = _storageService;
        this.collections = ( new Map());
        this._onDidChangeCollections = ( new Emitter());
        this._storageService.remove("terminal.integrated.environmentVariableCollections" , 1 );
        const serializedPersistedCollections = this._storageService.get("terminal.integrated.environmentVariableCollectionsV2" , 1 );
        if (serializedPersistedCollections) {
            const collectionsJson = JSON.parse(serializedPersistedCollections);
            collectionsJson.forEach(c => this.collections.set(c.extensionIdentifier, {
                persistent: true,
                map: deserializeEnvironmentVariableCollection(c.collection),
                descriptionMap: deserializeEnvironmentDescriptionMap(c.description)
            }));
            this._invalidateExtensionCollections();
        }
        this.mergedCollection = this._resolveMergedCollection();
        this._extensionService.onDidChangeExtensions(() => this._invalidateExtensionCollections());
    }
    set(extensionIdentifier, collection) {
        this.collections.set(extensionIdentifier, collection);
        this._updateCollections();
    }
    delete(extensionIdentifier) {
        this.collections.delete(extensionIdentifier);
        this._updateCollections();
    }
    _updateCollections() {
        this._persistCollectionsEventually();
        this.mergedCollection = this._resolveMergedCollection();
        this._notifyCollectionUpdatesEventually();
    }
    _persistCollectionsEventually() {
        this._persistCollections();
    }
    _persistCollections() {
        const collectionsJson = [];
        this.collections.forEach((collection, extensionIdentifier) => {
            if (collection.persistent) {
                collectionsJson.push({
                    extensionIdentifier,
                    collection: serializeEnvironmentVariableCollection(this.collections.get(extensionIdentifier).map),
                    description: serializeEnvironmentDescriptionMap(collection.descriptionMap)
                });
            }
        });
        const stringifiedJson = JSON.stringify(collectionsJson);
        this._storageService.store("terminal.integrated.environmentVariableCollectionsV2" , stringifiedJson, 1 , 1 );
    }
    _notifyCollectionUpdatesEventually() {
        this._notifyCollectionUpdates();
    }
    _notifyCollectionUpdates() {
        this._onDidChangeCollections.fire(this.mergedCollection);
    }
    _resolveMergedCollection() {
        return ( new MergedEnvironmentVariableCollection(this.collections));
    }
    async _invalidateExtensionCollections() {
        await this._extensionService.whenInstalledExtensionsRegistered();
        const registeredExtensions = this._extensionService.extensions;
        let changes = false;
        this.collections.forEach((_, extensionIdentifier) => {
            const isExtensionRegistered = ( registeredExtensions.some(r => r.identifier.value === extensionIdentifier));
            if (!isExtensionRegistered) {
                this.collections.delete(extensionIdentifier);
                changes = true;
            }
        });
        if (changes) {
            this._updateCollections();
        }
    }
};
EnvironmentVariableService.__decorator = ( __decorate([
    throttle(1000)
], EnvironmentVariableService.prototype, "_persistCollectionsEventually", null));
EnvironmentVariableService.__decorator = ( __decorate([
    debounce(1000)
], EnvironmentVariableService.prototype, "_notifyCollectionUpdatesEventually", null));
EnvironmentVariableService = ( __decorate([
    ( __param(0, IExtensionService)),
    ( __param(1, IStorageService))
], EnvironmentVariableService));
export { EnvironmentVariableService };
