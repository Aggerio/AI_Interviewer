import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { RunOnceScheduler } from 'monaco-editor/esm/vs/base/common/async.js';
import { IModelService } from 'monaco-editor/esm/vs/editor/common/services/model.js';
import { IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';
import { OUTPUT_MODE_ID, LOG_MODE_ID } from '../../../services/output/common/output.js';
import { createWebWorker } from 'monaco-editor/esm/vs/editor/browser/services/webWorker.js';
import { dispose } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { ILanguageConfigurationService } from 'monaco-editor/esm/vs/editor/common/languages/languageConfigurationRegistry.js';
import { ILanguageFeaturesService } from 'monaco-editor/esm/vs/editor/common/services/languageFeatures.js';
let OutputLinkProvider = class OutputLinkProvider {
    static { this.DISPOSE_WORKER_TIME = 3 * 60 * 1000; }
    constructor(contextService, modelService, languageConfigurationService, languageFeaturesService) {
        this.contextService = contextService;
        this.modelService = modelService;
        this.languageConfigurationService = languageConfigurationService;
        this.languageFeaturesService = languageFeaturesService;
        this.disposeWorkerScheduler = ( new RunOnceScheduler(() => this.disposeWorker(), OutputLinkProvider.DISPOSE_WORKER_TIME));
        this.registerListeners();
        this.updateLinkProviderWorker();
    }
    registerListeners() {
        this.contextService.onDidChangeWorkspaceFolders(() => this.updateLinkProviderWorker());
    }
    updateLinkProviderWorker() {
        const folders = this.contextService.getWorkspace().folders;
        if (folders.length > 0) {
            if (!this.linkProviderRegistration) {
                this.linkProviderRegistration = this.languageFeaturesService.linkProvider.register([{ language: OUTPUT_MODE_ID, scheme: '*' }, { language: LOG_MODE_ID, scheme: '*' }], {
                    provideLinks: async (model) => {
                        const links = await this.provideLinks(model.uri);
                        return links && { links };
                    }
                });
            }
        }
        else {
            dispose(this.linkProviderRegistration);
            this.linkProviderRegistration = undefined;
        }
        this.disposeWorker();
        this.disposeWorkerScheduler.cancel();
    }
    getOrCreateWorker() {
        this.disposeWorkerScheduler.schedule();
        if (!this.worker) {
            const createData = {
                workspaceFolders: ( this.contextService.getWorkspace().folders.map(folder => ( folder.uri.toString())))
            };
            this.worker = createWebWorker(this.modelService, this.languageConfigurationService, {
                moduleId: 'vs/workbench/contrib/output/common/outputLinkComputer',
                createData,
                label: 'outputLinkComputer'
            });
        }
        return this.worker;
    }
    async provideLinks(modelUri) {
        const linkComputer = await this.getOrCreateWorker().withSyncedResources([modelUri]);
        return linkComputer.computeLinks(( modelUri.toString()));
    }
    disposeWorker() {
        if (this.worker) {
            this.worker.dispose();
            this.worker = undefined;
        }
    }
};
OutputLinkProvider = ( __decorate([
    ( __param(0, IWorkspaceContextService)),
    ( __param(1, IModelService)),
    ( __param(2, ILanguageConfigurationService)),
    ( __param(3, ILanguageFeaturesService))
], OutputLinkProvider));
export { OutputLinkProvider };
