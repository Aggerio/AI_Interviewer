import { localize } from 'monaco-editor/esm/vs/nls.js';
import { asArray } from 'monaco-editor/esm/vs/base/common/arrays.js';
import { MarkdownString } from 'monaco-editor/esm/vs/base/common/htmlContent.js';
function getInstanceHoverInfo(instance) {
    let statusString = '';
    const statuses = instance.statusList.statuses;
    const actions = [];
    for (const status of statuses) {
        statusString += `\n\n---\n\n${status.icon ? `$(${status.icon?.id}) ` : ''}${status.tooltip || status.id}`;
        if (status.hoverActions) {
            actions.push(...status.hoverActions);
        }
    }
    const shellProcessString = getShellProcessTooltip(instance, true);
    const shellIntegrationString = getShellIntegrationTooltip(instance, true);
    const content = ( (new MarkdownString(
        instance.title + shellProcessString + shellIntegrationString + statusString,
        { supportThemeIcons: true }
    )));
    return { content, actions };
}
function getShellIntegrationTooltip(instance, markdown) {
    const shellIntegrationCapabilities = [];
    if (( (instance.capabilities.has(2 )))) {
        shellIntegrationCapabilities.push(2 );
    }
    if (( (instance.capabilities.has(0 )))) {
        shellIntegrationCapabilities.push(0 );
    }
    let shellIntegrationString = '';
    if (shellIntegrationCapabilities.length > 0) {
        shellIntegrationString += `${markdown ? '\n\n---\n\n' : '\n\n'}${( ( localize('shellIntegration.enabled', "Shell integration activated")))}`;
    }
    else {
        if (instance.shellLaunchConfig.ignoreShellIntegration) {
            shellIntegrationString += `${markdown ? '\n\n---\n\n' : '\n\n'}${( ( localize(
                'launchFailed.exitCodeOnlyShellIntegration',
                "The terminal process failed to launch. Disabling shell integration with terminal.integrated.shellIntegration.enabled might help."
            )))}`;
        }
        else {
            if (instance.usedShellIntegrationInjection) {
                shellIntegrationString += `${markdown ? '\n\n---\n\n' : '\n\n'}${( ( localize(
                    'shellIntegration.activationFailed',
                    "Shell integration failed to activate"
                )))}`;
            }
        }
    }
    return shellIntegrationString;
}
function getShellProcessTooltip(instance, markdown) {
    const lines = [];
    if (instance.processId) {
        lines.push(( (localize(
            { key: 'shellProcessTooltip.processId', comment: ['The first arg is "PID" which shouldn\'t be translated'] },
            "Process ID ({0}): {1}",
            'PID',
            instance.processId
        ))) + '\n');
    }
    if (instance.shellLaunchConfig.executable) {
        let commandLine = instance.shellLaunchConfig.executable;
        const args = ( (asArray(instance.injectedArgs || instance.shellLaunchConfig.args || []).map(x => `'${x}'`))).join(' ');
        if (args) {
            commandLine += ` ${args}`;
        }
        lines.push(( (localize('shellProcessTooltip.commandLine', 'Command line: {0}', commandLine))));
    }
    return lines.length ? `${markdown ? '\n\n---\n\n' : '\n\n'}${lines.join('\n')}` : '';
}
export { getInstanceHoverInfo, getShellIntegrationTooltip, getShellProcessTooltip };
