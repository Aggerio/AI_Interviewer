import * as nls from 'monaco-editor/esm/vs/nls.js';
import { WorkbenchListFocusContextKey } from 'monaco-editor/esm/vs/platform/list/browser/listService.js';
import { IViewsService } from '../../../common/views.js';
import { searchStopIcon, searchRefreshIcon, searchCollapseAllIcon, searchExpandAllIcon, searchClearIcon, searchShowAsList, searchShowAsTree } from './searchIcons.js';
import { ClearSearchHistoryCommandId, CancelSearchActionId, SearchViewVisibleKey, RefreshSearchResultsActionId, ViewHasSearchPatternKey, CollapseSearchResultsActionId, HasSearchResults, ViewHasSomeCollapsibleKey, ExpandSearchResultsActionId, ClearSearchResultsActionId, ViewHasReplacePatternKey, ViewHasFilePatternKey, ViewAsTreeActionId, InTreeViewKey, ViewAsListActionId } from '../common/constants.js';
import { ISearchHistoryService } from '../common/searchHistoryService.js';
import { FolderMatchWorkspaceRoot, Match, FolderMatch, FolderMatchNoRoot, SearchResult, FileMatch } from './searchModel.js';
import { VIEW_ID } from '../../../services/search/common/search.js';
import { ContextKeyExpr } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { registerAction2, Action2, MenuId } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { SearchStateKey, SearchUIState } from '../common/search.js';
import { category, getSearchView } from './searchActionsBase.js';
registerAction2(class ClearSearchHistoryCommandAction extends Action2 {
    constructor() {
        super({
            id: ClearSearchHistoryCommandId,
            title: {
                value: ( nls.localize('clearSearchHistoryLabel', "Clear Search History")),
                original: 'Clear Search History'
            },
            category,
            f1: true
        });
    }
    async run(accessor) {
        clearHistoryCommand(accessor);
    }
});
registerAction2(class CancelSearchAction extends Action2 {
    constructor() {
        super({
            id: CancelSearchActionId,
            title: {
                value: ( nls.localize('CancelSearchAction.label', "Cancel Search")),
                original: 'Cancel Search'
            },
            icon: searchStopIcon,
            category,
            f1: true,
            precondition: ( ( SearchStateKey.isEqualTo(SearchUIState.Idle)).negate()),
            keybinding: {
                weight: 200 ,
                when: ( ContextKeyExpr.and(SearchViewVisibleKey, WorkbenchListFocusContextKey)),
                primary: 9 ,
            },
            menu: [{
                    id: MenuId.ViewTitle,
                    group: 'navigation',
                    order: 0,
                    when: ( ContextKeyExpr.and(( ContextKeyExpr.equals('view', VIEW_ID)), ( SearchStateKey.isEqualTo(SearchUIState.SlowSearch)))),
                }]
        });
    }
    run(accessor) {
        return cancelSearch(accessor);
    }
});
registerAction2(class RefreshAction extends Action2 {
    constructor() {
        super({
            id: RefreshSearchResultsActionId,
            title: {
                value: ( nls.localize('RefreshAction.label', "Refresh")),
                original: 'Refresh'
            },
            icon: searchRefreshIcon,
            precondition: ViewHasSearchPatternKey,
            category,
            f1: true,
            menu: [{
                    id: MenuId.ViewTitle,
                    group: 'navigation',
                    order: 0,
                    when: ( ContextKeyExpr.and(( ContextKeyExpr.equals('view', VIEW_ID)), ( ( SearchStateKey.isEqualTo(SearchUIState.SlowSearch)).negate()))),
                }]
        });
    }
    run(accessor, ...args) {
        return refreshSearch(accessor);
    }
});
registerAction2(class CollapseDeepestExpandedLevelAction extends Action2 {
    constructor() {
        super({
            id: CollapseSearchResultsActionId,
            title: {
                value: ( nls.localize('CollapseDeepestExpandedLevelAction.label', "Collapse All")),
                original: 'Collapse All'
            },
            category,
            icon: searchCollapseAllIcon,
            f1: true,
            precondition: ( ContextKeyExpr.and(HasSearchResults, ViewHasSomeCollapsibleKey)),
            menu: [{
                    id: MenuId.ViewTitle,
                    group: 'navigation',
                    order: 3,
                    when: ( ContextKeyExpr.and(( ContextKeyExpr.equals('view', VIEW_ID)), ( ContextKeyExpr.or(( HasSearchResults.negate()), ViewHasSomeCollapsibleKey)))),
                }]
        });
    }
    run(accessor, ...args) {
        return collapseDeepestExpandedLevel(accessor);
    }
});
registerAction2(class ExpandAllAction extends Action2 {
    constructor() {
        super({
            id: ExpandSearchResultsActionId,
            title: {
                value: ( nls.localize('ExpandAllAction.label', "Expand All")),
                original: 'Expand All'
            },
            category,
            icon: searchExpandAllIcon,
            f1: true,
            precondition: ( ContextKeyExpr.and(HasSearchResults, ( ViewHasSomeCollapsibleKey.toNegated()))),
            menu: [{
                    id: MenuId.ViewTitle,
                    group: 'navigation',
                    order: 3,
                    when: ( ContextKeyExpr.and(( ContextKeyExpr.equals('view', VIEW_ID)), HasSearchResults, ( ViewHasSomeCollapsibleKey.toNegated()))),
                }]
        });
    }
    run(accessor, ...args) {
        return expandAll(accessor);
    }
});
registerAction2(class ClearSearchResultsAction extends Action2 {
    constructor() {
        super({
            id: ClearSearchResultsActionId,
            title: {
                value: ( nls.localize('ClearSearchResultsAction.label', "Clear Search Results")),
                original: 'Clear Search Results'
            },
            category,
            icon: searchClearIcon,
            f1: true,
            precondition: ( ContextKeyExpr.or(
                HasSearchResults,
                ViewHasSearchPatternKey,
                ViewHasReplacePatternKey,
                ViewHasFilePatternKey
            )),
            menu: [{
                    id: MenuId.ViewTitle,
                    group: 'navigation',
                    order: 1,
                    when: ( ContextKeyExpr.equals('view', VIEW_ID)),
                }]
        });
    }
    run(accessor, ...args) {
        return clearSearchResults(accessor);
    }
});
registerAction2(class ViewAsTreeAction extends Action2 {
    constructor() {
        super({
            id: ViewAsTreeActionId,
            title: {
                value: ( nls.localize('ViewAsTreeAction.label', "View as Tree")),
                original: 'View as Tree'
            },
            category,
            icon: searchShowAsList,
            f1: true,
            precondition: ( ContextKeyExpr.and(HasSearchResults, ( InTreeViewKey.toNegated()))),
            menu: [{
                    id: MenuId.ViewTitle,
                    group: 'navigation',
                    order: 2,
                    when: ( ContextKeyExpr.and(( ContextKeyExpr.equals('view', VIEW_ID)), ( InTreeViewKey.toNegated()))),
                }]
        });
    }
    run(accessor, ...args) {
        const searchView = getSearchView(accessor.get(IViewsService));
        if (searchView) {
            searchView.setTreeView(true);
        }
    }
});
registerAction2(class ViewAsListAction extends Action2 {
    constructor() {
        super({
            id: ViewAsListActionId,
            title: {
                value: ( nls.localize('ViewAsListAction.label', "View as List")),
                original: 'View as List'
            },
            category,
            icon: searchShowAsTree,
            f1: true,
            precondition: ( ContextKeyExpr.and(HasSearchResults, InTreeViewKey)),
            menu: [{
                    id: MenuId.ViewTitle,
                    group: 'navigation',
                    order: 2,
                    when: ( ContextKeyExpr.and(( ContextKeyExpr.equals('view', VIEW_ID)), InTreeViewKey)),
                }]
        });
    }
    run(accessor, ...args) {
        const searchView = getSearchView(accessor.get(IViewsService));
        if (searchView) {
            searchView.setTreeView(false);
        }
    }
});
const clearHistoryCommand = accessor => {
    const searchHistoryService = accessor.get(ISearchHistoryService);
    searchHistoryService.clearHistory();
};
function expandAll(accessor) {
    const viewsService = accessor.get(IViewsService);
    const searchView = getSearchView(viewsService);
    if (searchView) {
        const viewer = searchView.getControl();
        viewer.expandAll();
    }
}
function clearSearchResults(accessor) {
    const viewsService = accessor.get(IViewsService);
    const searchView = getSearchView(viewsService);
    searchView?.clearSearchResults();
}
function cancelSearch(accessor) {
    const viewsService = accessor.get(IViewsService);
    const searchView = getSearchView(viewsService);
    searchView?.cancelSearch();
}
function refreshSearch(accessor) {
    const viewsService = accessor.get(IViewsService);
    const searchView = getSearchView(viewsService);
    searchView?.triggerQueryChange({ preserveFocus: false });
}
function collapseDeepestExpandedLevel(accessor) {
    const viewsService = accessor.get(IViewsService);
    const searchView = getSearchView(viewsService);
    if (searchView) {
        const viewer = searchView.getControl();
        const navigator = viewer.navigate();
        let node = navigator.first();
        let canCollapseFileMatchLevel = false;
        let canCollapseFirstLevel = false;
        if (node instanceof FolderMatchWorkspaceRoot || searchView.isTreeLayoutViewVisible) {
            while (node = navigator.next()) {
                if (node instanceof Match) {
                    canCollapseFileMatchLevel = true;
                    break;
                }
                if (searchView.isTreeLayoutViewVisible && !canCollapseFirstLevel) {
                    let nodeToTest = node;
                    if (node instanceof FolderMatch) {
                        const compressionStartNode = viewer.getCompressedTreeNode(node).element?.elements[0];
                        nodeToTest = (compressionStartNode && !(compressionStartNode instanceof Match)) ? compressionStartNode : node;
                    }
                    const immediateParent = nodeToTest.parent();
                    if (!(immediateParent instanceof FolderMatchWorkspaceRoot || immediateParent instanceof FolderMatchNoRoot || immediateParent instanceof SearchResult)) {
                        canCollapseFirstLevel = true;
                    }
                }
            }
        }
        if (canCollapseFileMatchLevel) {
            node = navigator.first();
            do {
                if (node instanceof FileMatch) {
                    viewer.collapse(node);
                }
            } while (node = navigator.next());
        }
        else if (canCollapseFirstLevel) {
            node = navigator.first();
            if (node) {
                do {
                    let nodeToTest = node;
                    if (node instanceof FolderMatch) {
                        const compressionStartNode = viewer.getCompressedTreeNode(node).element?.elements[0];
                        nodeToTest = (compressionStartNode && !(compressionStartNode instanceof Match)) ? compressionStartNode : node;
                    }
                    const immediateParent = nodeToTest.parent();
                    if (immediateParent instanceof FolderMatchWorkspaceRoot || immediateParent instanceof FolderMatchNoRoot) {
                        if (viewer.hasElement(node)) {
                            viewer.collapse(node, true);
                        }
                        else {
                            viewer.collapseAll();
                        }
                    }
                } while (node = navigator.next());
            }
        }
        else {
            viewer.collapseAll();
        }
        const firstFocusParent = viewer.getFocus()[0]?.parent();
        if (firstFocusParent && (firstFocusParent instanceof FolderMatch || firstFocusParent instanceof FileMatch) &&
            viewer.hasElement(firstFocusParent) && viewer.isCollapsed(firstFocusParent)) {
            viewer.domFocus();
            viewer.focusFirst();
            viewer.setSelection(viewer.getFocus());
        }
    }
}
