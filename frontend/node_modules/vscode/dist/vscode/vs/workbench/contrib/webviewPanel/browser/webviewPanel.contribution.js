import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { Event } from 'monaco-editor/esm/vs/base/common/event.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { registerAction2 } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { EditorPaneDescriptor } from '../../../browser/editor.js';
import { Extensions } from '../../../common/contributions.js';
import { EditorExtensions } from '../../../common/editor.js';
import { IEditorGroupsService } from '../../../services/editor/common/editorGroupsService.js';
import { ShowWebViewEditorFindWidgetAction, HideWebViewEditorFindCommand, WebViewEditorFindNextCommand, WebViewEditorFindPreviousCommand, ReloadWebviewAction } from './webviewCommands.js';
import { WebviewEditor } from './webviewEditor.js';
import { WebviewInput } from './webviewEditorInput.js';
(( Registry.as(EditorExtensions.EditorPane))).registerEditorPane(EditorPaneDescriptor.create(WebviewEditor, WebviewEditor.ID, ( localize('webview.editor.label', "webview editor"))), [( new SyncDescriptor(WebviewInput))]);
let WebviewPanelContribution = class WebviewPanelContribution extends Disposable {
    constructor(editorGroupService) {
        super();
        this.editorGroupService = editorGroupService;
        this.editorGroupService.whenReady.then(() => this.editorGroupService.groups.forEach(group => {
            this.registerGroupListener(group);
        }));
        this._register(this.editorGroupService.onDidAddGroup(group => this.registerGroupListener(group)));
    }
    registerGroupListener(group) {
        const listener = group.onWillOpenEditor(e => this.onEditorOpening(e.editor, group));
        Event.once(group.onWillDispose)(() => {
            listener.dispose();
        });
    }
    onEditorOpening(editor, group) {
        if (!(editor instanceof WebviewInput) || editor.typeId !== WebviewInput.typeId) {
            return undefined;
        }
        if (group.contains(editor)) {
            return undefined;
        }
        let previousGroup;
        const groups = this.editorGroupService.groups;
        for (const group of groups) {
            if (group.contains(editor)) {
                previousGroup = group;
                break;
            }
        }
        if (!previousGroup) {
            return undefined;
        }
        previousGroup.closeEditor(editor);
    }
};
WebviewPanelContribution = ( __decorate([
    ( __param(0, IEditorGroupsService))
], WebviewPanelContribution));
const workbenchContributionsRegistry = ( Registry.as(Extensions.Workbench));
workbenchContributionsRegistry.registerWorkbenchContribution(WebviewPanelContribution, 1 );
registerAction2(ShowWebViewEditorFindWidgetAction);
registerAction2(HideWebViewEditorFindCommand);
registerAction2(WebViewEditorFindNextCommand);
registerAction2(WebViewEditorFindPreviousCommand);
registerAction2(ReloadWebviewAction);
