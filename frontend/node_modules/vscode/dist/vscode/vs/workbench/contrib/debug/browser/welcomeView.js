import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';
import { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';
import { IContextMenuService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { RawContextKey, IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { CONTEXT_DEBUGGERS_AVAILABLE, IDebugService } from '../common/debug.js';
import { IEditorService } from '../../../services/editor/common/editorService.js';
import { ViewPane } from '../../../browser/parts/views/viewPane.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { ViewContentGroups, Extensions, IViewDescriptorService } from '../../../common/views.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { IOpenerService } from 'monaco-editor/esm/vs/platform/opener/common/opener.js';
import { isCodeEditor } from 'monaco-editor/esm/vs/editor/browser/editorBrowser.js';
import { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';
import { ITelemetryService } from 'monaco-editor/esm/vs/platform/telemetry/common/telemetry.js';
import { DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { DEBUG_START_COMMAND_ID, SELECT_AND_START_ID } from './debugCommands.js';
const debugStartLanguageKey = 'debugStartLanguage';
const CONTEXT_DEBUG_START_LANGUAGE = ( (new RawContextKey(debugStartLanguageKey, undefined)));
const CONTEXT_DEBUGGER_INTERESTED_IN_ACTIVE_EDITOR = ( (new RawContextKey('debuggerInterestedInActiveEditor', false)));
let WelcomeView = class WelcomeView extends ViewPane {
    static { this.ID = 'workbench.debug.welcome'; }
    static { this.LABEL = ( (localize('run', "Run"))); }
    constructor(options, themeService, keybindingService, contextMenuService, configurationService, contextKeyService, debugService, editorService, instantiationService, viewDescriptorService, openerService, storageSevice, telemetryService) {
        super(options, keybindingService, contextMenuService, configurationService, contextKeyService, viewDescriptorService, instantiationService, openerService, themeService, telemetryService);
        this.debugService = debugService;
        this.editorService = editorService;
        this.debugStartLanguageContext = CONTEXT_DEBUG_START_LANGUAGE.bindTo(contextKeyService);
        this.debuggerInterestedContext = CONTEXT_DEBUGGER_INTERESTED_IN_ACTIVE_EDITOR.bindTo(contextKeyService);
        const lastSetLanguage = storageSevice.get(debugStartLanguageKey, 1 );
        this.debugStartLanguageContext.set(lastSetLanguage);
        const setContextKey = () => {
            const editorControl = this.editorService.activeTextEditorControl;
            if (isCodeEditor(editorControl)) {
                const model = editorControl.getModel();
                const language = model ? model.getLanguageId() : undefined;
                if (language && this.debugService.getAdapterManager().someDebuggerInterestedInLanguage(language)) {
                    this.debugStartLanguageContext.set(language);
                    this.debuggerInterestedContext.set(true);
                    storageSevice.store(debugStartLanguageKey, language, 1 , 1 );
                    return;
                }
            }
            this.debuggerInterestedContext.set(false);
        };
        const disposables = ( (new DisposableStore()));
        this._register(disposables);
        this._register(editorService.onDidActiveEditorChange(() => {
            disposables.clear();
            const editorControl = this.editorService.activeTextEditorControl;
            if (isCodeEditor(editorControl)) {
                disposables.add(editorControl.onDidChangeModelLanguage(setContextKey));
            }
            setContextKey();
        }));
        this._register(this.debugService.getAdapterManager().onDidRegisterDebugger(setContextKey));
        this._register(this.onDidChangeBodyVisibility(visible => {
            if (visible) {
                setContextKey();
            }
        }));
        setContextKey();
        const debugKeybinding = this.keybindingService.lookupKeybinding(DEBUG_START_COMMAND_ID);
        debugKeybindingLabel = debugKeybinding ? ` (${debugKeybinding.getLabel()})` : '';
    }
    shouldShowWelcome() {
        return true;
    }
};
WelcomeView = ( (__decorate([
    ( (__param(1, IThemeService))),
    ( (__param(2, IKeybindingService))),
    ( (__param(3, IContextMenuService))),
    ( (__param(4, IConfigurationService))),
    ( (__param(5, IContextKeyService))),
    ( (__param(6, IDebugService))),
    ( (__param(7, IEditorService))),
    ( (__param(8, IInstantiationService))),
    ( (__param(9, IViewDescriptorService))),
    ( (__param(10, IOpenerService))),
    ( (__param(11, IStorageService))),
    ( (__param(12, ITelemetryService)))
], WelcomeView)));
const viewsRegistry = ( (Registry.as(Extensions.ViewsRegistry)));
let debugKeybindingLabel = '';
( (viewsRegistry.registerViewWelcomeContent(WelcomeView.ID, {
    content: `[${( ( localize('runAndDebugAction', "Run and Debug")))}${debugKeybindingLabel}](command:${DEBUG_START_COMMAND_ID})`,
    when: CONTEXT_DEBUGGERS_AVAILABLE,
    group: ViewContentGroups.Debug,
    order: 1
})));
( (viewsRegistry.registerViewWelcomeContent(WelcomeView.ID, {
    content: `[${( ( localize('detectThenRunAndDebug', "Show all automatic debug configurations")))}](command:${SELECT_AND_START_ID}).`,
    when: CONTEXT_DEBUGGERS_AVAILABLE,
    group: ViewContentGroups.Debug,
    order: 10
})));
export { WelcomeView };
