import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';
import { isEmptyObject } from 'monaco-editor/esm/vs/base/common/types.js';
import { createDecorator } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
const ISearchHistoryService = ( createDecorator('searchHistoryService'));
let SearchHistoryService = class SearchHistoryService {
    static { this.SEARCH_HISTORY_KEY = 'workbench.search.history'; }
    constructor(storageService) {
        this.storageService = storageService;
        this._onDidClearHistory = ( new Emitter());
        this.onDidClearHistory = this._onDidClearHistory.event;
    }
    clearHistory() {
        this.storageService.remove(SearchHistoryService.SEARCH_HISTORY_KEY, 1 );
        this._onDidClearHistory.fire();
    }
    load() {
        let result;
        const raw = this.storageService.get(SearchHistoryService.SEARCH_HISTORY_KEY, 1 );
        if (raw) {
            try {
                result = JSON.parse(raw);
            }
            catch (e) {
            }
        }
        return result || {};
    }
    save(history) {
        if (isEmptyObject(history)) {
            this.storageService.remove(SearchHistoryService.SEARCH_HISTORY_KEY, 1 );
        }
        else {
            this.storageService.store(SearchHistoryService.SEARCH_HISTORY_KEY, JSON.stringify(history), 1 , 0 );
        }
    }
};
SearchHistoryService = ( __decorate([
    ( __param(0, IStorageService))
], SearchHistoryService));
export { ISearchHistoryService, SearchHistoryService };
