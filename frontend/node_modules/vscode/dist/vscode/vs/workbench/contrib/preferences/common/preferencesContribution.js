import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { dispose, DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { isEqual } from 'monaco-editor/esm/vs/base/common/resources.js';
import { IModelService } from 'monaco-editor/esm/vs/editor/common/services/model.js';
import { ILanguageService } from 'monaco-editor/esm/vs/editor/common/languages/language.js';
import { ITextModelService } from 'monaco-editor/esm/vs/editor/common/services/resolverService.js';
import * as nls from 'monaco-editor/esm/vs/nls.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { Extensions } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';
import * as JSONContributionRegistry from 'monaco-editor/esm/vs/platform/jsonschemas/common/jsonContributionRegistry.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';
import { workbenchConfigurationNodeBase } from '../../../common/configuration.js';
import { SideBySideEditorInput } from '../../../common/editor/sideBySideEditorInput.js';
import { RegisteredEditorPriority, IEditorResolverService } from '../../../services/editor/common/editorResolverService.js';
import { ITextEditorService } from '../../../services/textfile/common/textEditorService.js';
import { USE_SPLIT_JSON_SETTING, DEFAULT_SETTINGS_EDITOR_SETTING, FOLDER_SETTINGS_PATH, IPreferencesService } from '../../../services/preferences/common/preferences.js';
import { IUserDataProfileService } from '../../../services/userDataProfile/common/userDataProfile.js';
const schemaRegistry = ( Registry.as(JSONContributionRegistry.Extensions.JSONContribution));
let PreferencesContribution = class PreferencesContribution {
    constructor(modelService, textModelResolverService, preferencesService, languageService, userDataProfileService, workspaceService, configurationService, editorResolverService, textEditorService) {
        this.modelService = modelService;
        this.textModelResolverService = textModelResolverService;
        this.preferencesService = preferencesService;
        this.languageService = languageService;
        this.userDataProfileService = userDataProfileService;
        this.workspaceService = workspaceService;
        this.configurationService = configurationService;
        this.editorResolverService = editorResolverService;
        this.textEditorService = textEditorService;
        this.settingsListener = this.configurationService.onDidChangeConfiguration(e => {
            if (e.affectsConfiguration(USE_SPLIT_JSON_SETTING) || e.affectsConfiguration(DEFAULT_SETTINGS_EDITOR_SETTING)) {
                this.handleSettingsEditorRegistration();
            }
        });
        this.handleSettingsEditorRegistration();
        this.start();
    }
    handleSettingsEditorRegistration() {
        dispose(this.editorOpeningListener);
        if (!!this.configurationService.getValue(USE_SPLIT_JSON_SETTING) || !!this.configurationService.getValue(DEFAULT_SETTINGS_EDITOR_SETTING)) {
            this.editorOpeningListener = this.editorResolverService.registerEditor('**/settings.json', {
                id: SideBySideEditorInput.ID,
                label: ( nls.localize('splitSettingsEditorLabel', "Split Settings Editor")),
                priority: RegisteredEditorPriority.builtin,
            }, {}, {
                createEditorInput: ({ resource, options }) => {
                    if (isEqual(resource, this.userDataProfileService.currentProfile.settingsResource)) {
                        return { editor: this.preferencesService.createSplitJsonEditorInput(3 , resource), options };
                    }
                    const state = this.workspaceService.getWorkbenchState();
                    if (state === 2 ) {
                        const folders = this.workspaceService.getWorkspace().folders;
                        if (isEqual(resource, folders[0].toResource(FOLDER_SETTINGS_PATH))) {
                            return { editor: this.preferencesService.createSplitJsonEditorInput(5 , resource), options };
                        }
                    }
                    else if (state === 3 ) {
                        const folders = this.workspaceService.getWorkspace().folders;
                        for (const folder of folders) {
                            if (isEqual(resource, folder.toResource(FOLDER_SETTINGS_PATH))) {
                                return { editor: this.preferencesService.createSplitJsonEditorInput(6 , resource), options };
                            }
                        }
                    }
                    return { editor: this.textEditorService.createTextEditor({ resource }), options };
                }
            });
        }
    }
    start() {
        this.textModelResolverService.registerTextModelContentProvider('vscode', {
            provideTextContent: async (uri) => {
                if (uri.scheme !== 'vscode') {
                    return null;
                }
                if (uri.authority === 'schemas') {
                    return this.getSchemaModel(uri);
                }
                return this.preferencesService.resolveModel(uri);
            }
        });
    }
    getSchemaModel(uri) {
        let schema = schemaRegistry.getSchemaContributions().schemas[( uri.toString())] ?? {} ;
        const modelContent = JSON.stringify(schema);
        const languageSelection = this.languageService.createById('jsonc');
        const model = this.modelService.createModel(modelContent, languageSelection, uri);
        const disposables = ( new DisposableStore());
        disposables.add(schemaRegistry.onDidChangeSchema(schemaUri => {
            if (schemaUri === ( uri.toString())) {
                schema = schemaRegistry.getSchemaContributions().schemas[( uri.toString())];
                model.setValue(JSON.stringify(schema));
            }
        }));
        disposables.add(model.onWillDispose(() => disposables.dispose()));
        return model;
    }
    dispose() {
        dispose(this.editorOpeningListener);
        dispose(this.settingsListener);
    }
};
PreferencesContribution = ( __decorate([
    ( __param(0, IModelService)),
    ( __param(1, ITextModelService)),
    ( __param(2, IPreferencesService)),
    ( __param(3, ILanguageService)),
    ( __param(4, IUserDataProfileService)),
    ( __param(5, IWorkspaceContextService)),
    ( __param(6, IConfigurationService)),
    ( __param(7, IEditorResolverService)),
    ( __param(8, ITextEditorService))
], PreferencesContribution));
const registry = ( Registry.as(Extensions.Configuration));
registry.registerConfiguration({
    ...workbenchConfigurationNodeBase,
    'properties': {
        'workbench.settings.enableNaturalLanguageSearch': {
            'type': 'boolean',
            'description': ( nls.localize(
                'enableNaturalLanguageSettingsSearch',
                "Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service."
            )),
            'default': true,
            'scope': 3 ,
            'tags': ['usesOnlineServices']
        },
        'workbench.settings.settingsSearchTocBehavior': {
            'type': 'string',
            'enum': ['hide', 'filter'],
            'enumDescriptions': [
                ( nls.localize(
                    'settingsSearchTocBehavior.hide',
                    "Hide the Table of Contents while searching."
                )),
                ( nls.localize(
                    'settingsSearchTocBehavior.filter',
                    "Filter the Table of Contents to just categories that have matching settings. Clicking a category will filter the results to that category."
                )),
            ],
            'description': ( nls.localize(
                'settingsSearchTocBehavior',
                "Controls the behavior of the settings editor Table of Contents while searching."
            )),
            'default': 'filter',
            'scope': 3
        },
    }
});
export { PreferencesContribution };
