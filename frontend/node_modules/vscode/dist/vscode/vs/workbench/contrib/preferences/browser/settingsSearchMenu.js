import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { DropdownMenuActionViewItem } from 'monaco-editor/esm/vs/base/browser/ui/dropdown/dropdownActionViewItem.js';
import { SuggestController } from 'monaco-editor/esm/vs/editor/contrib/suggest/browser/suggestController.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { IContextMenuService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';
import { MODIFIED_SETTING_TAG, EXTENSION_SETTING_TAG, FEATURE_SETTING_TAG, GENERAL_TAG_SETTING_TAG, LANGUAGE_SETTING_TAG, POLICY_SETTING_TAG } from '../common/preferences.js';
let SettingsSearchFilterDropdownMenuActionViewItem = class SettingsSearchFilterDropdownMenuActionViewItem extends DropdownMenuActionViewItem {
    constructor(action, actionRunner, searchWidget, contextMenuService) {
        super(action, { getActions: () => this.getActions() }, contextMenuService, {
            actionRunner,
            classNames: action.class,
            anchorAlignmentProvider: () => 1 ,
            menuAsChild: true
        });
        this.searchWidget = searchWidget;
        this.suggestController = SuggestController.get(this.searchWidget.inputWidget);
    }
    render(container) {
        super.render(container);
    }
    doSearchWidgetAction(queryToAppend, triggerSuggest) {
        this.searchWidget.setValue(this.searchWidget.getValue().trimEnd() + ' ' + queryToAppend);
        this.searchWidget.focus();
        if (triggerSuggest && this.suggestController) {
            this.suggestController.triggerSuggest();
        }
    }
    createAction(id, label, tooltip, queryToAppend, triggerSuggest) {
        return {
            id,
            label,
            tooltip,
            class: undefined,
            enabled: true,
            checked: false,
            run: () => { this.doSearchWidgetAction(queryToAppend, triggerSuggest); }
        };
    }
    createToggleAction(id, label, tooltip, queryToAppend) {
        const splitCurrentQuery = this.searchWidget.getValue().split(' ');
        const queryContainsQueryToAppend = splitCurrentQuery.includes(queryToAppend);
        return {
            id,
            label,
            tooltip,
            class: undefined,
            enabled: true,
            checked: queryContainsQueryToAppend,
            run: () => {
                if (!queryContainsQueryToAppend) {
                    const trimmedCurrentQuery = this.searchWidget.getValue().trimEnd();
                    const newQuery = trimmedCurrentQuery ? trimmedCurrentQuery + ' ' + queryToAppend : queryToAppend;
                    this.searchWidget.setValue(newQuery);
                }
                else {
                    const queryWithRemovedTags = this.searchWidget.getValue().split(' ')
                        .filter(word => word !== queryToAppend).join(' ');
                    this.searchWidget.setValue(queryWithRemovedTags);
                }
                this.searchWidget.focus();
            }
        };
    }
    getActions() {
        return [
            this.createToggleAction('modifiedSettingsSearch', ( localize('modifiedSettingsSearch', "Modified")), ( localize('modifiedSettingsSearchTooltip', "Add or remove modified settings filter")), `@${MODIFIED_SETTING_TAG}`),
            this.createAction('extSettingsSearch', ( localize('extSettingsSearch', "Extension ID...")), ( localize('extSettingsSearchTooltip', "Add extension ID filter")), `@${EXTENSION_SETTING_TAG}`, true),
            this.createAction('featuresSettingsSearch', ( localize('featureSettingsSearch', "Feature...")), ( localize('featureSettingsSearchTooltip', "Add feature filter")), `@${FEATURE_SETTING_TAG}`, true),
            this.createAction('tagSettingsSearch', ( localize('tagSettingsSearch', "Tag...")), ( localize('tagSettingsSearchTooltip', "Add tag filter")), `@${GENERAL_TAG_SETTING_TAG}`, true),
            this.createAction('langSettingsSearch', ( localize('langSettingsSearch', "Language...")), ( localize('langSettingsSearchTooltip', "Add language ID filter")), `@${LANGUAGE_SETTING_TAG}`, true),
            this.createToggleAction('onlineSettingsSearch', ( localize('onlineSettingsSearch', "Online services")), ( localize('onlineSettingsSearchTooltip', "Show settings for online services")), '@tag:usesOnlineServices'),
            this.createToggleAction('policySettingsSearch', ( localize('policySettingsSearch', "Policy services")), ( localize('policySettingsSearchTooltip', "Show settings for policy services")), `@${POLICY_SETTING_TAG}`)
        ];
    }
};
SettingsSearchFilterDropdownMenuActionViewItem = ( __decorate([
    ( __param(3, IContextMenuService))
], SettingsSearchFilterDropdownMenuActionViewItem));
export { SettingsSearchFilterDropdownMenuActionViewItem };
