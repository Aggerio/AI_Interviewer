import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';
import { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import Severity from 'monaco-editor/esm/vs/base/common/severity.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { listWarningForeground, listErrorForeground } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';
import { spinningLoading } from 'monaco-editor/esm/vs/platform/theme/common/iconRegistry.js';
import { ThemeIcon } from 'monaco-editor/esm/vs/base/common/themables.js';
let TerminalStatusList = class TerminalStatusList extends Disposable {
    get onDidAddStatus() { return this._onDidAddStatus.event; }
    get onDidRemoveStatus() { return this._onDidRemoveStatus.event; }
    get onDidChangePrimaryStatus() { return this._onDidChangePrimaryStatus.event; }
    constructor(_configurationService) {
        super();
        this._configurationService = _configurationService;
        this._statuses = ( new Map());
        this._statusTimeouts = ( new Map());
        this._onDidAddStatus = this._register(( new Emitter()));
        this._onDidRemoveStatus = this._register(( new Emitter()));
        this._onDidChangePrimaryStatus = this._register(( new Emitter()));
    }
    get primary() {
        let result;
        for (const s of ( this._statuses.values())) {
            if (!result || s.severity >= result.severity) {
                result = s;
            }
        }
        return result;
    }
    get statuses() { return Array.from(( this._statuses.values())); }
    add(status, duration) {
        status = this._applyAnimationSetting(status);
        const outTimeout = this._statusTimeouts.get(status.id);
        if (outTimeout) {
            window.clearTimeout(outTimeout);
            this._statusTimeouts.delete(status.id);
        }
        if (duration && duration > 0) {
            const timeout = window.setTimeout(() => this.remove(status), duration);
            this._statusTimeouts.set(status.id, timeout);
        }
        const existingStatus = this._statuses.get(status.id);
        if (existingStatus && existingStatus !== status) {
            this._onDidRemoveStatus.fire(existingStatus);
            this._statuses.delete(existingStatus.id);
        }
        if (!( this._statuses.has(status.id))) {
            const oldPrimary = this.primary;
            this._statuses.set(status.id, status);
            this._onDidAddStatus.fire(status);
            const newPrimary = this.primary;
            if (oldPrimary !== newPrimary) {
                this._onDidChangePrimaryStatus.fire(newPrimary);
            }
        }
    }
    remove(statusOrId) {
        const status = typeof statusOrId === 'string' ? this._statuses.get(statusOrId) : statusOrId;
        if (status && this._statuses.get(status.id)) {
            const wasPrimary = this.primary?.id === status.id;
            this._statuses.delete(status.id);
            this._onDidRemoveStatus.fire(status);
            if (wasPrimary) {
                this._onDidChangePrimaryStatus.fire(this.primary);
            }
        }
    }
    toggle(status, value) {
        if (value) {
            this.add(status);
        }
        else {
            this.remove(status);
        }
    }
    _applyAnimationSetting(status) {
        if (!status.icon || ThemeIcon.getModifier(status.icon) !== 'spin' || this._configurationService.getValue("terminal.integrated.tabs.enableAnimation" )) {
            return status;
        }
        let icon;
        if (status.icon.id === spinningLoading.id) {
            icon = Codicon.play;
        }
        else {
            icon = ThemeIcon.modify(status.icon, undefined);
        }
        return {
            ...status,
            icon
        };
    }
};
TerminalStatusList = ( __decorate([
    ( __param(0, IConfigurationService))
], TerminalStatusList));
function getColorForSeverity(severity) {
    switch (severity) {
        case Severity.Error:
            return listErrorForeground;
        case Severity.Warning:
            return listWarningForeground;
        default:
            return '';
    }
}
export { TerminalStatusList, getColorForSeverity };
