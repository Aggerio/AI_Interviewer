import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import * as nls from 'monaco-editor/esm/vs/nls.js';
import * as path from 'monaco-editor/esm/vs/base/common/path.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { registerEditorContribution } from 'monaco-editor/esm/vs/editor/browser/editorExtensions.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { Severity, INotificationService } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';
let LargeFileOptimizationsWarner = class LargeFileOptimizationsWarner extends Disposable {
    static { this.ID = 'editor.contrib.largeFileOptimizationsWarner'; }
    constructor(_editor, _notificationService, _configurationService) {
        super();
        this._editor = _editor;
        this._notificationService = _notificationService;
        this._configurationService = _configurationService;
        this._register(this._editor.onDidChangeModel((e) => this._update()));
        this._update();
    }
    _update() {
        const model = this._editor.getModel();
        if (!model) {
            return;
        }
        if (model.isTooLargeForTokenization()) {
            const message = ( nls.localize({
                key: 'largeFile',
                comment: [
                    'Variable 0 will be a file name.'
                ]
            }, "{0}: tokenization, wrapping and folding have been turned off for this large file in order to reduce memory usage and avoid freezing or crashing.", path.basename(model.uri.path)));
            this._notificationService.prompt(Severity.Info, message, [
                {
                    label: ( nls.localize('removeOptimizations', "Forcefully Enable Features")),
                    run: () => {
                        this._configurationService.updateValue(`editor.largeFileOptimizations`, false).then(() => {
                            this._notificationService.info(( nls.localize(
                                'reopenFilePrompt',
                                "Please reopen file in order for this setting to take effect."
                            )));
                        }, (err) => {
                            this._notificationService.error(err);
                        });
                    }
                }
            ], { neverShowAgain: { id: 'editor.contrib.largeFileOptimizationsWarner' } });
        }
    }
};
LargeFileOptimizationsWarner = ( __decorate([
    ( __param(1, INotificationService)),
    ( __param(2, IConfigurationService))
], LargeFileOptimizationsWarner));
registerEditorContribution(LargeFileOptimizationsWarner.ID, LargeFileOptimizationsWarner, 1 );
export { LargeFileOptimizationsWarner };
