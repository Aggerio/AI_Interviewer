import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { TerminalExtensions } from '../../../../platform/terminal/common/terminal.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { TerminalInstance } from './terminalInstance.js';
import { IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { TerminalConfigHelper } from './terminalConfigHelper.js';
import { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { TerminalContextKeys } from '../common/terminalContextKey.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { IWorkbenchEnvironmentService } from '../../../services/environment/common/environmentService.js';
let TerminalInstanceService = class TerminalInstanceService extends Disposable {
    get onDidCreateInstance() { return this._onDidCreateInstance.event; }
    constructor(_instantiationService, _contextKeyService, _environmentService) {
        super();
        this._instantiationService = _instantiationService;
        this._contextKeyService = _contextKeyService;
        this._environmentService = _environmentService;
        this._backendRegistration = ( new Map());
        this._onDidCreateInstance = ( new Emitter());
        this._terminalShellTypeContextKey = TerminalContextKeys.shellType.bindTo(this._contextKeyService);
        this._terminalInRunCommandPicker = TerminalContextKeys.inTerminalRunCommandPicker.bindTo(this._contextKeyService);
        this._terminalSuggestWidgetVisibleContextKey = TerminalContextKeys.suggestWidgetVisible.bindTo(this._contextKeyService);
        this._configHelper = _instantiationService.createInstance(TerminalConfigHelper);
        for (const remoteAuthority of [undefined, _environmentService.remoteAuthority]) {
            let resolve;
            const p = ( new Promise(r => resolve = r));
            this._backendRegistration.set(remoteAuthority, { promise: p, resolve: resolve });
        }
    }
    createInstance(config, target) {
        const shellLaunchConfig = this.convertProfileToShellLaunchConfig(config);
        const instance = this._instantiationService.createInstance(TerminalInstance, this._terminalShellTypeContextKey, this._terminalInRunCommandPicker, this._terminalSuggestWidgetVisibleContextKey, this._configHelper, shellLaunchConfig);
        instance.target = target;
        this._onDidCreateInstance.fire(instance);
        return instance;
    }
    convertProfileToShellLaunchConfig(shellLaunchConfigOrProfile, cwd) {
        if (shellLaunchConfigOrProfile && 'profileName' in shellLaunchConfigOrProfile) {
            const profile = shellLaunchConfigOrProfile;
            if (!profile.path) {
                return shellLaunchConfigOrProfile;
            }
            return {
                executable: profile.path,
                args: profile.args,
                env: profile.env,
                icon: profile.icon,
                color: profile.color,
                name: profile.overrideName ? profile.profileName : undefined,
                cwd
            };
        }
        if (shellLaunchConfigOrProfile) {
            if (cwd) {
                shellLaunchConfigOrProfile.cwd = cwd;
            }
            return shellLaunchConfigOrProfile;
        }
        return {};
    }
    async getBackend(remoteAuthority) {
        let backend = ( Registry.as(TerminalExtensions.Backend)).getTerminalBackend(remoteAuthority);
        if (!backend) {
            await this._backendRegistration.get(remoteAuthority)?.promise;
            backend = ( Registry.as(TerminalExtensions.Backend)).getTerminalBackend(remoteAuthority);
        }
        return backend;
    }
    getRegisteredBackends() {
        return ( ( Registry.as(TerminalExtensions.Backend)).backends.values());
    }
    didRegisterBackend(remoteAuthority) {
        this._backendRegistration.get(remoteAuthority)?.resolve();
    }
};
TerminalInstanceService = ( __decorate([
    ( __param(0, IInstantiationService)),
    ( __param(1, IContextKeyService)),
    ( __param(2, IWorkbenchEnvironmentService))
], TerminalInstanceService));
export { TerminalInstanceService };
