import './media/scrollbar.css.js';
import './media/terminal.css.js';
import './media/widgets.css.js';
import './media/xterm.css.js';
import * as nls from 'monaco-editor/esm/vs/nls.js';
import { URI } from 'monaco-editor/esm/vs/base/common/uri.js';
import { CommandsRegistry } from 'monaco-editor/esm/vs/platform/commands/common/commands.js';
import { ContextKeyExpr } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { KeybindingsRegistry } from 'monaco-editor/esm/vs/platform/keybinding/common/keybindingsRegistry.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { getQuickNavigateHandler } from '../../../browser/quickaccess.js';
import { Extensions as Extensions$1 } from '../../../common/views.js';
import { Extensions } from 'monaco-editor/esm/vs/platform/dnd/browser/dnd.js';
import { registerTerminalActions, terminalSendSequenceCommand } from './terminalActions.js';
import { TerminalViewPane } from './terminalView.js';
import { TERMINAL_VIEW_ID } from '../common/terminal.js';
import { registerColors } from '../common/terminalColorRegistry.js';
import { setupTerminalCommands } from './terminalCommands.js';
import { terminalEditorId } from './terminal.js';
import { SyncDescriptor } from 'monaco-editor/esm/vs/platform/instantiation/common/descriptors.js';
import { ViewPaneContainer } from '../../../browser/parts/views/viewPaneContainer.js';
import { Extensions as Extensions$2 } from 'monaco-editor/esm/vs/platform/quickinput/common/quickAccess.js';
import { TerminalQuickAccessProvider } from './terminalQuickAccess.js';
import { registerTerminalConfiguration } from '../common/terminalConfiguration.js';
import { CONTEXT_ACCESSIBILITY_MODE_ENABLED } from 'monaco-editor/esm/vs/platform/accessibility/common/accessibility.js';
import { terminalViewIcon } from './terminalIcons.js';
import { isWindows, isIOS } from 'monaco-editor/esm/vs/base/common/platform.js';
import { setupTerminalMenus } from './terminalMenus.js';
import { registerTerminalPlatformConfiguration } from '../../../../platform/terminal/common/terminalPlatformConfiguration.js';
import { EditorExtensions } from '../../../common/editor.js';
import { EditorPaneDescriptor } from '../../../browser/editor.js';
import { TerminalEditor } from './terminalEditor.js';
import { TerminalEditorInput } from './terminalEditorInput.js';
import { terminalStrings } from '../common/terminalStrings.js';
import { TerminalContextKeys } from '../common/terminalContextKey.js';
import { Extensions as Extensions$3 } from '../../../common/contributions.js';
import { TerminalMainContribution } from './terminalMainContribution.js';
import { Schemas } from 'monaco-editor/esm/vs/base/common/network.js';
const quickAccessRegistry = (( Registry.as(Extensions$2.Quickaccess)));
const inTerminalsPicker = 'inTerminalPicker';
quickAccessRegistry.registerQuickAccessProvider({
    ctor: TerminalQuickAccessProvider,
    prefix: TerminalQuickAccessProvider.PREFIX,
    contextKey: inTerminalsPicker,
    placeholder: ( nls.localize('tasksQuickAccessPlaceholder', "Type the name of a terminal to open.")),
    helpEntries: [{ description: ( nls.localize('tasksQuickAccessHelp', "Show All Opened Terminals")), commandId: "workbench.action.quickOpenTerm"  }]
});
const quickAccessNavigateNextInTerminalPickerId = 'workbench.action.quickOpenNavigateNextInTerminalPicker';
CommandsRegistry.registerCommand({ id: quickAccessNavigateNextInTerminalPickerId, handler: getQuickNavigateHandler(quickAccessNavigateNextInTerminalPickerId, true) });
const quickAccessNavigatePreviousInTerminalPickerId = 'workbench.action.quickOpenNavigatePreviousInTerminalPicker';
CommandsRegistry.registerCommand({ id: quickAccessNavigatePreviousInTerminalPickerId, handler: getQuickNavigateHandler(quickAccessNavigatePreviousInTerminalPickerId, false) });
const workbenchRegistry = ( Registry.as(Extensions$3.Workbench));
workbenchRegistry.registerWorkbenchContribution(TerminalMainContribution, 3 );
registerTerminalPlatformConfiguration();
registerTerminalConfiguration();
( Registry.as(EditorExtensions.EditorPane)).registerEditorPane(EditorPaneDescriptor.create(TerminalEditor, terminalEditorId, terminalStrings.terminal), [
    ( new SyncDescriptor(TerminalEditorInput))
]);
( Registry.as(Extensions.DragAndDropContribution)).register({
    dataFormatKey: "Terminals" ,
    getEditorInputs(data) {
        const editors = [];
        try {
            const terminalEditors = JSON.parse(data);
            for (const terminalEditor of terminalEditors) {
                editors.push({ resource: ( URI.parse(terminalEditor)) });
            }
        }
        catch (error) {
        }
        return editors;
    },
    setData(resources, event) {
        const terminalResources = resources.filter(({ resource }) => resource.scheme === Schemas.vscodeTerminal);
        if (terminalResources.length) {
            event.dataTransfer?.setData("Terminals" , JSON.stringify(( terminalResources.map(({ resource }) => ( resource.toString())))));
        }
    }
});
const VIEW_CONTAINER = ( Registry.as(Extensions$1.ViewContainersRegistry)).registerViewContainer({
    id: TERMINAL_VIEW_ID,
    title: ( nls.localize('terminal', "Terminal")),
    icon: terminalViewIcon,
    ctorDescriptor: ( new SyncDescriptor(
        ViewPaneContainer,
        [TERMINAL_VIEW_ID, { mergeViewWithContainerWhenSingleView: true }]
    )),
    storageId: TERMINAL_VIEW_ID,
    hideIfEmpty: true,
    order: 3,
}, 1 , { doNotRegisterOpenCommand: true, isDefault: true });
( Registry.as(Extensions$1.ViewsRegistry)).registerViews([{
        id: TERMINAL_VIEW_ID,
        name: ( nls.localize('terminal', "Terminal")),
        containerIcon: terminalViewIcon,
        canToggleVisibility: false,
        canMoveView: true,
        ctorDescriptor: ( new SyncDescriptor(TerminalViewPane)),
        openCommandActionDescriptor: {
            id: "workbench.action.terminal.toggleTerminal" ,
            mnemonicTitle: ( nls.localize(
                { key: 'miToggleIntegratedTerminal', comment: ['&& denotes a mnemonic'] },
                "&&Terminal"
            )),
            keybindings: {
                primary: 2048  | 91 ,
                mac: { primary: 256  | 91  }
            },
            order: 3
        }
    }], VIEW_CONTAINER);
registerTerminalActions();
function registerSendSequenceKeybinding(text, rule) {
    KeybindingsRegistry.registerCommandAndKeybindingRule({
        id: "workbench.action.terminal.sendSequence" ,
        weight: 200 ,
        when: rule.when || TerminalContextKeys.focus,
        primary: rule.primary,
        mac: rule.mac,
        linux: rule.linux,
        win: rule.win,
        handler: terminalSendSequenceCommand,
        args: { text }
    });
}
if (isWindows) {
    registerSendSequenceKeybinding(String.fromCharCode('V'.charCodeAt(0) - 64 ), {
        when: ( ContextKeyExpr.and(TerminalContextKeys.focus, ( ContextKeyExpr.equals(
            "terminalShellType",
            "pwsh"
        )), ( CONTEXT_ACCESSIBILITY_MODE_ENABLED.negate()))),
        primary: 2048  | 52
    });
}
registerSendSequenceKeybinding('\x1b[24~a', {
    when: ( ContextKeyExpr.and(TerminalContextKeys.focus, ( ContextKeyExpr.equals(
        "terminalShellType",
        "pwsh"
    )), TerminalContextKeys.terminalShellIntegrationEnabled, ( CONTEXT_ACCESSIBILITY_MODE_ENABLED.negate()))),
    primary: 2048  | 10 ,
    mac: { primary: 256  | 10  }
});
registerSendSequenceKeybinding('\x1b[24~b', {
    when: ( ContextKeyExpr.and(TerminalContextKeys.focus, ( ContextKeyExpr.equals(
        "terminalShellType",
        "pwsh"
    )), TerminalContextKeys.terminalShellIntegrationEnabled, ( CONTEXT_ACCESSIBILITY_MODE_ENABLED.negate()))),
    primary: 512  | 10
});
registerSendSequenceKeybinding('\x1b[24~c', {
    when: ( ContextKeyExpr.and(TerminalContextKeys.focus, ( ContextKeyExpr.equals(
        "terminalShellType",
        "pwsh"
    )), TerminalContextKeys.terminalShellIntegrationEnabled, ( CONTEXT_ACCESSIBILITY_MODE_ENABLED.negate()))),
    primary: 1024  | 3
});
registerSendSequenceKeybinding('\x1b[24~d', {
    when: ( ContextKeyExpr.and(TerminalContextKeys.focus, ( ContextKeyExpr.equals(
        "terminalShellType",
        "pwsh"
    )), TerminalContextKeys.terminalShellIntegrationEnabled, ( CONTEXT_ACCESSIBILITY_MODE_ENABLED.negate()))),
    mac: { primary: 1024  | 2048  | 17  }
});
registerSendSequenceKeybinding('\x1b[24~e', {
    when: ( ContextKeyExpr.and(TerminalContextKeys.focus, ( ContextKeyExpr.equals(
        "terminalShellType",
        "pwsh"
    )), TerminalContextKeys.terminalShellIntegrationEnabled, ( CONTEXT_ACCESSIBILITY_MODE_ENABLED.negate()), ( ContextKeyExpr.equals(
        `config.${"terminal.integrated.shellIntegration.suggestEnabled" }`,
        true
    )))),
    primary: 2048  | 10 ,
    mac: { primary: 256  | 10  }
});
registerSendSequenceKeybinding('\x1b[1;2H', {
    when: ( ContextKeyExpr.and(TerminalContextKeys.focus, ( ContextKeyExpr.equals(
        "terminalShellType",
        "pwsh"
    )))),
    mac: { primary: 1024  | 2048  | 15  }
});
registerSendSequenceKeybinding('\x12', {
    when: ( ContextKeyExpr.and(TerminalContextKeys.focus, CONTEXT_ACCESSIBILITY_MODE_ENABLED)),
    primary: 2048  | 512  | 48 ,
    mac: { primary: 256  | 512  | 48  }
});
registerSendSequenceKeybinding('\x07', {
    when: TerminalContextKeys.focus,
    primary: 2048  | 512  | 37 ,
    mac: { primary: 256  | 512  | 37  }
});
if (isIOS) {
    registerSendSequenceKeybinding(String.fromCharCode('C'.charCodeAt(0) - 64 ), {
        when: ( ContextKeyExpr.and(TerminalContextKeys.focus)),
        primary: 256  | 33
    });
}
registerSendSequenceKeybinding(String.fromCharCode('W'.charCodeAt(0) - 64 ), {
    primary: 2048  | 1 ,
    mac: { primary: 512  | 1  }
});
if (isWindows) {
    registerSendSequenceKeybinding(String.fromCharCode('H'.charCodeAt(0) - 64 ), {
        when: ( ContextKeyExpr.and(TerminalContextKeys.focus, ( ContextKeyExpr.equals(
            "terminalShellType",
            "cmd"
        )))),
        primary: 2048  | 1 ,
    });
}
registerSendSequenceKeybinding('\u001bd', {
    primary: 2048  | 20 ,
    mac: { primary: 512  | 20  }
});
registerSendSequenceKeybinding('\u0015', {
    mac: { primary: 2048  | 1  }
});
registerSendSequenceKeybinding(String.fromCharCode('A'.charCodeAt(0) - 64), {
    mac: { primary: 2048  | 15  }
});
registerSendSequenceKeybinding(String.fromCharCode('E'.charCodeAt(0) - 64), {
    mac: { primary: 2048  | 17  }
});
registerSendSequenceKeybinding('\u0000', {
    primary: 2048  | 1024  | 23 ,
    mac: { primary: 256  | 1024  | 23  }
});
registerSendSequenceKeybinding('\u001e', {
    primary: 2048  | 1024  | 27 ,
    mac: { primary: 256  | 1024  | 27  }
});
registerSendSequenceKeybinding('\u001f', {
    primary: 2048  | 90 ,
    mac: { primary: 256  | 90  }
});
setupTerminalCommands();
setupTerminalMenus();
registerColors();
