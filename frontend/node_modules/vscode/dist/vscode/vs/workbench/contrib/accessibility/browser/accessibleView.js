import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { isMacintosh } from 'monaco-editor/esm/vs/base/common/platform.js';
import { Disposable, DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { URI } from 'monaco-editor/esm/vs/base/common/uri.js';
import { EditorExtensionsRegistry } from 'monaco-editor/esm/vs/editor/browser/editorExtensions.js';
import { CodeEditorWidget } from 'monaco-editor/esm/vs/editor/browser/widget/codeEditorWidget.js';
import { IModelService } from 'monaco-editor/esm/vs/editor/common/services/model.js';
import { AccessibilityHelpNLS } from 'monaco-editor/esm/vs/editor/common/standaloneStrings.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { IAccessibilityService } from 'monaco-editor/esm/vs/platform/accessibility/common/accessibility.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { IContextViewService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';
import { createDecorator, IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { IOpenerService } from 'monaco-editor/esm/vs/platform/opener/common/opener.js';
import { alert } from 'monaco-editor/esm/vs/base/browser/ui/aria/aria.js';
import { getSimpleEditorOptions } from '../../codeEditor/browser/simpleEditorOptions.js';
import { CodeActionController } from 'monaco-editor/esm/vs/editor/contrib/codeAction/browser/codeActionController.js';
import { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';
import { AccessibleViewAction, accessibilityHelpIsShown, accessibleViewIsShown, AccessibleViewNextAction, AccessibleViewPreviousAction } from './accessibilityContribution.js';
const IAccessibleViewService = ( createDecorator('accessibleViewService'));
let AccessibleView = class AccessibleView extends Disposable {
    get editorWidget() { return this._editorWidget; }
    constructor(_openerService, _instantiationService, _configurationService, _modelService, _contextViewService, _contextKeyService, _accessibilityService, _keybindingService) {
        super();
        this._openerService = _openerService;
        this._instantiationService = _instantiationService;
        this._configurationService = _configurationService;
        this._modelService = _modelService;
        this._contextViewService = _contextViewService;
        this._contextKeyService = _contextKeyService;
        this._accessibilityService = _accessibilityService;
        this._keybindingService = _keybindingService;
        this._accessiblityHelpIsShown = accessibilityHelpIsShown.bindTo(this._contextKeyService);
        this._accessibleViewIsShown = accessibleViewIsShown.bindTo(this._contextKeyService);
        this._editorContainer = document.createElement('div');
        this._editorContainer.classList.add('accessible-view');
        const codeEditorWidgetOptions = {
            contributions: EditorExtensionsRegistry.getEditorContributions().filter(c => c.id !== CodeActionController.ID)
        };
        const editorOptions = {
            ...getSimpleEditorOptions(this._configurationService),
            lineDecorationsWidth: 6,
            dragAndDrop: true,
            cursorWidth: 1,
            wrappingStrategy: 'advanced',
            wrappingIndent: 'none',
            padding: { top: 2, bottom: 2 },
            quickSuggestions: false,
            renderWhitespace: 'none',
            dropIntoEditor: { enabled: true },
            readOnly: true,
            fontFamily: 'var(--monaco-monospace-font)'
        };
        this._editorWidget = this._register(this._instantiationService.createInstance(CodeEditorWidget, this._editorContainer, editorOptions, codeEditorWidgetOptions));
        this._register(this._accessibilityService.onDidChangeScreenReaderOptimized(() => {
            if (this._currentProvider && this._accessiblityHelpIsShown.get()) {
                this.show(this._currentProvider);
            }
        }));
        this._register(this._configurationService.onDidChangeConfiguration(e => {
            if (this._currentProvider && this._accessiblityHelpIsShown.get() && e.affectsConfiguration(`accessibility.verbosity.${this._currentProvider.verbositySettingKey}`)) {
                this.show(this._currentProvider);
            }
        }));
    }
    show(provider) {
        const delegate = {
            getAnchor: () => { return { x: (window.innerWidth / 2) - (800  / 2), y: 3  }; },
            render: (container) => {
                container.classList.add('accessible-view-container');
                return this._render(provider, container);
            },
            onHide: () => {
                if (provider.options.type === "help" ) {
                    this._accessiblityHelpIsShown.reset();
                }
                else {
                    this._accessibleViewIsShown.reset();
                }
                this._currentProvider = undefined;
            }
        };
        this._contextViewService.showContextView(delegate);
        if (provider.options.type === "help" ) {
            this._accessiblityHelpIsShown.set(true);
        }
        else {
            this._accessibleViewIsShown.set(true);
        }
        this._currentProvider = provider;
    }
    previous() {
        if (!this._currentProvider) {
            return;
        }
        this._currentProvider.previous?.();
    }
    next() {
        if (!this._currentProvider) {
            return;
        }
        this._currentProvider.next?.();
    }
    _render(provider, container) {
        this._currentProvider = provider;
        const settingKey = `accessibility.verbosity.${provider.verbositySettingKey}`;
        const value = this._configurationService.getValue(settingKey);
        const readMoreLink = provider.options.readMoreUrl ? ( localize(
            "openDoc",
            "\nPress H now to open a browser window with more information related to accessibility.\n"
        )) : '';
        const disableHelpHint = provider.options.type === "help"  && !!value ? ( localize(
            'disable-help-hint',
            '\nTo disable the `accessibility.verbosity` hint for this feature, press D now.\n'
        )) : '\n';
        const accessibilitySupport = this._accessibilityService.isScreenReaderOptimized();
        let message = '';
        if (provider.options.type === "help" ) {
            const turnOnMessage = (isMacintosh
                ? AccessibilityHelpNLS.changeConfigToOnMac
                : AccessibilityHelpNLS.changeConfigToOnWinLinux);
            if (accessibilitySupport && provider.verbositySettingKey === "accessibility.verbosity.editor" ) {
                message = AccessibilityHelpNLS.auto_on;
                message += '\n';
            }
            else if (!accessibilitySupport) {
                message = AccessibilityHelpNLS.auto_off + '\n' + turnOnMessage;
                message += '\n';
            }
        }
        const fragment = message + provider.provideContent() + readMoreLink + disableHelpHint + ( localize('exit-tip', 'Exit this dialog via the Escape key.'));
        this._getTextModel(( URI.from(
            { path: `accessible-view-${provider.verbositySettingKey}`, scheme: 'accessible-view', fragment }
        ))).then((model) => {
            if (!model) {
                return;
            }
            this._editorWidget.setModel(model);
            const domNode = this._editorWidget.getDomNode();
            if (!domNode) {
                return;
            }
            model.setLanguage(provider.options.language ?? 'markdown');
            container.appendChild(this._editorContainer);
            this._editorWidget.updateOptions({ ariaLabel: provider.next && provider.previous ? ( localize(
                'accessibleViewAriaLabelWithNav',
                "{0} {1}",
                provider.options.ariaLabel,
                this._getNavigationAriaHint(provider.verbositySettingKey)
            )) : ( localize('accessibleViewAriaLabel', "{0}", provider.options.ariaLabel)) });
            this._editorWidget.focus();
        });
        const disposableStore = ( new DisposableStore());
        disposableStore.add(this._editorWidget.onKeyUp((e) => {
            if (e.keyCode === 34  && this._configurationService.getValue(settingKey)) {
                alert(( localize(
                    'disableAccessibilityHelp',
                    '{0} accessibility verbosity is now disabled',
                    provider.verbositySettingKey
                )));
                this._configurationService.updateValue(settingKey, false);
            }
            provider.onKeyDown?.(e);
        }));
        disposableStore.add(this._editorWidget.onKeyDown((e) => {
            if (e.keyCode === 9 ) {
                e.stopPropagation();
                this._contextViewService.hideContextView();
                setTimeout(() => provider.onClose(), 100);
            }
            else if (e.keyCode === 38  && provider.options.readMoreUrl) {
                const url = provider.options.readMoreUrl;
                alert(AccessibilityHelpNLS.openingDocs);
                this._openerService.open(( URI.parse(url)));
                e.preventDefault();
                e.stopPropagation();
            }
        }));
        disposableStore.add(this._editorWidget.onDidBlurEditorText(() => this._contextViewService.hideContextView()));
        disposableStore.add(this._editorWidget.onDidContentSizeChange(() => this._layout()));
        return disposableStore;
    }
    _layout() {
        this._editorWidget.layout({ width: 800 , height: this._editorWidget.getContentHeight() });
    }
    async _getTextModel(resource) {
        const existing = this._modelService.getModel(resource);
        if (existing && !existing.isDisposed()) {
            return existing;
        }
        return this._modelService.createModel(resource.fragment, null, resource, false);
    }
    _getNavigationAriaHint(verbositySettingKey) {
        let hint = '';
        const nextKeybinding = this._keybindingService.lookupKeybinding(AccessibleViewNextAction.id)?.getAriaLabel();
        const previousKeybinding = this._keybindingService.lookupKeybinding(AccessibleViewPreviousAction.id)?.getAriaLabel();
        if (this._configurationService.getValue(verbositySettingKey)) {
            hint = (nextKeybinding && previousKeybinding) ? ( localize(
                'chatAccessibleViewNextPreviousHint',
                "Show the next {0} or previous {1} item in the accessible view",
                nextKeybinding,
                previousKeybinding
            )) : ( localize(
                'chatAccessibleViewNextPreviousHintNoKb',
                "Show the next or previous item in the accessible view by configuring keybindings for Show Next / Previous in Accessible View"
            ));
        }
        return hint;
    }
};
AccessibleView = ( __decorate([
    ( __param(0, IOpenerService)),
    ( __param(1, IInstantiationService)),
    ( __param(2, IConfigurationService)),
    ( __param(3, IModelService)),
    ( __param(4, IContextViewService)),
    ( __param(5, IContextKeyService)),
    ( __param(6, IAccessibilityService)),
    ( __param(7, IKeybindingService))
], AccessibleView));
let AccessibleViewService = class AccessibleViewService extends Disposable {
    constructor(_instantiationService, _configurationService, _keybindingService) {
        super();
        this._instantiationService = _instantiationService;
        this._configurationService = _configurationService;
        this._keybindingService = _keybindingService;
    }
    show(provider) {
        if (!this._accessibleView) {
            this._accessibleView = this._register(this._instantiationService.createInstance(AccessibleView));
        }
        this._accessibleView.show(provider);
    }
    next() {
        this._accessibleView?.next();
    }
    previous() {
        this._accessibleView?.previous();
    }
    getOpenAriaHint(verbositySettingKey) {
        if (!this._configurationService.getValue(verbositySettingKey)) {
            return null;
        }
        const keybinding = this._keybindingService.lookupKeybinding(AccessibleViewAction.id)?.getAriaLabel();
        return keybinding ? ( localize(
            'chatAccessibleViewHint',
            "Inspect this in the accessible view with {0}",
            keybinding
        )) : ( localize(
            'chatAccessibleViewHintNoKb',
            "Inspect this in the accessible view via the command Open Accessible View which is currently not triggerable via keybinding"
        ));
    }
};
AccessibleViewService = ( __decorate([
    ( __param(0, IInstantiationService)),
    ( __param(1, IConfigurationService)),
    ( __param(2, IKeybindingService))
], AccessibleViewService));
export { AccessibleViewService, IAccessibleViewService };
