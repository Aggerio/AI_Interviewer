import { localize } from 'monaco-editor/esm/vs/nls.js';
import { Extensions } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { MultiCommand } from 'monaco-editor/esm/vs/editor/browser/editorExtensions.js';
import { MenuId } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { RawContextKey } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
const accessibilityHelpIsShown = ( new RawContextKey('accessibilityHelpIsShown', false, true));
const accessibleViewIsShown = ( new RawContextKey('accessibleViewIsShown', false, true));
const baseProperty = {
    type: 'boolean',
    default: true,
    tags: ['accessibility']
};
const configuration = {
    id: 'accessibility',
    title: ( localize('accessibilityConfigurationTitle', "Accessibility")),
    type: 'object',
    properties: {
        ["accessibility.verbosity.terminal" ]: {
            description: ( localize(
                'verbosity.terminal.description',
                'Provide information about how to access the terminal accessibility help menu when the terminal is focused'
            )),
            ...baseProperty
        },
        ["accessibility.verbosity.diffEditor" ]: {
            description: ( localize(
                'verbosity.diffEditor.description',
                'Provide information about how to navigate changes in the diff editor when it is focused'
            )),
            ...baseProperty
        },
        ["accessibility.verbosity.panelChat" ]: {
            description: ( localize(
                'verbosity.chat.description',
                'Provide information about how to access the chat help menu when the chat input is focused'
            )),
            ...baseProperty
        },
        ["accessibility.verbosity.inlineChat" ]: {
            description: ( localize(
                'verbosity.interactiveEditor.description',
                'Provide information about how to access the inline editor chat accessibility help menu and alert with hints which describe how to use the feature when the input is focused'
            )),
            ...baseProperty
        },
        ["accessibility.verbosity.keybindingsEditor" ]: {
            description: ( localize(
                'verbosity.keybindingsEditor.description',
                'Provide information about how to change a keybinding in the keybindings editor when a row is focused'
            )),
            ...baseProperty
        },
        ["accessibility.verbosity.notebook" ]: {
            description: ( localize(
                'verbosity.notebook',
                'Provide information about how to focus the cell container or inner editor when a notebook cell is focused.'
            )),
            ...baseProperty
        },
        ["accessibility.verbosity.hover" ]: {
            description: ( localize(
                'verbosity.hover',
                'Provide information about how to open the hover in an accessible view.'
            )),
            ...baseProperty
        },
        ["accessibility.verbosity.notification" ]: {
            description: ( localize(
                'verbosity.notification',
                'Provide information about how to open the notification in an accessible view.'
            )),
            ...baseProperty
        }
    }
};
function registerAccessibilityConfiguration() {
    const configurationRegistry = ( Registry.as(Extensions.Configuration));
    configurationRegistry.registerConfiguration(configuration);
}
function registerCommand(command) {
    command.register();
    return command;
}
const AccessibilityHelpAction = registerCommand(( new MultiCommand({
    id: 'editor.action.accessibilityHelp',
    precondition: undefined,
    kbOpts: {
        primary: 512  | 59 ,
        weight: 200 ,
        linux: {
            primary: 512  | 1024  | 59 ,
            secondary: [512  | 59 ]
        }
    },
    menuOpts: [{
            menuId: MenuId.CommandPalette,
            group: '',
            title: ( localize('editor.action.accessibilityHelp', "Open Accessibility Help")),
            order: 1
        }],
})));
const AccessibleViewAction = registerCommand(( new MultiCommand({
    id: 'editor.action.accessibleView',
    precondition: undefined,
    kbOpts: {
        primary: 512  | 60 ,
        weight: 200 ,
        linux: {
            primary: 512  | 1024  | 60 ,
            secondary: [512  | 60 ]
        }
    },
    menuOpts: [{
            menuId: MenuId.CommandPalette,
            group: '',
            title: ( localize('editor.action.accessibleView', "Open Accessible View")),
            order: 1
        }],
})));
const AccessibleViewNextAction = registerCommand(( new MultiCommand({
    id: 'editor.action.accessibleViewNext',
    precondition: accessibleViewIsShown,
    kbOpts: {
        primary: 512  | 94 ,
        weight: 200
    },
    menuOpts: [{
            menuId: MenuId.CommandPalette,
            group: '',
            title: ( localize('editor.action.accessibleViewNext', "Show Next in Accessible View")),
            order: 1
        }],
})));
const AccessibleViewPreviousAction = registerCommand(( new MultiCommand({
    id: 'editor.action.accessibleViewPrevious',
    precondition: accessibleViewIsShown,
    kbOpts: {
        primary: 512  | 92 ,
        weight: 200
    },
    menuOpts: [{
            menuId: MenuId.CommandPalette,
            group: '',
            title: ( localize('editor.action.accessibleViewPrevious', "Show Previous in Accessible View")),
            order: 1
        }],
})));
export { AccessibilityHelpAction, AccessibleViewAction, AccessibleViewNextAction, AccessibleViewPreviousAction, accessibilityHelpIsShown, accessibleViewIsShown, registerAccessibilityConfiguration };
