import { __decorate, __param } from '../../../../../../node_modules/tslib/tslib.es6.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { isMacintosh } from 'monaco-editor/esm/vs/base/common/platform.js';
import { Action2, registerAction2, MenuRegistry, MenuId } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { RawContextKey, IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { Extensions } from '../../../common/contributions.js';
class ToggleMultiCursorModifierAction extends Action2 {
    static { this.ID = 'workbench.action.toggleMultiCursorModifier'; }
    static { this.multiCursorModifierConfigurationKey = 'editor.multiCursorModifier'; }
    constructor() {
        super({
            id: ToggleMultiCursorModifierAction.ID,
            title: { value: ( localize('toggleLocation', "Toggle Multi-Cursor Modifier")), original: 'Toggle Multi-Cursor Modifier' },
            f1: true
        });
    }
    run(accessor) {
        const configurationService = accessor.get(IConfigurationService);
        const editorConf = configurationService.getValue('editor');
        const newValue = (editorConf.multiCursorModifier === 'ctrlCmd' ? 'alt' : 'ctrlCmd');
        return configurationService.updateValue(ToggleMultiCursorModifierAction.multiCursorModifierConfigurationKey, newValue);
    }
}
const multiCursorModifier = ( new RawContextKey('multiCursorModifier', 'altKey'));
let MultiCursorModifierContextKeyController = class MultiCursorModifierContextKeyController {
    constructor(configurationService, contextKeyService) {
        this.configurationService = configurationService;
        this._multiCursorModifier = multiCursorModifier.bindTo(contextKeyService);
        this._update();
        configurationService.onDidChangeConfiguration((e) => {
            if (e.affectsConfiguration('editor.multiCursorModifier')) {
                this._update();
            }
        });
    }
    _update() {
        const editorConf = this.configurationService.getValue('editor');
        const value = (editorConf.multiCursorModifier === 'ctrlCmd' ? 'ctrlCmd' : 'altKey');
        this._multiCursorModifier.set(value);
    }
};
MultiCursorModifierContextKeyController = ( __decorate([
    ( __param(0, IConfigurationService)),
    ( __param(1, IContextKeyService))
], MultiCursorModifierContextKeyController));
( Registry.as(Extensions.Workbench)).registerWorkbenchContribution(MultiCursorModifierContextKeyController, 3 );
registerAction2(ToggleMultiCursorModifierAction);
MenuRegistry.appendMenuItem(MenuId.MenubarSelectionMenu, {
    group: '4_config',
    command: {
        id: ToggleMultiCursorModifierAction.ID,
        title: ( localize('miMultiCursorAlt', "Switch to Alt+Click for Multi-Cursor"))
    },
    when: ( multiCursorModifier.isEqualTo('ctrlCmd')),
    order: 1
});
MenuRegistry.appendMenuItem(MenuId.MenubarSelectionMenu, {
    group: '4_config',
    command: {
        id: ToggleMultiCursorModifierAction.ID,
        title: (isMacintosh
            ? ( localize('miMultiCursorCmd', "Switch to Cmd+Click for Multi-Cursor"))
            : ( localize('miMultiCursorCtrl', "Switch to Ctrl+Click for Multi-Cursor")))
    },
    when: ( multiCursorModifier.isEqualTo('altKey')),
    order: 1
});
export { ToggleMultiCursorModifierAction };
