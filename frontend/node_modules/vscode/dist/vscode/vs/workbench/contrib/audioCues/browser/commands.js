import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';
import { ThemeIcon } from 'monaco-editor/esm/vs/base/common/themables.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { IAccessibilityService } from 'monaco-editor/esm/vs/platform/accessibility/common/accessibility.js';
import { Action2 } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { IAudioCueService, AudioCue } from 'monaco-editor/esm/vs/platform/audioCues/browser/audioCueService.js';
import { IQuickInputService } from 'monaco-editor/esm/vs/platform/quickinput/common/quickInput.js';
import { IPreferencesService } from '../../../services/preferences/common/preferences.js';
class ShowAudioCueHelp extends Action2 {
    static { this.ID = 'audioCues.help'; }
    constructor() {
        super({
            id: ShowAudioCueHelp.ID,
            title: {
                value: ( (localize('audioCues.help', "Help: List Audio Cues"))),
                original: 'Help: List Audio Cues'
            },
            f1: true,
        });
    }
    async run(accessor) {
        const audioCueService = accessor.get(IAudioCueService);
        const quickPickService = accessor.get(IQuickInputService);
        const preferencesService = accessor.get(IPreferencesService);
        const accessibilityService = accessor.get(IAccessibilityService);
        const items = ( (AudioCue.allAudioCues.map((cue, idx) => ({
            label: accessibilityService.isScreenReaderOptimized() ?
                `${cue.name}${audioCueService.isEnabled(cue) ? '' : ' (' + ( ( localize('disabled', "Disabled"))) + ')'}`
                : `${audioCueService.isEnabled(cue) ? '$(check)' : '     '} ${cue.name}`,
            audioCue: cue,
            buttons: [{
                    iconClass: ThemeIcon.asClassName(Codicon.settingsGear),
                    tooltip: ( (localize('audioCues.help.settings', 'Enable/Disable Audio Cue'))),
                }],
        }))));
        const quickPick = quickPickService.pick(items, {
            activeItem: items[0],
            onDidFocus: (item) => {
                audioCueService.playSound(item.audioCue.sound.getSound(true), true);
            },
            onDidTriggerItemButton: (context) => {
                preferencesService.openSettings({ query: context.item.audioCue.settingsKey });
            },
            placeHolder: ( (localize('audioCues.help.placeholder', 'Select an audio cue to play'))),
        });
        await quickPick;
    }
}
export { ShowAudioCueHelp };
