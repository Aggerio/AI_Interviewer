import { __decorate, __param } from '../../../../../node_modules/tslib/tslib.es6.js';
import * as dom from 'monaco-editor/esm/vs/base/browser/dom.js';
import { StandardKeyboardEvent } from 'monaco-editor/esm/vs/base/browser/keyboardEvent.js';
import { BaseActionViewItem } from 'monaco-editor/esm/vs/base/browser/ui/actionbar/actionViewItems.js';
import { DropdownMenuActionViewItem } from 'monaco-editor/esm/vs/base/browser/ui/dropdown/dropdownActionViewItem.js';
import { MenuEntryActionViewItem } from 'monaco-editor/esm/vs/platform/actions/browser/menuEntryActionViewItem.js';
import { IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';
import { INotificationService } from 'monaco-editor/esm/vs/platform/notification/common/notification.js';
import { IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';
import { IAccessibilityService } from 'monaco-editor/esm/vs/platform/accessibility/common/accessibility.js';
let DropdownWithPrimaryActionViewItem = class DropdownWithPrimaryActionViewItem extends BaseActionViewItem {
    get onDidChangeDropdownVisibility() {
        return this._dropdown.onDidChangeVisibility;
    }
    constructor(primaryAction, dropdownAction, dropdownMenuActions, className, _contextMenuProvider, _options, _keybindingService, _notificationService, _contextKeyService, _themeService, _accessibilityService) {
        super(null, primaryAction);
        this._contextMenuProvider = _contextMenuProvider;
        this._options = _options;
        this._container = null;
        this._dropdownContainer = null;
        this._primaryAction = ( new MenuEntryActionViewItem(
            primaryAction,
            undefined,
            _keybindingService,
            _notificationService,
            _contextKeyService,
            _themeService,
            _contextMenuProvider,
            _accessibilityService
        ));
        this._dropdown = ( new DropdownMenuActionViewItem(dropdownAction, dropdownMenuActions, this._contextMenuProvider, {
            menuAsChild: true,
            classNames: className ? ['codicon', 'codicon-chevron-down', className] : ['codicon', 'codicon-chevron-down'],
            keybindingProvider: this._options?.getKeyBinding
        }));
    }
    setActionContext(newContext) {
        super.setActionContext(newContext);
        this._primaryAction.setActionContext(newContext);
        this._dropdown.setActionContext(newContext);
    }
    render(container) {
        this._container = container;
        super.render(this._container);
        this._container.classList.add('monaco-dropdown-with-primary');
        const primaryContainer = dom.$('.action-container');
        this._primaryAction.render(dom.append(this._container, primaryContainer));
        this._dropdownContainer = dom.$('.dropdown-action-container');
        this._dropdown.render(dom.append(this._container, this._dropdownContainer));
        this._register(dom.addDisposableListener(primaryContainer, dom.EventType.KEY_DOWN, (e) => {
            const event = ( new StandardKeyboardEvent(e));
            if (event.equals(17 )) {
                this._primaryAction.element.tabIndex = -1;
                this._dropdown.focus();
                event.stopPropagation();
            }
        }));
        this._register(dom.addDisposableListener(this._dropdownContainer, dom.EventType.KEY_DOWN, (e) => {
            const event = ( new StandardKeyboardEvent(e));
            if (event.equals(15 )) {
                this._primaryAction.element.tabIndex = 0;
                this._dropdown.setFocusable(false);
                this._primaryAction.element?.focus();
                event.stopPropagation();
            }
        }));
    }
    focus(fromRight) {
        if (fromRight) {
            this._dropdown.focus();
        }
        else {
            this._primaryAction.element.tabIndex = 0;
            this._primaryAction.element.focus();
        }
    }
    blur() {
        this._primaryAction.element.tabIndex = -1;
        this._dropdown.blur();
        this._container.blur();
    }
    setFocusable(focusable) {
        if (focusable) {
            this._primaryAction.element.tabIndex = 0;
        }
        else {
            this._primaryAction.element.tabIndex = -1;
            this._dropdown.setFocusable(false);
        }
    }
    update(dropdownAction, dropdownMenuActions, dropdownIcon) {
        this._dropdown.dispose();
        this._dropdown = ( new DropdownMenuActionViewItem(dropdownAction, dropdownMenuActions, this._contextMenuProvider, {
            menuAsChild: true,
            classNames: ['codicon', dropdownIcon || 'codicon-chevron-down']
        }));
        if (this._dropdownContainer) {
            this._dropdown.render(this._dropdownContainer);
        }
    }
    dispose() {
        this._primaryAction.dispose();
        this._dropdown.dispose();
        super.dispose();
    }
};
DropdownWithPrimaryActionViewItem = ( __decorate([
    ( __param(6, IKeybindingService)),
    ( __param(7, INotificationService)),
    ( __param(8, IContextKeyService)),
    ( __param(9, IThemeService)),
    ( __param(10, IAccessibilityService))
], DropdownWithPrimaryActionViewItem));
export { DropdownWithPrimaryActionViewItem };
