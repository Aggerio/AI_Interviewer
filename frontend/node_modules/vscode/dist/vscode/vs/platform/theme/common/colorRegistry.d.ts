import { Color } from '../../../base/common/color.js';

type ColorIdentifier = string;
declare const enum ColorTransformType {
    Darken = 0,
    Lighten = 1,
    Transparent = 2,
    Opaque = 3,
    OneOf = 4,
    LessProminent = 5,
    IfDefinedThenElse = 6
}
type ColorTransform = {
    op: ColorTransformType.Darken;
    value: ColorValue;
    factor: number;
} | {
    op: ColorTransformType.Lighten;
    value: ColorValue;
    factor: number;
} | {
    op: ColorTransformType.Transparent;
    value: ColorValue;
    factor: number;
} | {
    op: ColorTransformType.Opaque;
    value: ColorValue;
    background: ColorValue;
} | {
    op: ColorTransformType.OneOf;
    values: readonly ColorValue[];
} | {
    op: ColorTransformType.LessProminent;
    value: ColorValue;
    background: ColorValue;
    factor: number;
    transparency: number;
} | {
    op: ColorTransformType.IfDefinedThenElse;
    if: ColorIdentifier;
    then: ColorValue;
    else: ColorValue;
};
interface ColorDefaults {
    light: ColorValue | null;
    dark: ColorValue | null;
    hcDark: ColorValue | null;
    hcLight: ColorValue | null;
}
/**
 * A Color Value is either a color literal, a reference to an other color or a derived color
 */
type ColorValue = Color | string | ColorIdentifier | ColorTransform;
declare function registerColor(id: string, defaults: ColorDefaults | null, description: string, needsTransparency?: boolean, deprecationMessage?: string): ColorIdentifier;

export { ColorDefaults, ColorIdentifier, ColorTransform, ColorTransformType, ColorValue, registerColor };
