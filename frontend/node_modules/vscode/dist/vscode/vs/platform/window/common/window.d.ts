import { URI, UriComponents } from '../../../base/common/uri.js';
import { IEditorOptions } from '../../editor/common/editor.js';
import { FileType } from '../../files/common/files.js';

interface IBaseOpenWindowsOptions {
    /**
     * Whether to reuse the window or open a new one.
     */
    readonly forceReuseWindow?: boolean;
    /**
     * The remote authority to use when windows are opened with either
     * - no workspace (empty window)
     * - a workspace that is neither `file://` nor `vscode-remote://`
     * Use 'null' for a local window.
     * If not set, defaults to the remote authority of the current window.
     */
    readonly remoteAuthority?: string | null;
}
interface IOpenWindowOptions extends IBaseOpenWindowsOptions {
    readonly forceNewWindow?: boolean;
    readonly preferNewWindow?: boolean;
    readonly noRecentEntry?: boolean;
    readonly addMode?: boolean;
    readonly diffMode?: boolean;
    readonly mergeMode?: boolean;
    readonly gotoLineMode?: boolean;
    readonly waitMarkerFileURI?: URI;
    readonly forceProfile?: string;
    readonly forceTempProfile?: boolean;
}
interface IOpenEmptyWindowOptions extends IBaseOpenWindowsOptions {
}
type IWindowOpenable = IWorkspaceToOpen | IFolderToOpen | IFileToOpen;
interface IBaseWindowOpenable {
    label?: string;
}
interface IWorkspaceToOpen extends IBaseWindowOpenable {
    readonly workspaceUri: URI;
}
interface IFolderToOpen extends IBaseWindowOpenable {
    readonly folderUri: URI;
}
interface IFileToOpen extends IBaseWindowOpenable {
    readonly fileUri: URI;
}
interface IPath<T = IEditorOptions> extends IPathData<T> {
    /**
     * The file path to open within the instance
     */
    fileUri?: URI;
}
interface IPathData<T = IEditorOptions> {
    /**
     * The file path to open within the instance
     */
    readonly fileUri?: UriComponents;
    /**
     * Optional editor options to apply in the file
     */
    readonly options?: T;
    /**
     * A hint that the file exists. if true, the
     * file exists, if false it does not. with
     * `undefined` the state is unknown.
     */
    readonly exists?: boolean;
    /**
     * A hint about the file type of this path.
     * with `undefined` the type is unknown.
     */
    readonly type?: FileType;
    /**
     * Specifies if the file should be only be opened
     * if it exists.
     */
    readonly openOnlyIfExists?: boolean;
}

export { IBaseOpenWindowsOptions, IBaseWindowOpenable, IFileToOpen, IFolderToOpen, IOpenEmptyWindowOptions, IOpenWindowOptions, IPath, IPathData, IWindowOpenable, IWorkspaceToOpen };
