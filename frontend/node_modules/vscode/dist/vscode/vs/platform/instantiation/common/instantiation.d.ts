import { SyncDescriptor0 } from './descriptors.js';
import { ServiceCollection } from './serviceCollection.js';

type BrandedService = {
    _serviceBrand: undefined;
};
interface IConstructorSignature<T, Args extends any[] = []> {
    new <Services extends BrandedService[]>(...args: [...Args, ...Services]): T;
}
interface ServicesAccessor {
    get<T>(id: ServiceIdentifier<T>): T;
}
/**
 * Given a list of arguments as a tuple, attempt to extract the leading, non-service arguments
 * to their own tuple.
 */
type GetLeadingNonServiceArgs<TArgs extends any[]> = TArgs extends [] ? [] : TArgs extends [...infer TFirst, BrandedService] ? GetLeadingNonServiceArgs<TFirst> : TArgs;
declare const IInstantiationService: ServiceIdentifier<IInstantiationService>;
interface IInstantiationService {
    readonly _serviceBrand: undefined;
    /**
     * Synchronously creates an instance that is denoted by the descriptor
     */
    createInstance<T>(descriptor: SyncDescriptor0<T>): T;
    createInstance<Ctor extends new (...args: any[]) => any, R extends InstanceType<Ctor>>(ctor: Ctor, ...args: GetLeadingNonServiceArgs<ConstructorParameters<Ctor>>): R;
    /**
     * Calls a function with a service accessor.
     */
    invokeFunction<R, TS extends any[] = []>(fn: (accessor: ServicesAccessor, ...args: TS) => R, ...args: TS): R;
    /**
     * Creates a child of this service which inherits all current services
     * and adds/overwrites the given services.
     */
    createChild(services: ServiceCollection): IInstantiationService;
}
/**
 * Identifies a service of type `T`.
 */
interface ServiceIdentifier<T> {
    (...args: any[]): void;
    type: T;
}

export { BrandedService, GetLeadingNonServiceArgs, IConstructorSignature, IInstantiationService, ServiceIdentifier, ServicesAccessor };
