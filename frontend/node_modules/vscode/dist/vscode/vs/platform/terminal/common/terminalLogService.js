import { __decorate, __param } from '../../../../../node_modules/tslib/tslib.es6.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { Event } from 'monaco-editor/esm/vs/base/common/event.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { LogLevel, ILoggerService } from 'monaco-editor/esm/vs/platform/log/common/log.js';
import { IWorkspaceContextService } from 'monaco-editor/esm/vs/platform/workspace/common/workspace.js';
let TerminalLogService = class TerminalLogService extends Disposable {
    get onDidChangeLogLevel() { return this._logger.onDidChangeLogLevel; }
    constructor(_loggerService, workspaceContextService) {
        super();
        this._loggerService = _loggerService;
        this._logger = this._loggerService.createLogger('terminal', { name: ( localize('terminalLoggerName', 'Terminal')) });
        this._register(Event.runAndSubscribe(workspaceContextService.onDidChangeWorkspaceFolders, () => {
            this._workspaceId = workspaceContextService.getWorkspace().id.substring(0, 7);
        }));
    }
    getLevel() { return this._logger.getLevel(); }
    setLevel(level) { this._logger.setLevel(level); }
    flush() { this._logger.flush(); }
    trace(message, ...args) { this._logger.trace(this._formatMessage(message), args); }
    debug(message, ...args) { this._logger.debug(this._formatMessage(message), args); }
    info(message, ...args) { this._logger.info(this._formatMessage(message), args); }
    warn(message, ...args) { this._logger.warn(this._formatMessage(message), args); }
    error(message, ...args) {
        if (message instanceof Error) {
            this._logger.error(this._formatMessage(''), message, args);
            return;
        }
        this._logger.error(this._formatMessage(message), args);
    }
    _formatMessage(message) {
        if (this._logger.getLevel() === LogLevel.Trace) {
            return `[${this._workspaceId}] ${message}`;
        }
        return message;
    }
};
TerminalLogService = ( __decorate([
    ( __param(0, ILoggerService)),
    ( __param(1, IWorkspaceContextService))
], TerminalLogService));
export { TerminalLogService };
