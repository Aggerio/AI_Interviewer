import { IDisposable } from '../../../../base/common/lifecycle.js';

interface IEvent<T, U = void> {
    (listener: (arg1: T, arg2: U) => any): IDisposable;
}
interface IMarker extends IDisposable {
    /**
     * A unique identifier for this marker.
     */
    readonly id: number;
    /**
     * Whether this marker is disposed.
     */
    readonly isDisposed: boolean;
    /**
     * The actual line index in the buffer at this point in time. This is set to
     * -1 if the marker has been disposed.
     */
    readonly line: number;
    /**
     * Event listener to get notified when the marker gets disposed. Automatic disposal
     * might happen for a marker, that got invalidated by scrolling out or removal of
     * a line from the buffer.
     */
    onDispose: IEvent<void>;
}
interface IBaseTerminalCommand {
    command: string;
    isTrusted: boolean;
    timestamp: number;
    cwd: string | undefined;
    exitCode: number | undefined;
    commandStartLineContent: string | undefined;
    markProperties: IMarkProperties | undefined;
}
interface ISerializedTerminalCommand extends IBaseTerminalCommand {
    startLine: number | undefined;
    startX: number | undefined;
    endLine: number | undefined;
    executedLine: number | undefined;
}
interface IMarkProperties {
    hoverMessage?: string;
    disableCommandStorage?: boolean;
    hidden?: boolean;
    marker?: IMarker;
    id?: string;
}
interface ISerializedCommandDetectionCapability {
    isWindowsPty: boolean;
    commands: ISerializedTerminalCommand[];
}

export { IMarkProperties, IMarker, ISerializedCommandDetectionCapability, ISerializedTerminalCommand };
