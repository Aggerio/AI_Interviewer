import { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
class TerminalCapabilityStore extends Disposable {
    constructor() {
        super(...arguments);
        this._map = ( new Map());
        this._onDidRemoveCapability = this._register(( new Emitter()));
        this.onDidRemoveCapability = this._onDidRemoveCapability.event;
        this._onDidAddCapability = this._register(( new Emitter()));
        this.onDidAddCapability = this._onDidAddCapability.event;
    }
    get items() {
        return ( this._map.keys());
    }
    add(capability, impl) {
        this._map.set(capability, impl);
        this._onDidAddCapability.fire(capability);
    }
    get(capability) {
        return this._map.get(capability);
    }
    remove(capability) {
        if (!( this._map.has(capability))) {
            return;
        }
        this._map.delete(capability);
        this._onDidRemoveCapability.fire(capability);
    }
    has(capability) {
        return ( this._map.has(capability));
    }
}
class TerminalCapabilityStoreMultiplexer extends Disposable {
    constructor() {
        super(...arguments);
        this._stores = [];
        this._onDidRemoveCapability = this._register(( new Emitter()));
        this.onDidRemoveCapability = this._onDidRemoveCapability.event;
        this._onDidAddCapability = this._register(( new Emitter()));
        this.onDidAddCapability = this._onDidAddCapability.event;
    }
    get items() {
        return this._items();
    }
    *_items() {
        for (const store of this._stores) {
            for (const c of store.items) {
                yield c;
            }
        }
    }
    has(capability) {
        for (const store of this._stores) {
            for (const c of store.items) {
                if (c === capability) {
                    return true;
                }
            }
        }
        return false;
    }
    get(capability) {
        for (const store of this._stores) {
            const c = store.get(capability);
            if (c) {
                return c;
            }
        }
        return undefined;
    }
    add(store) {
        this._stores.push(store);
        for (const capability of store.items) {
            this._onDidAddCapability.fire(capability);
        }
        store.onDidAddCapability(e => this._onDidAddCapability.fire(e));
        store.onDidRemoveCapability(e => this._onDidRemoveCapability.fire(e));
    }
}
export { TerminalCapabilityStore, TerminalCapabilityStoreMultiplexer };
