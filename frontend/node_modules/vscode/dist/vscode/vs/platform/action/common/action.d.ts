import { URI } from '../../../base/common/uri.js';
import { ContextKeyExpression } from '../../contextkey/common/contextkey.js';
import { ThemeIcon } from '../../../base/common/themables.js';
import { Categories } from './actionCommonCategories.js';

interface ILocalizedString {
    /**
     * The localized value of the string.
     */
    value: string;
    /**
     * The original (non localized value of the string)
     */
    original: string;
}
interface ICommandActionTitle extends ILocalizedString {
    /**
     * The title with a mnemonic designation. && precedes the mnemonic.
     */
    mnemonicTitle?: string;
}
type Icon = {
    dark?: URI;
    light?: URI;
} | ThemeIcon;
interface ICommandActionToggleInfo {
    /**
     * The condition that marks the action as toggled.
     */
    condition: ContextKeyExpression;
    icon?: Icon;
    tooltip?: string;
    /**
     * The title that goes well with a a check mark, e.g "(check) Line Numbers" vs "Toggle Line Numbers"
     */
    title?: string;
    /**
     * Like title but with a mnemonic designation.
     */
    mnemonicTitle?: string;
}
interface ICommandActionSource {
    readonly id: string;
    readonly title: string;
}
interface ICommandAction {
    id: string;
    title: string | ICommandActionTitle;
    shortTitle?: string | ICommandActionTitle;
    category?: keyof typeof Categories | ILocalizedString | string;
    tooltip?: string | ILocalizedString;
    icon?: Icon;
    source?: ICommandActionSource;
    precondition?: ContextKeyExpression;
    /**
     * The action is a toggle action. Define the context key expression that reflects its toggle-state
     * or define toggle-info including an icon and a title that goes well with a checkmark.
     */
    toggled?: ContextKeyExpression | ICommandActionToggleInfo;
}

export { ICommandAction, ICommandActionSource, ICommandActionTitle, ICommandActionToggleInfo, ILocalizedString, Icon };
