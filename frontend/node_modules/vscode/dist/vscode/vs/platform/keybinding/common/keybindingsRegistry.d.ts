import { Keybinding } from '../../../base/common/keybindings.js';
import { ICommandHandler, ICommandHandlerDescription } from '../../commands/common/commands.js';
import { ContextKeyExpression } from '../../contextkey/common/contextkey.js';
import { IDisposable } from '../../../base/common/lifecycle.js';

interface IKeybindingItem {
    keybinding: Keybinding | null;
    command: string | null;
    commandArgs?: any;
    when: ContextKeyExpression | null | undefined;
    weight1: number;
    weight2: number;
    extensionId: string | null;
    isBuiltinExtension: boolean;
}
interface IKeybindings {
    primary?: number;
    secondary?: number[];
    win?: {
        primary: number;
        secondary?: number[];
    };
    linux?: {
        primary: number;
        secondary?: number[];
    };
    mac?: {
        primary: number;
        secondary?: number[];
    };
}
interface IKeybindingRule extends IKeybindings {
    id: string;
    weight: number;
    args?: any;
    when?: ContextKeyExpression | null | undefined;
}
interface IExtensionKeybindingRule {
    keybinding: Keybinding | null;
    id: string;
    args?: any;
    weight: number;
    when: ContextKeyExpression | undefined;
    extensionId?: string;
    isBuiltinExtension?: boolean;
}
interface ICommandAndKeybindingRule extends IKeybindingRule {
    handler: ICommandHandler;
    description?: ICommandHandlerDescription | null;
}
interface IKeybindingsRegistry {
    registerKeybindingRule(rule: IKeybindingRule): IDisposable;
    setExtensionKeybindings(rules: IExtensionKeybindingRule[]): void;
    registerCommandAndKeybindingRule(desc: ICommandAndKeybindingRule): IDisposable;
    getDefaultKeybindings(): IKeybindingItem[];
}
declare const KeybindingsRegistry: IKeybindingsRegistry;

export { ICommandAndKeybindingRule, IExtensionKeybindingRule, IKeybindingItem, IKeybindingRule, IKeybindings, IKeybindingsRegistry, KeybindingsRegistry };
