import { ServiceIdentifier, ServicesAccessor } from '../../instantiation/common/instantiation.js';
import { Event } from '../../../base/common/event.js';
import { IJSONSchema } from '../../../base/common/jsonSchema.js';
import { IDisposable } from '../../../base/common/lifecycle.js';
import { TypeConstraint } from '../../../base/common/types.js';

interface ICommandEvent {
    commandId: string;
    args: any[];
}

declare const ICommandService: ServiceIdentifier<ICommandService>;
interface ICommandService {
    readonly _serviceBrand: undefined;
    onWillExecuteCommand: Event<ICommandEvent>;
    onDidExecuteCommand: Event<ICommandEvent>;
    executeCommand<T = any>(commandId: string, ...args: any[]): Promise<T | undefined>;
}
type ICommandsMap = Map<string, ICommand>;
interface ICommandHandler {
    (accessor: ServicesAccessor, ...args: any[]): void;
}
interface ICommand {
    id: string;
    handler: ICommandHandler;
    description?: ICommandHandlerDescription | null;
}
interface ICommandHandlerDescription {
    readonly description: string;
    readonly args: ReadonlyArray<{
        readonly name: string;
        readonly isOptional?: boolean;
        readonly description?: string;
        readonly constraint?: TypeConstraint;
        readonly schema?: IJSONSchema;
    }>;
    readonly returns?: string;
}
interface ICommandRegistry {
    onDidRegisterCommand: Event<string>;
    registerCommand(id: string, command: ICommandHandler): IDisposable;
    registerCommand(command: ICommand): IDisposable;
    registerCommandAlias(oldId: string, newId: string): IDisposable;
    getCommand(id: string): ICommand | undefined;
    getCommands(): ICommandsMap;
}
declare const CommandsRegistry: ICommandRegistry;

export { CommandsRegistry, ICommand, ICommandEvent, ICommandHandler, ICommandHandlerDescription, ICommandRegistry, ICommandService, ICommandsMap };
