interface IProgressIndicator {
    /**
     * Show progress customized with the provided flags.
     */
    show(infinite: true, delay?: number): IProgressRunner;
    show(total: number, delay?: number): IProgressRunner;
    /**
     * Indicate progress for the duration of the provided promise. Progress will stop in
     * any case of promise completion, error or cancellation.
     */
    showWhile(promise: Promise<unknown>, delay?: number): Promise<void>;
}
declare const enum ProgressLocation {
    Explorer = 1,
    Scm = 3,
    Extensions = 5,
    Window = 10,
    Notification = 15,
    Dialog = 20
}
interface IProgressStep {
    message?: string;
    increment?: number;
    total?: number;
}
interface IProgressRunner {
    total(value: number): void;
    worked(value: number): void;
    done(): void;
}
interface IProgress<T> {
    report(item: T): void;
}

export { IProgress, IProgressIndicator, IProgressRunner, IProgressStep, ProgressLocation };
