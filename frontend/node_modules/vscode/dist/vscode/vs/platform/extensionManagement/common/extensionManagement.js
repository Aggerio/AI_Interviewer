import { createDecorator } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
const EXTENSION_IDENTIFIER_PATTERN = '^([a-z0-9A-Z][a-z0-9-A-Z]*)\\.([a-z0-9A-Z][a-z0-9-A-Z]*)$';
function TargetPlatformToString(targetPlatform) {
    switch (targetPlatform) {
        case "win32-x64" : return 'Windows 64 bit';
        case "win32-ia32" : return 'Windows 32 bit';
        case "win32-arm64" : return 'Windows ARM';
        case "linux-x64" : return 'Linux 64 bit';
        case "linux-arm64" : return 'Linux ARM 64';
        case "linux-armhf" : return 'Linux ARM';
        case "alpine-x64" : return 'Alpine Linux 64 bit';
        case "alpine-arm64" : return 'Alpine ARM 64';
        case "darwin-x64" : return 'Mac';
        case "darwin-arm64" : return 'Mac Silicon';
        case "web" : return 'Web';
        case "universal" : return "universal" ;
        case "unknown" : return "unknown" ;
        case "undefined" : return "undefined" ;
    }
}
const IExtensionGalleryService = ( createDecorator('extensionGalleryService'));
var ExtensionManagementErrorCode;
( (function(ExtensionManagementErrorCode) {
    ExtensionManagementErrorCode["Unsupported"] = "Unsupported";
    ExtensionManagementErrorCode["Deprecated"] = "Deprecated";
    ExtensionManagementErrorCode["Malicious"] = "Malicious";
    ExtensionManagementErrorCode["Incompatible"] = "Incompatible";
    ExtensionManagementErrorCode["IncompatibleTargetPlatform"] = "IncompatibleTargetPlatform";
    ExtensionManagementErrorCode["ReleaseVersionNotFound"] = "ReleaseVersionNotFound";
    ExtensionManagementErrorCode["Invalid"] = "Invalid";
    ExtensionManagementErrorCode["Download"] = "Download";
    ExtensionManagementErrorCode["Extract"] = "Extract";
    ExtensionManagementErrorCode["Delete"] = "Delete";
    ExtensionManagementErrorCode["Rename"] = "Rename";
    ExtensionManagementErrorCode["CorruptZip"] = "CorruptZip";
    ExtensionManagementErrorCode["IncompleteZip"] = "IncompleteZip";
    ExtensionManagementErrorCode["Signature"] = "Signature";
    ExtensionManagementErrorCode["Internal"] = "Internal";
})(ExtensionManagementErrorCode || (ExtensionManagementErrorCode = {})));
const IExtensionManagementService = ( createDecorator('extensionManagementService'));
export { EXTENSION_IDENTIFIER_PATTERN, ExtensionManagementErrorCode, IExtensionGalleryService, IExtensionManagementService, TargetPlatformToString };
