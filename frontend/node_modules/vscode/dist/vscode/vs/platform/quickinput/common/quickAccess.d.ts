import { IQuickPickItem, IQuickNavigateConfiguration, ItemActivation } from './quickInput.js';

/**
 * Provider specific options for this particular showing of the
 * quick access.
 */
interface IQuickAccessProviderRunOptions {
    readonly from?: string;
}
interface IQuickAccessOptions {
    /**
     * Allows to enable quick navigate support in quick input.
     */
    readonly quickNavigateConfiguration?: IQuickNavigateConfiguration;
    /**
     * Allows to configure a different item activation strategy.
     * By default the first item in the list will get activated.
     */
    readonly itemActivation?: ItemActivation;
    /**
     * Whether to take the input value as is and not restore it
     * from any existing value if quick access is visible.
     */
    readonly preserveValue?: boolean;
    /**
     * Provider specific options for this particular showing of the
     * quick access.
     */
    readonly providerOptions?: IQuickAccessProviderRunOptions;
}
interface IQuickAccessController {
    /**
     * Open the quick access picker with the optional value prefilled.
     */
    show(value?: string, options?: IQuickAccessOptions): void;
    /**
     * Same as `show()` but instead of executing the selected pick item,
     * it will be returned. May return `undefined` in case no item was
     * picked by the user.
     */
    pick(value?: string, options?: IQuickAccessOptions): Promise<IQuickPickItem[] | undefined>;
}

export { IQuickAccessController, IQuickAccessOptions, IQuickAccessProviderRunOptions };
