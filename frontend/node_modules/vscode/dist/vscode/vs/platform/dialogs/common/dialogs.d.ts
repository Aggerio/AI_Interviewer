import { ServiceIdentifier } from '../../instantiation/common/instantiation.js';
import { Event } from '../../../base/common/event.js';
import { ThemeIcon } from '../../../base/common/themables.js';
import { IMarkdownString } from '../../../base/common/htmlContent.js';
import Severity from '../../../base/common/severity.js';

interface IDialogArgs {
    readonly confirmArgs?: IConfirmDialogArgs;
    readonly inputArgs?: IInputDialogArgs;
    readonly promptArgs?: IPromptDialogArgs;
}
interface IBaseDialogOptions {
    readonly type?: Severity | DialogType;
    readonly title?: string;
    readonly message: string;
    readonly detail?: string;
    readonly checkbox?: ICheckbox;
    /**
     * Allows to enforce use of custom dialog even in native environments.
     */
    readonly custom?: boolean | ICustomDialogOptions;
}
interface IConfirmDialogArgs {
    readonly confirmation: IConfirmation;
}
interface IConfirmation extends IBaseDialogOptions {
    /**
     * If not provided, defaults to `Yes`.
     */
    readonly primaryButton?: string;
    /**
     * If not provided, defaults to `Cancel`.
     */
    readonly cancelButton?: string;
}
interface IConfirmationResult extends ICheckboxResult {
    /**
     * Will be true if the dialog was confirmed with the primary button pressed.
     */
    readonly confirmed: boolean;
}
interface IInputDialogArgs {
    readonly input: IInput;
}
interface IInput extends IConfirmation {
    readonly inputs: IInputElement[];
    /**
     * If not provided, defaults to `Ok`.
     */
    readonly primaryButton?: string;
}
interface IInputElement {
    readonly type?: 'text' | 'password';
    readonly value?: string;
    readonly placeholder?: string;
}
interface IInputResult extends IConfirmationResult {
    /**
     * Values for the input fields as provided by the user or `undefined` if none.
     */
    readonly values?: string[];
}
interface IPromptDialogArgs {
    readonly prompt: IPrompt<unknown>;
}
interface IPromptBaseButton<T> {
    /**
     * @returns the result of the prompt button will be returned
     * as result from the `prompt()` call.
     */
    run(checkbox: ICheckboxResult): T | Promise<T>;
}
interface IPromptButton<T> extends IPromptBaseButton<T> {
    readonly label: string;
}
interface IPromptCancelButton<T> extends IPromptBaseButton<T> {
    /**
     * The cancel button to show in the prompt. Defaults to
     * `Cancel` if not provided.
     */
    readonly label?: string;
}
interface IPrompt<T> extends IBaseDialogOptions {
    /**
     * The buttons to show in the prompt. Defaults to `OK`
     * if no buttons or cancel button is provided.
     */
    readonly buttons?: IPromptButton<T>[];
    /**
     * The cancel button to show in the prompt. Defaults to
     * `Cancel` if set to `true`.
     */
    readonly cancelButton?: IPromptCancelButton<T> | true | string;
}
interface IPromptWithCustomCancel<T> extends IPrompt<T> {
    readonly cancelButton: IPromptCancelButton<T>;
}
interface IPromptWithDefaultCancel<T> extends IPrompt<T> {
    readonly cancelButton: true | string;
}
interface IPromptResult<T> extends ICheckboxResult {
    /**
     * The result of the `IPromptButton` that was pressed or `undefined` if none.
     */
    readonly result?: T;
}
interface IPromptResultWithCancel<T> extends IPromptResult<T> {
    readonly result: T;
}
type IDialogResult = IConfirmationResult | IInputResult | IPromptResult<unknown>;
type DialogType = 'none' | 'info' | 'error' | 'question' | 'warning';
interface ICheckbox {
    readonly label: string;
    readonly checked?: boolean;
}
interface ICheckboxResult {
    /**
     * This will only be defined if the confirmation was created
     * with the checkbox option defined.
     */
    readonly checkboxChecked?: boolean;
}
interface ICustomDialogOptions {
    readonly buttonDetails?: string[];
    readonly markdownDetails?: ICustomDialogMarkdown[];
    readonly classes?: string[];
    readonly icon?: ThemeIcon;
    readonly disableCloseAction?: boolean;
}
interface ICustomDialogMarkdown {
    readonly markdown: IMarkdownString;
    readonly classes?: string[];
}
/**
 * A handler to bring up modal dialogs.
 */
interface IDialogHandler {
    /**
     * Ask the user for confirmation with a modal dialog.
     */
    confirm(confirmation: IConfirmation): Promise<IConfirmationResult>;
    /**
     * Prompt the user with a modal dialog.
     */
    prompt<T>(prompt: IPrompt<T>): Promise<IPromptResult<T>>;
    /**
     * Present a modal dialog to the user asking for input.
     */
    input(input: IInput): Promise<IInputResult>;
    /**
     * Present the about dialog to the user.
     */
    about(): Promise<void>;
}
declare const IDialogService: ServiceIdentifier<IDialogService>;
/**
 * A service to bring up modal dialogs.
 *
 * Note: use the `INotificationService.prompt()` method for a non-modal way to ask
 * the user for input.
 */
interface IDialogService {
    readonly _serviceBrand: undefined;
    /**
     * An event that fires when a dialog is about to show.
     */
    onWillShowDialog: Event<void>;
    /**
     * An event that fires when a dialog did show (closed).
     */
    onDidShowDialog: Event<void>;
    /**
     * Ask the user for confirmation with a modal dialog.
     */
    confirm(confirmation: IConfirmation): Promise<IConfirmationResult>;
    /**
     * Prompt the user with a modal dialog. Provides a bit
     * more control over the dialog compared to the simpler
     * `confirm` method. Specifically, allows to show more
     * than 2 buttons and makes it easier to just show a
     * message to the user.
     *
     * @returns a promise that resolves to the `T` result
     * from the provided `IPromptButton<T>` or `undefined`.
     */
    prompt<T>(prompt: IPromptWithCustomCancel<T>): Promise<IPromptResultWithCancel<T>>;
    prompt<T>(prompt: IPromptWithDefaultCancel<T>): Promise<IPromptResult<T>>;
    prompt<T>(prompt: IPrompt<T>): Promise<IPromptResult<T>>;
    /**
     * Present a modal dialog to the user asking for input.
     */
    input(input: IInput): Promise<IInputResult>;
    /**
     * Show a modal info dialog.
     */
    info(message: string, detail?: string): Promise<void>;
    /**
     * Show a modal warning dialog.
     */
    warn(message: string, detail?: string): Promise<void>;
    /**
     * Show a modal error dialog.
     */
    error(message: string, detail?: string): Promise<void>;
    /**
     * Present the about dialog to the user.
     */
    about(): Promise<void>;
}
declare const enum ConfirmResult {
    SAVE = 0,
    DONT_SAVE = 1,
    CANCEL = 2
}

export { ConfirmResult, DialogType, IBaseDialogOptions, ICheckbox, ICheckboxResult, IConfirmDialogArgs, IConfirmation, IConfirmationResult, ICustomDialogMarkdown, ICustomDialogOptions, IDialogArgs, IDialogHandler, IDialogResult, IDialogService, IInput, IInputDialogArgs, IInputElement, IInputResult, IPrompt, IPromptBaseButton, IPromptButton, IPromptCancelButton, IPromptDialogArgs, IPromptResult, IPromptResultWithCancel, IPromptWithCustomCancel, IPromptWithDefaultCancel };
