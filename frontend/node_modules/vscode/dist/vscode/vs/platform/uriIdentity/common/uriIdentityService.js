import { __decorate, __param } from '../../../../../node_modules/tslib/tslib.es6.js';
import { IFileService } from 'monaco-editor/esm/vs/platform/files/common/files.js';
import { ExtUri, normalizePath } from 'monaco-editor/esm/vs/base/common/resources.js';
import { SkipList } from '../../../base/common/skipList.js';
import { Event } from 'monaco-editor/esm/vs/base/common/event.js';
import { DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
class Entry {
    static { this._clock = 0; }
    constructor(uri) {
        this.uri = uri;
        this.time = Entry._clock++;
    }
    touch() {
        this.time = Entry._clock++;
        return this;
    }
}
let UriIdentityService = class UriIdentityService {
    constructor(_fileService) {
        this._fileService = _fileService;
        this._dispooables = ( new DisposableStore());
        this._limit = 2 ** 16;
        const schemeIgnoresPathCasingCache = ( new Map());
        const ignorePathCasing = (uri) => {
            let ignorePathCasing = schemeIgnoresPathCasingCache.get(uri.scheme);
            if (ignorePathCasing === undefined) {
                ignorePathCasing = _fileService.hasProvider(uri) && !this._fileService.hasCapability(uri, 1024 );
                schemeIgnoresPathCasingCache.set(uri.scheme, ignorePathCasing);
            }
            return ignorePathCasing;
        };
        this._dispooables.add(Event.any(_fileService.onDidChangeFileSystemProviderRegistrations, _fileService.onDidChangeFileSystemProviderCapabilities)(e => {
            schemeIgnoresPathCasingCache.delete(e.scheme);
        }));
        this.extUri = ( new ExtUri(ignorePathCasing));
        this._canonicalUris = ( new SkipList((a, b) => this.extUri.compare(a, b, true), this._limit));
    }
    dispose() {
        this._dispooables.dispose();
        this._canonicalUris.clear();
    }
    asCanonicalUri(uri) {
        if (this._fileService.hasProvider(uri)) {
            uri = normalizePath(uri);
        }
        const item = this._canonicalUris.get(uri);
        if (item) {
            return item.touch().uri.with({ fragment: uri.fragment });
        }
        this._canonicalUris.set(uri, ( new Entry(uri)));
        this._checkTrim();
        return uri;
    }
    _checkTrim() {
        if (this._canonicalUris.size < this._limit) {
            return;
        }
        const entries = [...this._canonicalUris.entries()].sort((a, b) => {
            if (a[1].time < b[1].time) {
                return 1;
            }
            else if (a[1].time > b[1].time) {
                return -1;
            }
            else {
                return 0;
            }
        });
        Entry._clock = 0;
        this._canonicalUris.clear();
        const newSize = this._limit * 0.5;
        for (let i = 0; i < newSize; i++) {
            this._canonicalUris.set(entries[i][0], entries[i][1].touch());
        }
    }
};
UriIdentityService = ( __decorate([
    ( __param(0, IFileService))
], UriIdentityService));
export { UriIdentityService };
