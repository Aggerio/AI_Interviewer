import { Event } from '../../../../base/common/event.js';
import { ITextModel, IModelDecorationOptions, IModelDecorationsChangeAccessor } from '../../../common/model.js';
import { FoldingRegions, FoldingRegion, ILineRange, FoldSource } from './foldingRanges.js';

interface IDecorationProvider {
    getDecorationOption(isCollapsed: boolean, isHidden: boolean, isManual: boolean): IModelDecorationOptions;
    changeDecorations<T>(callback: (changeAccessor: IModelDecorationsChangeAccessor) => T): T | null;
    removeDecorations(decorationIds: string[]): void;
}
interface FoldingModelChangeEvent {
    model: FoldingModel;
    collapseStateChanged?: FoldingRegion[];
}
interface ILineMemento extends ILineRange {
    checksum?: number;
    isCollapsed?: boolean;
    source?: FoldSource;
}
type CollapseMemento = ILineMemento[];
declare class FoldingModel {
    private readonly _textModel;
    private readonly _decorationProvider;
    private _regions;
    private _editorDecorationIds;
    private readonly _updateEventEmitter;
    readonly onDidChange: Event<FoldingModelChangeEvent>;
    get regions(): FoldingRegions;
    get textModel(): ITextModel;
    get decorationProvider(): IDecorationProvider;
    constructor(textModel: ITextModel, decorationProvider: IDecorationProvider);
    toggleCollapseState(toggledRegions: FoldingRegion[]): void;
    removeManualRanges(ranges: ILineRange[]): void;
    update(newRegions: FoldingRegions, blockedLineNumers?: number[]): void;
    updatePost(newRegions: FoldingRegions): void;
    private _currentFoldedOrManualRanges;
    /**
     * Collapse state memento, for persistence only
     */
    getMemento(): CollapseMemento | undefined;
    /**
     * Apply persisted state, for persistence only
     */
    applyMemento(state: CollapseMemento): void;
    private _getLinesChecksum;
    dispose(): void;
    getAllRegionsAtLine(lineNumber: number, filter?: (r: FoldingRegion, level: number) => boolean): FoldingRegion[];
    getRegionAtLine(lineNumber: number): FoldingRegion | null;
    getRegionsInside(region: FoldingRegion | null, filter?: RegionFilter | RegionFilterWithLevel): FoldingRegion[];
}
type RegionFilter = (r: FoldingRegion) => boolean;
type RegionFilterWithLevel = (r: FoldingRegion, level: number) => boolean;
/**
 * Folds all regions for which the lines start with a given regex
 * @param foldingModel the folding model
 */
declare function setCollapseStateForMatchingLines(foldingModel: FoldingModel, regExp: RegExp, doCollapse: boolean): void;

export { CollapseMemento, FoldingModel, FoldingModelChangeEvent, IDecorationProvider, setCollapseStateForMatchingLines };
