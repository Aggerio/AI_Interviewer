import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';
import { ThemeIcon } from 'monaco-editor/esm/vs/base/common/themables.js';
import { EditorAction2 } from 'monaco-editor/esm/vs/editor/browser/editorExtensions.js';
import { findFocusedDiffEditor } from 'monaco-editor/esm/vs/editor/browser/widget/diffEditor.contribution.js';
import { DiffEditorWidget2 } from 'monaco-editor/esm/vs/editor/browser/widget/diffEditorWidget2/diffEditorWidget2.js';
import { localize } from 'monaco-editor/esm/vs/nls.js';
import { registerAction2, MenuRegistry, MenuId, Action2 } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { ContextKeyExpr, ContextKeyEqualsExpr } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
class ToggleCollapseUnchangedRegions extends Action2 {
    constructor() {
        super({
            id: 'diffEditor.toggleCollapseUnchangedRegions',
            title: { value: ( localize('toggleCollapseUnchangedRegions', "Toggle Collapse Unchanged Regions")), original: 'Toggle Collapse Unchanged Regions' },
            icon: Codicon.map,
            precondition: ContextKeyEqualsExpr.create('diffEditorVersion', 2),
        });
    }
    run(accessor, ...args) {
        const configurationService = accessor.get(IConfigurationService);
        const newValue = !configurationService.getValue('diffEditor.experimental.collapseUnchangedRegions');
        configurationService.updateValue('diffEditor.experimental.collapseUnchangedRegions', newValue);
    }
}
registerAction2(ToggleCollapseUnchangedRegions);
MenuRegistry.appendMenuItem(MenuId.EditorTitle, {
    command: {
        id: ( new ToggleCollapseUnchangedRegions()).desc.id,
        title: ( localize('collapseUnchangedRegions', "Show Unchanged Regions")),
        icon: Codicon.map
    },
    order: 22,
    group: 'navigation',
    when: ( ContextKeyExpr.and(( ContextKeyExpr.has('config.diffEditor.experimental.collapseUnchangedRegions')), ContextKeyEqualsExpr.create('diffEditorVersion', 2)))
});
MenuRegistry.appendMenuItem(MenuId.EditorTitle, {
    command: {
        id: ( new ToggleCollapseUnchangedRegions()).desc.id,
        title: ( localize('showUnchangedRegions', "Collapse Unchanged Regions")),
        icon: ThemeIcon.modify(Codicon.map, 'disabled'),
    },
    order: 22,
    group: 'navigation',
    when: ( ContextKeyExpr.and(( ( ContextKeyExpr.has('config.diffEditor.experimental.collapseUnchangedRegions')).negate()), ContextKeyEqualsExpr.create('diffEditorVersion', 2)))
});
class ToggleShowMovedCodeBlocks extends Action2 {
    constructor() {
        super({
            id: 'diffEditor.toggleShowMovedCodeBlocks',
            title: { value: ( localize('toggleShowMovedCodeBlocks', "Toggle Show Moved Code Blocks")), original: 'Toggle Show Moved Code Blocks' },
            precondition: ContextKeyEqualsExpr.create('diffEditorVersion', 2),
        });
    }
    run(accessor, ...args) {
        const configurationService = accessor.get(IConfigurationService);
        const newValue = !configurationService.getValue('diffEditor.experimental.showMoves');
        configurationService.updateValue('diffEditor.experimental.showMoves', newValue);
    }
}
registerAction2(ToggleShowMovedCodeBlocks);
const diffEditorCategory = {
    value: ( localize('diffEditor', 'Diff Editor')),
    original: 'Diff Editor',
};
class SwitchSide extends EditorAction2 {
    constructor() {
        super({
            id: 'diffEditor.switchSide',
            title: { value: ( localize('switchSide', "Switch Side")), original: 'Switch Side' },
            icon: Codicon.arrowSwap,
            precondition: ( ContextKeyExpr.and(ContextKeyEqualsExpr.create('diffEditorVersion', 2), ( ContextKeyExpr.has('isInDiffEditor')))),
            f1: true,
            category: diffEditorCategory,
        });
    }
    runEditorCommand(accessor, editor, ...args) {
        const diffEditor = findFocusedDiffEditor(accessor);
        if (diffEditor instanceof DiffEditorWidget2) {
            diffEditor.switchSide();
        }
    }
}
registerAction2(SwitchSide);
export { SwitchSide, ToggleCollapseUnchangedRegions, ToggleShowMovedCodeBlocks };
