import { ServiceIdentifier } from '../../../platform/instantiation/common/instantiation.js';
import { ICodeEditor } from '../editorBrowser.js';
import { WorkspaceEdit, WorkspaceEditMetadata, IWorkspaceFileEdit, WorkspaceFileEditOptions } from '../../common/languages.js';
import { IProgress, IProgressStep } from '../../../platform/progress/common/progress.js';
import { IDisposable } from '../../../base/common/lifecycle.js';
import { URI } from '../../../base/common/uri.js';
import { UndoRedoSource } from '../../../platform/undoRedo/common/undoRedo.js';
import { CancellationToken } from '../../../base/common/cancellation.js';

declare class ResourceEdit {
    readonly metadata?: WorkspaceEditMetadata | undefined;
    protected constructor(metadata?: WorkspaceEditMetadata | undefined);
    static convert(edit: WorkspaceEdit): ResourceEdit[];
}
declare class ResourceFileEdit extends ResourceEdit implements IWorkspaceFileEdit {
    readonly oldResource: URI | undefined;
    readonly newResource: URI | undefined;
    readonly options: WorkspaceFileEditOptions;
    static is(candidate: any): candidate is IWorkspaceFileEdit;
    static lift(edit: IWorkspaceFileEdit): ResourceFileEdit;
    constructor(oldResource: URI | undefined, newResource: URI | undefined, options?: WorkspaceFileEditOptions, metadata?: WorkspaceEditMetadata);
}
interface IBulkEditOptions {
    editor?: ICodeEditor;
    progress?: IProgress<IProgressStep>;
    token?: CancellationToken;
    showPreview?: boolean;
    label?: string;
    code?: string;
    quotableLabel?: string;
    undoRedoSource?: UndoRedoSource;
    undoRedoGroupId?: number;
    confirmBeforeUndo?: boolean;
    respectAutoSaveConfig?: boolean;
}
interface IBulkEditResult {
    ariaSummary: string;
    isApplied: boolean;
}
type IBulkEditPreviewHandler = (edits: ResourceEdit[], options?: IBulkEditOptions) => Promise<ResourceEdit[]>;

declare const IBulkEditService: ServiceIdentifier<IBulkEditService>;
interface IBulkEditService {
    readonly _serviceBrand: undefined;
    hasPreviewHandler(): boolean;
    setPreviewHandler(handler: IBulkEditPreviewHandler): IDisposable;
    apply(edit: ResourceEdit[] | WorkspaceEdit, options?: IBulkEditOptions): Promise<IBulkEditResult>;
}

export { IBulkEditOptions, IBulkEditPreviewHandler, IBulkEditResult, IBulkEditService, ResourceEdit, ResourceFileEdit };
