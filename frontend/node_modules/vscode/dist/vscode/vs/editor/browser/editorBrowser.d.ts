import * as monaco from 'monaco-editor';
import { IBoundarySashes } from '../../base/browser/ui/sash/sash.js';
import { Event } from '../../base/common/event.js';
import { IDiffEditorOptions } from '../common/config/editorOptions.js';
import { ILineChange, IDiffComputationResult } from '../common/diff/smartLinesDiffComputer.js';
import { IEditor, IDiffEditorViewState, IDiffEditorModel, IDiffEditorViewModel } from '../common/editorCommon.js';

/**
 * A rich code editor.
 */
type ICodeEditor = monaco.editor.ICodeEditor
/**
 * A rich diff editor.
 */
interface IDiffEditor extends IEditor {
    /**
     * Returns whether the diff editor is ignoring trim whitespace or not.
     * @internal
     */
    readonly ignoreTrimWhitespace: boolean;
    /**
     * Returns whether the diff editor is rendering side by side or inline.
     * @internal
     */
    readonly renderSideBySide: boolean;
    /**
     * Timeout in milliseconds after which diff computation is cancelled.
     * @internal
     */
    readonly maxComputationTime: number;
    /**
     * @see {@link ICodeEditor.getContainerDomNode}
     */
    getContainerDomNode(): HTMLElement;
    /**
     * An event emitted when the diff information computed by this diff editor has been updated.
     * @event
     */
    readonly onDidUpdateDiff: Event<void>;
    /**
     * An event emitted when the diff model is changed (i.e. the diff editor shows new content).
     * @event
     */
    readonly onDidChangeModel: Event<void>;
    /**
     * Saves current view state of the editor in a serializable object.
     */
    saveViewState(): IDiffEditorViewState | null;
    /**
     * Restores the view state of the editor from a serializable object generated by `saveViewState`.
     */
    restoreViewState(state: IDiffEditorViewState | null): void;
    /**
     * Type the getModel() of IEditor.
     */
    getModel(): IDiffEditorModel | null;
    createViewModel(model: IDiffEditorModel): IDiffEditorViewModel;
    /**
     * Sets the current model attached to this editor.
     * If the previous model was created by the editor via the value key in the options
     * literal object, it will be destroyed. Otherwise, if the previous model was set
     * via setModel, or the model key in the options literal object, the previous model
     * will not be destroyed.
     * It is safe to call setModel(null) to simply detach the current model from the editor.
     */
    setModel(model: IDiffEditorModel | IDiffEditorViewModel | null): void;
    /**
     * Get the `original` editor.
     */
    getOriginalEditor(): ICodeEditor;
    /**
     * Get the `modified` editor.
     */
    getModifiedEditor(): ICodeEditor;
    /**
     * Get the computed diff information.
     */
    getLineChanges(): ILineChange[] | null;
    /**
     * Get the computed diff information.
     * @internal
     */
    getDiffComputationResult(): IDiffComputationResult | null;
    /**
     * Update the editor's options after the editor has been created.
     */
    updateOptions(newOptions: IDiffEditorOptions): void;
    /**
     * @internal
     */
    setBoundarySashes(sashes: IBoundarySashes): void;
    /**
     * @internal
     */
    goToDiff(target: 'next' | 'previous'): void;
    /**
     * @internal
     */
    revealFirstDiff(): unknown;
    accessibleDiffViewerNext(): void;
    accessibleDiffViewerPrev(): void;
}

export { ICodeEditor, IDiffEditor };
