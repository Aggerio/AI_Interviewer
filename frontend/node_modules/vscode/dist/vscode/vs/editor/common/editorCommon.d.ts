import * as monaco from 'monaco-editor';
import { UriComponents } from '../../base/common/uri.js';
import { ThemeColor } from '../../base/common/themables.js';
import { IPosition } from './core/position.js';
import { TrackedRangeStickiness, OverviewRulerLane, ITextModel } from './model.js';

/**
 * A model for the diff editor.
 */
interface IDiffEditorModel {
    /**
     * Original model.
     */
    original: ITextModel;
    /**
     * Modified model.
     */
    modified: ITextModel;
}
interface IDiffEditorViewModel {
    readonly model: IDiffEditorModel;
    waitForDiff(): Promise<void>;
}
/**
 * A (serializable) state of the cursors.
 */
interface ICursorState {
    inSelectionMode: boolean;
    selectionStart: IPosition;
    position: IPosition;
}
/**
 * A (serializable) state of the view.
 */
interface IViewState {
    /** written by previous versions */
    scrollTop?: number;
    /** written by previous versions */
    scrollTopWithoutViewZones?: number;
    scrollLeft: number;
    firstPosition: IPosition;
    firstPositionDeltaTop: number;
}
/**
 * A (serializable) state of the code editor.
 */
interface ICodeEditorViewState {
    cursorState: ICursorState[];
    viewState: IViewState;
    contributionsState: {
        [id: string]: any;
    };
}
/**
 * (Serializable) View state for the diff editor.
 */
interface IDiffEditorViewState {
    original: ICodeEditorViewState | null;
    modified: ICodeEditorViewState | null;
    modelState?: unknown;
}
/**
 * An editor.
 */
type IEditor = monaco.editor.IEditor
/**
 * A diff editor.
 *
 * @internal
 */
interface IDiffEditor extends IEditor {
    /**
     * Type the getModel() of IEditor.
     */
    getModel(): IDiffEditorModel | null;
    /**
     * Get the `original` editor.
     */
    getOriginalEditor(): IEditor;
    /**
     * Get the `modified` editor.
     */
    getModifiedEditor(): IEditor;
}
/**
 * An editor contribution that gets created every time a new editor gets created and gets disposed when the editor gets disposed.
 */
interface IEditorContribution {
    /**
     * Dispose this contribution.
     */
    dispose(): void;
    /**
     * Store view state.
     */
    saveViewState?(): any;
    /**
     * Restore view state.
     */
    restoreViewState?(state: any): void;
}
/**
 * @internal
 */
interface IThemeDecorationRenderOptions {
    backgroundColor?: string | ThemeColor;
    outline?: string;
    outlineColor?: string | ThemeColor;
    outlineStyle?: string;
    outlineWidth?: string;
    border?: string;
    borderColor?: string | ThemeColor;
    borderRadius?: string;
    borderSpacing?: string;
    borderStyle?: string;
    borderWidth?: string;
    fontStyle?: string;
    fontWeight?: string;
    fontSize?: string;
    textDecoration?: string;
    cursor?: string;
    color?: string | ThemeColor;
    opacity?: string;
    letterSpacing?: string;
    gutterIconPath?: UriComponents;
    gutterIconSize?: string;
    overviewRulerColor?: string | ThemeColor;
    /**
     * @deprecated
     */
    before?: IContentDecorationRenderOptions;
    /**
     * @deprecated
     */
    after?: IContentDecorationRenderOptions;
    /**
     * @deprecated
     */
    beforeInjectedText?: IContentDecorationRenderOptions & {
        affectsLetterSpacing?: boolean;
    };
    /**
     * @deprecated
     */
    afterInjectedText?: IContentDecorationRenderOptions & {
        affectsLetterSpacing?: boolean;
    };
}
/**
 * @internal
 */
interface IContentDecorationRenderOptions {
    contentText?: string;
    contentIconPath?: UriComponents;
    border?: string;
    borderColor?: string | ThemeColor;
    borderRadius?: string;
    fontStyle?: string;
    fontWeight?: string;
    fontSize?: string;
    fontFamily?: string;
    textDecoration?: string;
    color?: string | ThemeColor;
    backgroundColor?: string | ThemeColor;
    opacity?: string;
    verticalAlign?: string;
    margin?: string;
    padding?: string;
    width?: string;
    height?: string;
}
/**
 * @internal
 */
interface IDecorationRenderOptions extends IThemeDecorationRenderOptions {
    isWholeLine?: boolean;
    rangeBehavior?: TrackedRangeStickiness;
    overviewRulerLane?: OverviewRulerLane;
    light?: IThemeDecorationRenderOptions;
    dark?: IThemeDecorationRenderOptions;
}

export { ICodeEditorViewState, IContentDecorationRenderOptions, ICursorState, IDecorationRenderOptions, IDiffEditor, IDiffEditorModel, IDiffEditorViewModel, IDiffEditorViewState, IEditor, IEditorContribution, IThemeDecorationRenderOptions, IViewState };
