import { ServiceIdentifier } from '../../../platform/instantiation/common/instantiation.js';
import { IMarkdownString } from '../../../base/common/htmlContent.js';
import { IReference, IDisposable } from '../../../base/common/lifecycle.js';
import { URI } from '../../../base/common/uri.js';
import { ITextModel, ITextSnapshot } from '../model.js';
import { IEditorModel } from '../../../platform/editor/common/editor.js';

declare const ITextModelService: ServiceIdentifier<ITextModelService>;
interface ITextModelService {
    readonly _serviceBrand: undefined;
    /**
     * Provided a resource URI, it will return a model reference
     * which should be disposed once not needed anymore.
     */
    createModelReference(resource: URI): Promise<IReference<IResolvedTextEditorModel>>;
    /**
     * Registers a specific `scheme` content provider.
     */
    registerTextModelContentProvider(scheme: string, provider: ITextModelContentProvider): IDisposable;
    /**
     * Check if the given resource can be resolved to a text model.
     */
    canHandleResource(resource: URI): boolean;
}
interface ITextModelContentProvider {
    /**
     * Given a resource, return the content of the resource as `ITextModel`.
     */
    provideTextContent(resource: URI): Promise<ITextModel | null> | null;
}
interface ITextEditorModel extends IEditorModel {
    /**
     * Provides access to the underlying `ITextModel`.
     */
    readonly textEditorModel: ITextModel | null;
    /**
     * Creates a snapshot of the model's contents.
     */
    createSnapshot(this: IResolvedTextEditorModel): ITextSnapshot;
    createSnapshot(this: ITextEditorModel): ITextSnapshot | null;
    /**
     * Signals if this model is readonly or not.
     */
    isReadonly(): boolean | IMarkdownString;
    /**
     * The language id of the text model if known.
     */
    getLanguageId(): string | undefined;
}
interface IResolvedTextEditorModel extends ITextEditorModel {
    /**
     * Same as ITextEditorModel#textEditorModel, but never null.
     */
    readonly textEditorModel: ITextModel;
}

export { IResolvedTextEditorModel, ITextEditorModel, ITextModelContentProvider, ITextModelService };
