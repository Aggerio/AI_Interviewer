import { __decorate, __param } from '../../../../../node_modules/tslib/tslib.es6.js';
import { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { Position } from 'monaco-editor/esm/vs/editor/common/core/position.js';
import { ILanguageService } from 'monaco-editor/esm/vs/editor/common/languages/language.js';
import { IModelService } from 'monaco-editor/esm/vs/editor/common/services/model.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
let TextResourceConfigurationService = class TextResourceConfigurationService extends Disposable {
    constructor(configurationService, modelService, languageService) {
        super();
        this.configurationService = configurationService;
        this.modelService = modelService;
        this.languageService = languageService;
        this._onDidChangeConfiguration = this._register(( new Emitter()));
        this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;
        this._register(this.configurationService.onDidChangeConfiguration(e => this._onDidChangeConfiguration.fire(this.toResourceConfigurationChangeEvent(e))));
    }
    getValue(resource, arg2, arg3) {
        if (typeof arg3 === 'string') {
            return this._getValue(resource, Position.isIPosition(arg2) ? arg2 : null, arg3);
        }
        return this._getValue(resource, null, typeof arg2 === 'string' ? arg2 : undefined);
    }
    updateValue(resource, key, value, configurationTarget) {
        const language = this.getLanguage(resource, null);
        const configurationValue = this.configurationService.inspect(key, { resource, overrideIdentifier: language });
        if (configurationTarget === undefined) {
            configurationTarget = this.deriveConfigurationTarget(configurationValue, language);
        }
        switch (configurationTarget) {
            case 8 :
                return this._updateValue(key, value, configurationTarget, configurationValue.memory?.override, resource, language);
            case 6 :
                return this._updateValue(key, value, configurationTarget, configurationValue.workspaceFolder?.override, resource, language);
            case 5 :
                return this._updateValue(key, value, configurationTarget, configurationValue.workspace?.override, resource, language);
            case 4 :
                return this._updateValue(key, value, configurationTarget, configurationValue.userRemote?.override, resource, language);
            default:
                return this._updateValue(key, value, configurationTarget, configurationValue.userLocal?.override, resource, language);
        }
    }
    _updateValue(key, value, configurationTarget, overriddenValue, resource, language) {
        if (language && overriddenValue !== undefined) {
            return this.configurationService.updateValue(key, value, { resource, overrideIdentifier: language }, configurationTarget);
        }
        else {
            return this.configurationService.updateValue(key, value, { resource }, configurationTarget);
        }
    }
    deriveConfigurationTarget(configurationValue, language) {
        if (language) {
            if (configurationValue.memory?.override !== undefined) {
                return 8 ;
            }
            if (configurationValue.workspaceFolder?.override !== undefined) {
                return 6 ;
            }
            if (configurationValue.workspace?.override !== undefined) {
                return 5 ;
            }
            if (configurationValue.userRemote?.override !== undefined) {
                return 4 ;
            }
            if (configurationValue.userLocal?.override !== undefined) {
                return 3 ;
            }
        }
        if (configurationValue.memory?.value !== undefined) {
            return 8 ;
        }
        if (configurationValue.workspaceFolder?.value !== undefined) {
            return 6 ;
        }
        if (configurationValue.workspace?.value !== undefined) {
            return 5 ;
        }
        if (configurationValue.userRemote?.value !== undefined) {
            return 4 ;
        }
        return 3 ;
    }
    _getValue(resource, position, section) {
        const language = resource ? this.getLanguage(resource, position) : undefined;
        if (typeof section === 'undefined') {
            return this.configurationService.getValue({ resource, overrideIdentifier: language });
        }
        return this.configurationService.getValue(section, { resource, overrideIdentifier: language });
    }
    inspect(resource, position, section) {
        const language = resource ? this.getLanguage(resource, position) : undefined;
        return this.configurationService.inspect(section, { resource, overrideIdentifier: language });
    }
    getLanguage(resource, position) {
        const model = this.modelService.getModel(resource);
        if (model) {
            return position ? model.getLanguageIdAtPosition(position.lineNumber, position.column) : model.getLanguageId();
        }
        return this.languageService.guessLanguageIdByFilepathOrFirstLine(resource);
    }
    toResourceConfigurationChangeEvent(configurationChangeEvent) {
        return {
            affectedKeys: configurationChangeEvent.affectedKeys,
            affectsConfiguration: (resource, configuration) => {
                const overrideIdentifier = resource ? this.getLanguage(resource, null) : undefined;
                return configurationChangeEvent.affectsConfiguration(configuration, { resource, overrideIdentifier });
            }
        };
    }
};
TextResourceConfigurationService = ( __decorate([
    ( __param(0, IConfigurationService)),
    ( __param(1, IModelService)),
    ( __param(2, ILanguageService))
], TextResourceConfigurationService));
export { TextResourceConfigurationService };
