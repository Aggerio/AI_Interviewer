import { ServiceIdentifier } from '../../../platform/instantiation/common/instantiation.js';
import { URI } from '../../../base/common/uri.js';
import { IRange } from '../core/range.js';
import { IDocumentDiffProviderOptions, IDocumentDiff } from '../diff/documentDiffProvider.js';
import { IChange } from '../diff/smartLinesDiffComputer.js';
import { TextEdit, IInplaceReplaceSupportResult } from '../languages.js';
import { UnicodeHighlighterOptions } from './unicodeTextModelHighlighter.js';

type DiffAlgorithmName = 'legacy' | 'advanced';

declare const IEditorWorkerService: ServiceIdentifier<IEditorWorkerService>;
interface IEditorWorkerService {
    readonly _serviceBrand: undefined;
    canComputeUnicodeHighlights(uri: URI): boolean;
    computedUnicodeHighlights(uri: URI, options: UnicodeHighlighterOptions, range?: IRange): Promise<IUnicodeHighlightsResult>;
    /** Implementation in {@link EditorSimpleWorker.computeDiff} */
    computeDiff(original: URI, modified: URI, options: IDocumentDiffProviderOptions, algorithm: DiffAlgorithmName): Promise<IDocumentDiff | null>;
    canComputeDirtyDiff(original: URI, modified: URI): boolean;
    computeDirtyDiff(original: URI, modified: URI, ignoreTrimWhitespace: boolean): Promise<IChange[] | null>;
    computeMoreMinimalEdits(resource: URI, edits: TextEdit[] | null | undefined, pretty?: boolean): Promise<TextEdit[] | undefined>;
    computeHumanReadableDiff(resource: URI, edits: TextEdit[] | null | undefined): Promise<TextEdit[] | undefined>;
    canComputeWordRanges(resource: URI): boolean;
    computeWordRanges(resource: URI, range: IRange): Promise<{
        [word: string]: IRange[];
    } | null>;
    canNavigateValueSet(resource: URI): boolean;
    navigateValueSet(resource: URI, range: IRange, up: boolean): Promise<IInplaceReplaceSupportResult | null>;
}
interface IUnicodeHighlightsResult {
    ranges: IRange[];
    hasMore: boolean;
    nonBasicAsciiCharacterCount: number;
    invisibleCharacterCount: number;
    ambiguousCharacterCount: number;
}

export { DiffAlgorithmName, IEditorWorkerService, IUnicodeHighlightsResult };
