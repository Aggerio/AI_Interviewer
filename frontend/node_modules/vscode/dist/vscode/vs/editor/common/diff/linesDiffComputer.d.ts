import { LineRange } from '../core/lineRange.js';
import { Range } from '../core/range.js';

/**
 * Maps a line range in the original text model to a line range in the modified text model.
 */
declare class LineRangeMapping {
    static inverse(mapping: readonly LineRangeMapping[], originalLineCount: number, modifiedLineCount: number): LineRangeMapping[];
    /**
     * The line range in the original text model.
     */
    readonly originalRange: LineRange;
    /**
     * The line range in the modified text model.
     */
    readonly modifiedRange: LineRange;
    /**
     * If inner changes have not been computed, this is set to undefined.
     * Otherwise, it represents the character-level diff in this line range.
     * The original range of each range mapping should be contained in the original line range (same for modified), exceptions are new-lines.
     * Must not be an empty array.
     */
    readonly innerChanges: RangeMapping[] | undefined;
    constructor(originalRange: LineRange, modifiedRange: LineRange, innerChanges: RangeMapping[] | undefined);
    toString(): string;
    get changedLineCount(): number;
    flip(): LineRangeMapping;
}
/**
 * Maps a range in the original text model to a range in the modified text model.
 */
declare class RangeMapping {
    /**
     * The original range.
     */
    readonly originalRange: Range;
    /**
     * The modified range.
     */
    readonly modifiedRange: Range;
    constructor(originalRange: Range, modifiedRange: Range);
    toString(): string;
    flip(): RangeMapping;
}
declare class SimpleLineRangeMapping {
    readonly original: LineRange;
    readonly modified: LineRange;
    constructor(original: LineRange, modified: LineRange);
    toString(): string;
    flip(): SimpleLineRangeMapping;
}
declare class MovedText {
    readonly lineRangeMapping: SimpleLineRangeMapping;
    /**
     * The diff from the original text to the moved text.
     * Must be contained in the original/modified line range.
     * Can be empty if the text didn't change (only moved).
     */
    readonly changes: readonly LineRangeMapping[];
    constructor(lineRangeMapping: SimpleLineRangeMapping, changes: readonly LineRangeMapping[]);
    flip(): MovedText;
}

export { LineRangeMapping, MovedText, RangeMapping, SimpleLineRangeMapping };
