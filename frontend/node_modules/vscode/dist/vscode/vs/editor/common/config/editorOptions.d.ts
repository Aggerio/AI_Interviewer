import { IMarkdownString } from '../../../base/common/htmlContent.js';
import { IDocumentDiffProvider } from '../diff/documentDiffProvider.js';

/**
 * Configuration options for auto closing quotes and brackets
 */
type EditorAutoClosingStrategy = 'always' | 'languageDefined' | 'beforeWhitespace' | 'never';
/**
 * Configuration options for auto wrapping quotes and brackets
 */
type EditorAutoSurroundStrategy = 'languageDefined' | 'quotes' | 'brackets' | 'never';
/**
 * Configuration options for typing over closing quotes or brackets
 */
type EditorAutoClosingEditStrategy = 'always' | 'auto' | 'never';
/**
 * Configuration options for auto indentation in the editor
 */
declare const enum EditorAutoIndentStrategy {
    None = 0,
    Keep = 1,
    Brackets = 2,
    Advanced = 3,
    Full = 4
}
/**
 * Configuration options for the editor.
 */
interface IEditorOptions {
    /**
     * This editor is used inside a diff editor.
     */
    inDiffEditor?: boolean;
    /**
     * The aria label for the editor's textarea (when it is focused).
     */
    ariaLabel?: string;
    /**
     * Whether the aria-required attribute should be set on the editors textarea.
     */
    ariaRequired?: boolean;
    /**
     * Control whether a screen reader announces inline suggestion content immediately.
     */
    screenReaderAnnounceInlineSuggestion?: boolean;
    /**
     * The `tabindex` property of the editor's textarea
     */
    tabIndex?: number;
    /**
     * Render vertical lines at the specified columns.
     * Defaults to empty array.
     */
    rulers?: (number | IRulerOption)[];
    /**
     * A string containing the word separators used when doing word navigation.
     * Defaults to `~!@#$%^&*()-=+[{]}\\|;:\'",.<>/?
     */
    wordSeparators?: string;
    /**
     * Enable Linux primary clipboard.
     * Defaults to true.
     */
    selectionClipboard?: boolean;
    /**
     * Control the rendering of line numbers.
     * If it is a function, it will be invoked when rendering a line number and the return value will be rendered.
     * Otherwise, if it is a truthy, line numbers will be rendered normally (equivalent of using an identity function).
     * Otherwise, line numbers will not be rendered.
     * Defaults to `on`.
     */
    lineNumbers?: LineNumbersType;
    /**
     * Controls the minimal number of visible leading and trailing lines surrounding the cursor.
     * Defaults to 0.
    */
    cursorSurroundingLines?: number;
    /**
     * Controls when `cursorSurroundingLines` should be enforced
     * Defaults to `default`, `cursorSurroundingLines` is not enforced when cursor position is changed
     * by mouse.
    */
    cursorSurroundingLinesStyle?: 'default' | 'all';
    /**
     * Render last line number when the file ends with a newline.
     * Defaults to 'on' for Windows and macOS and 'dimmed' for Linux.
    */
    renderFinalNewline?: 'on' | 'off' | 'dimmed';
    /**
     * Remove unusual line terminators like LINE SEPARATOR (LS), PARAGRAPH SEPARATOR (PS).
     * Defaults to 'prompt'.
     */
    unusualLineTerminators?: 'auto' | 'off' | 'prompt';
    /**
     * Should the corresponding line be selected when clicking on the line number?
     * Defaults to true.
     */
    selectOnLineNumbers?: boolean;
    /**
     * Control the width of line numbers, by reserving horizontal space for rendering at least an amount of digits.
     * Defaults to 5.
     */
    lineNumbersMinChars?: number;
    /**
     * Enable the rendering of the glyph margin.
     * Defaults to true in vscode and to false in monaco-editor.
     */
    glyphMargin?: boolean;
    /**
     * The width reserved for line decorations (in px).
     * Line decorations are placed between line numbers and the editor content.
     * You can pass in a string in the format floating point followed by "ch". e.g. 1.3ch.
     * Defaults to 10.
     */
    lineDecorationsWidth?: number | string;
    /**
     * When revealing the cursor, a virtual padding (px) is added to the cursor, turning it into a rectangle.
     * This virtual padding ensures that the cursor gets revealed before hitting the edge of the viewport.
     * Defaults to 30 (px).
     */
    revealHorizontalRightPadding?: number;
    /**
     * Render the editor selection with rounded borders.
     * Defaults to true.
     */
    roundedSelection?: boolean;
    /**
     * Class name to be added to the editor.
     */
    extraEditorClassName?: string;
    /**
     * Should the editor be read only. See also `domReadOnly`.
     * Defaults to false.
     */
    readOnly?: boolean;
    /**
     * The message to display when the editor is readonly.
     */
    readOnlyMessage?: IMarkdownString;
    /**
     * Should the textarea used for input use the DOM `readonly` attribute.
     * Defaults to false.
     */
    domReadOnly?: boolean;
    /**
     * Enable linked editing.
     * Defaults to false.
     */
    linkedEditing?: boolean;
    /**
     * deprecated, use linkedEditing instead
     */
    renameOnType?: boolean;
    /**
     * Should the editor render validation decorations.
     * Defaults to editable.
     */
    renderValidationDecorations?: 'editable' | 'on' | 'off';
    /**
     * Control the behavior and rendering of the scrollbars.
     */
    scrollbar?: IEditorScrollbarOptions;
    /**
     * Control the behavior of sticky scroll options
     */
    stickyScroll?: IEditorStickyScrollOptions;
    /**
     * Control the behavior and rendering of the minimap.
     */
    minimap?: IEditorMinimapOptions;
    /**
     * Control the behavior of the find widget.
     */
    find?: IEditorFindOptions;
    /**
     * Display overflow widgets as `fixed`.
     * Defaults to `false`.
     */
    fixedOverflowWidgets?: boolean;
    /**
     * The number of vertical lanes the overview ruler should render.
     * Defaults to 3.
     */
    overviewRulerLanes?: number;
    /**
     * Controls if a border should be drawn around the overview ruler.
     * Defaults to `true`.
     */
    overviewRulerBorder?: boolean;
    /**
     * Control the cursor animation style, possible values are 'blink', 'smooth', 'phase', 'expand' and 'solid'.
     * Defaults to 'blink'.
     */
    cursorBlinking?: 'blink' | 'smooth' | 'phase' | 'expand' | 'solid';
    /**
     * Zoom the font in the editor when using the mouse wheel in combination with holding Ctrl.
     * Defaults to false.
     */
    mouseWheelZoom?: boolean;
    /**
     * Control the mouse pointer style, either 'text' or 'default' or 'copy'
     * Defaults to 'text'
     */
    mouseStyle?: 'text' | 'default' | 'copy';
    /**
     * Enable smooth caret animation.
     * Defaults to 'off'.
     */
    cursorSmoothCaretAnimation?: 'off' | 'explicit' | 'on';
    /**
     * Control the cursor style, either 'block' or 'line'.
     * Defaults to 'line'.
     */
    cursorStyle?: 'line' | 'block' | 'underline' | 'line-thin' | 'block-outline' | 'underline-thin';
    /**
     * Control the width of the cursor when cursorStyle is set to 'line'
     */
    cursorWidth?: number;
    /**
     * Enable font ligatures.
     * Defaults to false.
     */
    fontLigatures?: boolean | string;
    /**
     * Enable font variations.
     * Defaults to false.
     */
    fontVariations?: boolean | string;
    /**
     * Controls whether to use default color decorations or not using the default document color provider
     */
    defaultColorDecorators?: boolean;
    /**
     * Disable the use of `transform: translate3d(0px, 0px, 0px)` for the editor margin and lines layers.
     * The usage of `transform: translate3d(0px, 0px, 0px)` acts as a hint for browsers to create an extra layer.
     * Defaults to false.
     */
    disableLayerHinting?: boolean;
    /**
     * Disable the optimizations for monospace fonts.
     * Defaults to false.
     */
    disableMonospaceOptimizations?: boolean;
    /**
     * Should the cursor be hidden in the overview ruler.
     * Defaults to false.
     */
    hideCursorInOverviewRuler?: boolean;
    /**
     * Enable that scrolling can go one screen size after the last line.
     * Defaults to true.
     */
    scrollBeyondLastLine?: boolean;
    /**
     * Enable that scrolling can go beyond the last column by a number of columns.
     * Defaults to 5.
     */
    scrollBeyondLastColumn?: number;
    /**
     * Enable that the editor animates scrolling to a position.
     * Defaults to false.
     */
    smoothScrolling?: boolean;
    /**
     * Enable that the editor will install a ResizeObserver to check if its container dom node size has changed.
     * Defaults to false.
     */
    automaticLayout?: boolean;
    /**
     * Control the wrapping of the editor.
     * When `wordWrap` = "off", the lines will never wrap.
     * When `wordWrap` = "on", the lines will wrap at the viewport width.
     * When `wordWrap` = "wordWrapColumn", the lines will wrap at `wordWrapColumn`.
     * When `wordWrap` = "bounded", the lines will wrap at min(viewport width, wordWrapColumn).
     * Defaults to "off".
     */
    wordWrap?: 'off' | 'on' | 'wordWrapColumn' | 'bounded';
    /**
     * Override the `wordWrap` setting.
     */
    wordWrapOverride1?: 'off' | 'on' | 'inherit';
    /**
     * Override the `wordWrapOverride1` setting.
     */
    wordWrapOverride2?: 'off' | 'on' | 'inherit';
    /**
     * Control the wrapping of the editor.
     * When `wordWrap` = "off", the lines will never wrap.
     * When `wordWrap` = "on", the lines will wrap at the viewport width.
     * When `wordWrap` = "wordWrapColumn", the lines will wrap at `wordWrapColumn`.
     * When `wordWrap` = "bounded", the lines will wrap at min(viewport width, wordWrapColumn).
     * Defaults to 80.
     */
    wordWrapColumn?: number;
    /**
     * Control indentation of wrapped lines. Can be: 'none', 'same', 'indent' or 'deepIndent'.
     * Defaults to 'same' in vscode and to 'none' in monaco-editor.
     */
    wrappingIndent?: 'none' | 'same' | 'indent' | 'deepIndent';
    /**
     * Controls the wrapping strategy to use.
     * Defaults to 'simple'.
     */
    wrappingStrategy?: 'simple' | 'advanced';
    /**
     * Configure word wrapping characters. A break will be introduced before these characters.
     */
    wordWrapBreakBeforeCharacters?: string;
    /**
     * Configure word wrapping characters. A break will be introduced after these characters.
     */
    wordWrapBreakAfterCharacters?: string;
    /**
     * Sets whether line breaks appear wherever the text would otherwise overflow its content box.
     * When wordBreak = 'normal', Use the default line break rule.
     * When wordBreak = 'keepAll', Word breaks should not be used for Chinese/Japanese/Korean (CJK) text. Non-CJK text behavior is the same as for normal.
     */
    wordBreak?: 'normal' | 'keepAll';
    /**
     * Performance guard: Stop rendering a line after x characters.
     * Defaults to 10000.
     * Use -1 to never stop rendering
     */
    stopRenderingLineAfter?: number;
    /**
     * Configure the editor's hover.
     */
    hover?: IEditorHoverOptions;
    /**
     * Enable detecting links and making them clickable.
     * Defaults to true.
     */
    links?: boolean;
    /**
     * Enable inline color decorators and color picker rendering.
     */
    colorDecorators?: boolean;
    /**
     * Controls what is the condition to spawn a color picker from a color dectorator
     */
    colorDecoratorsActivatedOn?: 'clickAndHover' | 'click' | 'hover';
    /**
     * Controls the max number of color decorators that can be rendered in an editor at once.
     */
    colorDecoratorsLimit?: number;
    /**
     * Control the behaviour of comments in the editor.
     */
    comments?: IEditorCommentsOptions;
    /**
     * Enable custom contextmenu.
     * Defaults to true.
     */
    contextmenu?: boolean;
    /**
     * A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.
     * Defaults to 1.
     */
    mouseWheelScrollSensitivity?: number;
    /**
     * FastScrolling mulitplier speed when pressing `Alt`
     * Defaults to 5.
     */
    fastScrollSensitivity?: number;
    /**
     * Enable that the editor scrolls only the predominant axis. Prevents horizontal drift when scrolling vertically on a trackpad.
     * Defaults to true.
     */
    scrollPredominantAxis?: boolean;
    /**
     * Enable that the selection with the mouse and keys is doing column selection.
     * Defaults to false.
     */
    columnSelection?: boolean;
    /**
     * The modifier to be used to add multiple cursors with the mouse.
     * Defaults to 'alt'
     */
    multiCursorModifier?: 'ctrlCmd' | 'alt';
    /**
     * Merge overlapping selections.
     * Defaults to true
     */
    multiCursorMergeOverlapping?: boolean;
    /**
     * Configure the behaviour when pasting a text with the line count equal to the cursor count.
     * Defaults to 'spread'.
     */
    multiCursorPaste?: 'spread' | 'full';
    /**
     * Controls the max number of text cursors that can be in an active editor at once.
     */
    multiCursorLimit?: number;
    /**
     * Configure the editor's accessibility support.
     * Defaults to 'auto'. It is best to leave this to 'auto'.
     */
    accessibilitySupport?: 'auto' | 'off' | 'on';
    /**
     * Controls the number of lines in the editor that can be read out by a screen reader
     */
    accessibilityPageSize?: number;
    /**
     * Suggest options.
     */
    suggest?: ISuggestOptions;
    inlineSuggest?: IInlineSuggestOptions;
    /**
     * Smart select options.
     */
    smartSelect?: ISmartSelectOptions;
    /**
     *
     */
    gotoLocation?: IGotoLocationOptions;
    /**
     * Enable quick suggestions (shadow suggestions)
     * Defaults to true.
     */
    quickSuggestions?: boolean | IQuickSuggestionsOptions;
    /**
     * Quick suggestions show delay (in ms)
     * Defaults to 10 (ms)
     */
    quickSuggestionsDelay?: number;
    /**
     * Controls the spacing around the editor.
     */
    padding?: IEditorPaddingOptions;
    /**
     * Parameter hint options.
     */
    parameterHints?: IEditorParameterHintOptions;
    /**
     * Options for auto closing brackets.
     * Defaults to language defined behavior.
     */
    autoClosingBrackets?: EditorAutoClosingStrategy;
    /**
     * Options for auto closing quotes.
     * Defaults to language defined behavior.
     */
    autoClosingQuotes?: EditorAutoClosingStrategy;
    /**
     * Options for pressing backspace near quotes or bracket pairs.
     */
    autoClosingDelete?: EditorAutoClosingEditStrategy;
    /**
     * Options for typing over closing quotes or brackets.
     */
    autoClosingOvertype?: EditorAutoClosingEditStrategy;
    /**
     * Options for auto surrounding.
     * Defaults to always allowing auto surrounding.
     */
    autoSurround?: EditorAutoSurroundStrategy;
    /**
     * Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.
     * Defaults to advanced.
     */
    autoIndent?: 'none' | 'keep' | 'brackets' | 'advanced' | 'full';
    /**
     * Emulate selection behaviour of tab characters when using spaces for indentation.
     * This means selection will stick to tab stops.
     */
    stickyTabStops?: boolean;
    /**
     * Enable format on type.
     * Defaults to false.
     */
    formatOnType?: boolean;
    /**
     * Enable format on paste.
     * Defaults to false.
     */
    formatOnPaste?: boolean;
    /**
     * Controls if the editor should allow to move selections via drag and drop.
     * Defaults to false.
     */
    dragAndDrop?: boolean;
    /**
     * Enable the suggestion box to pop-up on trigger characters.
     * Defaults to true.
     */
    suggestOnTriggerCharacters?: boolean;
    /**
     * Accept suggestions on ENTER.
     * Defaults to 'on'.
     */
    acceptSuggestionOnEnter?: 'on' | 'smart' | 'off';
    /**
     * Accept suggestions on provider defined characters.
     * Defaults to true.
     */
    acceptSuggestionOnCommitCharacter?: boolean;
    /**
     * Enable snippet suggestions. Default to 'true'.
     */
    snippetSuggestions?: 'top' | 'bottom' | 'inline' | 'none';
    /**
     * Copying without a selection copies the current line.
     */
    emptySelectionClipboard?: boolean;
    /**
     * Syntax highlighting is copied.
     */
    copyWithSyntaxHighlighting?: boolean;
    /**
     * The history mode for suggestions.
     */
    suggestSelection?: 'first' | 'recentlyUsed' | 'recentlyUsedByPrefix';
    /**
     * The font size for the suggest widget.
     * Defaults to the editor font size.
     */
    suggestFontSize?: number;
    /**
     * The line height for the suggest widget.
     * Defaults to the editor line height.
     */
    suggestLineHeight?: number;
    /**
     * Enable tab completion.
     */
    tabCompletion?: 'on' | 'off' | 'onlySnippets';
    /**
     * Enable selection highlight.
     * Defaults to true.
     */
    selectionHighlight?: boolean;
    /**
     * Enable semantic occurrences highlight.
     * Defaults to true.
     */
    occurrencesHighlight?: boolean;
    /**
     * Show code lens
     * Defaults to true.
     */
    codeLens?: boolean;
    /**
     * Code lens font family. Defaults to editor font family.
     */
    codeLensFontFamily?: string;
    /**
     * Code lens font size. Default to 90% of the editor font size
     */
    codeLensFontSize?: number;
    /**
     * Control the behavior and rendering of the code action lightbulb.
     */
    lightbulb?: IEditorLightbulbOptions;
    /**
     * Timeout for running code actions on save.
     */
    codeActionsOnSaveTimeout?: number;
    /**
     * Enable code folding.
     * Defaults to true.
     */
    folding?: boolean;
    /**
     * Selects the folding strategy. 'auto' uses the strategies contributed for the current document, 'indentation' uses the indentation based folding strategy.
     * Defaults to 'auto'.
     */
    foldingStrategy?: 'auto' | 'indentation';
    /**
     * Enable highlight for folded regions.
     * Defaults to true.
     */
    foldingHighlight?: boolean;
    /**
     * Auto fold imports folding regions.
     * Defaults to true.
     */
    foldingImportsByDefault?: boolean;
    /**
     * Maximum number of foldable regions.
     * Defaults to 5000.
     */
    foldingMaximumRegions?: number;
    /**
     * Controls whether the fold actions in the gutter stay always visible or hide unless the mouse is over the gutter.
     * Defaults to 'mouseover'.
     */
    showFoldingControls?: 'always' | 'never' | 'mouseover';
    /**
     * Controls whether clicking on the empty content after a folded line will unfold the line.
     * Defaults to false.
     */
    unfoldOnClickAfterEndOfLine?: boolean;
    /**
     * Enable highlighting of matching brackets.
     * Defaults to 'always'.
     */
    matchBrackets?: 'never' | 'near' | 'always';
    /**
     * Enable experimental whitespace rendering.
     * Defaults to 'svg'.
     */
    experimentalWhitespaceRendering?: 'svg' | 'font' | 'off';
    /**
     * Enable rendering of whitespace.
     * Defaults to 'selection'.
     */
    renderWhitespace?: 'none' | 'boundary' | 'selection' | 'trailing' | 'all';
    /**
     * Enable rendering of control characters.
     * Defaults to true.
     */
    renderControlCharacters?: boolean;
    /**
     * Enable rendering of current line highlight.
     * Defaults to all.
     */
    renderLineHighlight?: 'none' | 'gutter' | 'line' | 'all';
    /**
     * Control if the current line highlight should be rendered only the editor is focused.
     * Defaults to false.
     */
    renderLineHighlightOnlyWhenFocus?: boolean;
    /**
     * Inserting and deleting whitespace follows tab stops.
     */
    useTabStops?: boolean;
    /**
     * The font family
     */
    fontFamily?: string;
    /**
     * The font weight
     */
    fontWeight?: string;
    /**
     * The font size
     */
    fontSize?: number;
    /**
     * The line height
     */
    lineHeight?: number;
    /**
     * The letter spacing
     */
    letterSpacing?: number;
    /**
     * Controls fading out of unused variables.
     */
    showUnused?: boolean;
    /**
     * Controls whether to focus the inline editor in the peek widget by default.
     * Defaults to false.
     */
    peekWidgetDefaultFocus?: 'tree' | 'editor';
    /**
     * Controls whether the definition link opens element in the peek widget.
     * Defaults to false.
     */
    definitionLinkOpensInPeek?: boolean;
    /**
     * Controls strikethrough deprecated variables.
     */
    showDeprecated?: boolean;
    /**
     * Controls whether suggestions allow matches in the middle of the word instead of only at the beginning
     */
    matchOnWordStartOnly?: boolean;
    /**
     * Control the behavior and rendering of the inline hints.
     */
    inlayHints?: IEditorInlayHintsOptions;
    /**
     * Control if the editor should use shadow DOM.
     */
    useShadowDOM?: boolean;
    /**
     * Controls the behavior of editor guides.
    */
    guides?: IGuidesOptions;
    /**
     * Controls the behavior of the unicode highlight feature
     * (by default, ambiguous and invisible characters are highlighted).
     */
    unicodeHighlight?: IUnicodeHighlightOptions;
    /**
     * Configures bracket pair colorization (disabled by default).
    */
    bracketPairColorization?: IBracketPairColorizationOptions;
    /**
     * Controls dropping into the editor from an external source.
     *
     * When enabled, this shows a preview of the drop location and triggers an `onDropIntoEditor` event.
     */
    dropIntoEditor?: IDropIntoEditorOptions;
    /**
     * Controls support for changing how content is pasted into the editor.
     */
    pasteAs?: IPasteAsOptions;
    /**
     * Controls whether the editor receives tabs or defers them to the workbench for navigation.
     */
    tabFocusMode?: boolean;
}
interface IDiffEditorBaseOptions {
    /**
     * Allow the user to resize the diff editor split view.
     * Defaults to true.
     */
    enableSplitViewResizing?: boolean;
    /**
     * The default ratio when rendering side-by-side editors.
     * Must be a number between 0 and 1, min sizes apply.
     * Defaults to 0.5
     */
    splitViewDefaultRatio?: number;
    /**
     * Render the differences in two side-by-side editors.
     * Defaults to true.
     */
    renderSideBySide?: boolean;
    /**
     * Timeout in milliseconds after which diff computation is cancelled.
     * Defaults to 5000.
     */
    maxComputationTime?: number;
    /**
     * Maximum supported file size in MB.
     * Defaults to 50.
     */
    maxFileSize?: number;
    /**
     * Compute the diff by ignoring leading/trailing whitespace
     * Defaults to true.
     */
    ignoreTrimWhitespace?: boolean;
    /**
     * Render +/- indicators for added/deleted changes.
     * Defaults to true.
     */
    renderIndicators?: boolean;
    /**
     * Shows icons in the glyph margin to revert changes.
     * Default to true.
     */
    renderMarginRevertIcon?: boolean;
    /**
     * Original model should be editable?
     * Defaults to false.
     */
    originalEditable?: boolean;
    /**
     * Should the diff editor enable code lens?
     * Defaults to false.
     */
    diffCodeLens?: boolean;
    /**
     * Is the diff editor should render overview ruler
     * Defaults to true
     */
    renderOverviewRuler?: boolean;
    /**
     * Control the wrapping of the diff editor.
     */
    diffWordWrap?: 'off' | 'on' | 'inherit';
    /**
     * Diff Algorithm
    */
    diffAlgorithm?: 'legacy' | 'advanced' | IDocumentDiffProvider;
    /**
     * Whether the diff editor aria label should be verbose.
     */
    accessibilityVerbose?: boolean;
    experimental?: {
        /**
         * Defaults to false.
         */
        collapseUnchangedRegions?: boolean;
        /**
         * Defaults to false.
         */
        showMoves?: boolean;
        showEmptyDecorations?: boolean;
    };
    /**
     * Is the diff editor inside another editor
     * Defaults to false
     */
    isInEmbeddedEditor?: boolean;
    /**
     * If the diff editor should only show the difference review mode.
     */
    onlyShowAccessibleDiffViewer?: boolean;
}
/**
 * Configuration options for the diff editor.
 */
interface IDiffEditorOptions extends IEditorOptions, IDiffEditorBaseOptions {
}
/**
 * Configuration options for editor comments
 */
interface IEditorCommentsOptions {
    /**
     * Insert a space after the line comment token and inside the block comments tokens.
     * Defaults to true.
     */
    insertSpace?: boolean;
    /**
     * Ignore empty lines when inserting line comments.
     * Defaults to true.
     */
    ignoreEmptyLines?: boolean;
}
/**
 * Configuration options for editor find widget
 */
interface IEditorFindOptions {
    /**
    * Controls whether the cursor should move to find matches while typing.
    */
    cursorMoveOnType?: boolean;
    /**
     * Controls if we seed search string in the Find Widget with editor selection.
     */
    seedSearchStringFromSelection?: 'never' | 'always' | 'selection';
    /**
     * Controls if Find in Selection flag is turned on in the editor.
     */
    autoFindInSelection?: 'never' | 'always' | 'multiline';
    addExtraSpaceOnTop?: boolean;
    /**
     * @internal
     * Controls if the Find Widget should read or modify the shared find clipboard on macOS
     */
    globalFindClipboard?: boolean;
    /**
     * Controls whether the search result and diff result automatically restarts from the beginning (or the end) when no further matches can be found
     */
    loop?: boolean;
}
type GoToLocationValues = 'peek' | 'gotoAndPeek' | 'goto';
/**
 * Configuration options for go to location
 */
interface IGotoLocationOptions {
    multiple?: GoToLocationValues;
    multipleDefinitions?: GoToLocationValues;
    multipleTypeDefinitions?: GoToLocationValues;
    multipleDeclarations?: GoToLocationValues;
    multipleImplementations?: GoToLocationValues;
    multipleReferences?: GoToLocationValues;
    alternativeDefinitionCommand?: string;
    alternativeTypeDefinitionCommand?: string;
    alternativeDeclarationCommand?: string;
    alternativeImplementationCommand?: string;
    alternativeReferenceCommand?: string;
}
/**
 * Configuration options for editor hover
 */
interface IEditorHoverOptions {
    /**
     * Enable the hover.
     * Defaults to true.
     */
    enabled?: boolean;
    /**
     * Delay for showing the hover.
     * Defaults to 300.
     */
    delay?: number;
    /**
     * Is the hover sticky such that it can be clicked and its contents selected?
     * Defaults to true.
     */
    sticky?: boolean;
    /**
     * Should the hover be shown above the line if possible?
     * Defaults to false.
     */
    above?: boolean;
}
/**
 * Configuration options for editor lightbulb
 */
interface IEditorLightbulbOptions {
    /**
     * Enable the lightbulb code action.
     * Defaults to true.
     */
    enabled?: boolean;
}
interface IEditorStickyScrollOptions {
    /**
     * Enable the sticky scroll
     */
    enabled?: boolean;
    /**
     * Maximum number of sticky lines to show
     */
    maxLineCount?: number;
    /**
     * Model to choose for sticky scroll by default
     */
    defaultModel?: 'outlineModel' | 'foldingProviderModel' | 'indentationModel';
}
/**
 * Configuration options for editor inlayHints
 */
interface IEditorInlayHintsOptions {
    /**
     * Enable the inline hints.
     * Defaults to true.
     */
    enabled?: 'on' | 'off' | 'offUnlessPressed' | 'onUnlessPressed';
    /**
     * Font size of inline hints.
     * Default to 90% of the editor font size.
     */
    fontSize?: number;
    /**
     * Font family of inline hints.
     * Defaults to editor font family.
     */
    fontFamily?: string;
    /**
     * Enables the padding around the inlay hint.
     * Defaults to false.
     */
    padding?: boolean;
}
/**
 * Configuration options for editor minimap
 */
interface IEditorMinimapOptions {
    /**
     * Enable the rendering of the minimap.
     * Defaults to true.
     */
    enabled?: boolean;
    /**
     * Control the rendering of minimap.
     */
    autohide?: boolean;
    /**
     * Control the side of the minimap in editor.
     * Defaults to 'right'.
     */
    side?: 'right' | 'left';
    /**
     * Control the minimap rendering mode.
     * Defaults to 'actual'.
     */
    size?: 'proportional' | 'fill' | 'fit';
    /**
     * Control the rendering of the minimap slider.
     * Defaults to 'mouseover'.
     */
    showSlider?: 'always' | 'mouseover';
    /**
     * Render the actual text on a line (as opposed to color blocks).
     * Defaults to true.
     */
    renderCharacters?: boolean;
    /**
     * Limit the width of the minimap to render at most a certain number of columns.
     * Defaults to 120.
     */
    maxColumn?: number;
    /**
     * Relative size of the font in the minimap. Defaults to 1.
     */
    scale?: number;
}
/**
 * Configuration options for editor padding
 */
interface IEditorPaddingOptions {
    /**
     * Spacing between top edge of editor and first line.
     */
    top?: number;
    /**
     * Spacing between bottom edge of editor and last line.
     */
    bottom?: number;
}
/**
 * Configuration options for parameter hints
 */
interface IEditorParameterHintOptions {
    /**
     * Enable parameter hints.
     * Defaults to true.
     */
    enabled?: boolean;
    /**
     * Enable cycling of parameter hints.
     * Defaults to false.
     */
    cycle?: boolean;
}
type QuickSuggestionsValue = 'on' | 'inline' | 'off';
/**
 * Configuration options for quick suggestions
 */
interface IQuickSuggestionsOptions {
    other?: boolean | QuickSuggestionsValue;
    comments?: boolean | QuickSuggestionsValue;
    strings?: boolean | QuickSuggestionsValue;
}
type LineNumbersType = 'on' | 'off' | 'relative' | 'interval' | ((lineNumber: number) => string);
interface IRulerOption {
    readonly column: number;
    readonly color: string | null;
}
/**
 * Configuration options for editor scrollbars
 */
interface IEditorScrollbarOptions {
    /**
     * The size of arrows (if displayed).
     * Defaults to 11.
     * **NOTE**: This option cannot be updated using `updateOptions()`
     */
    arrowSize?: number;
    /**
     * Render vertical scrollbar.
     * Defaults to 'auto'.
     */
    vertical?: 'auto' | 'visible' | 'hidden';
    /**
     * Render horizontal scrollbar.
     * Defaults to 'auto'.
     */
    horizontal?: 'auto' | 'visible' | 'hidden';
    /**
     * Cast horizontal and vertical shadows when the content is scrolled.
     * Defaults to true.
     * **NOTE**: This option cannot be updated using `updateOptions()`
     */
    useShadows?: boolean;
    /**
     * Render arrows at the top and bottom of the vertical scrollbar.
     * Defaults to false.
     * **NOTE**: This option cannot be updated using `updateOptions()`
     */
    verticalHasArrows?: boolean;
    /**
     * Render arrows at the left and right of the horizontal scrollbar.
     * Defaults to false.
     * **NOTE**: This option cannot be updated using `updateOptions()`
     */
    horizontalHasArrows?: boolean;
    /**
     * Listen to mouse wheel events and react to them by scrolling.
     * Defaults to true.
     */
    handleMouseWheel?: boolean;
    /**
     * Always consume mouse wheel events (always call preventDefault() and stopPropagation() on the browser events).
     * Defaults to true.
     * **NOTE**: This option cannot be updated using `updateOptions()`
     */
    alwaysConsumeMouseWheel?: boolean;
    /**
     * Height in pixels for the horizontal scrollbar.
     * Defaults to 10 (px).
     */
    horizontalScrollbarSize?: number;
    /**
     * Width in pixels for the vertical scrollbar.
     * Defaults to 10 (px).
     */
    verticalScrollbarSize?: number;
    /**
     * Width in pixels for the vertical slider.
     * Defaults to `verticalScrollbarSize`.
     * **NOTE**: This option cannot be updated using `updateOptions()`
     */
    verticalSliderSize?: number;
    /**
     * Height in pixels for the horizontal slider.
     * Defaults to `horizontalScrollbarSize`.
     * **NOTE**: This option cannot be updated using `updateOptions()`
     */
    horizontalSliderSize?: number;
    /**
     * Scroll gutter clicks move by page vs jump to position.
     * Defaults to false.
     */
    scrollByPage?: boolean;
}
type InUntrustedWorkspace = 'inUntrustedWorkspace';
/**
 * Configuration options for unicode highlighting.
 */
interface IUnicodeHighlightOptions {
    /**
     * Controls whether all non-basic ASCII characters are highlighted. Only characters between U+0020 and U+007E, tab, line-feed and carriage-return are considered basic ASCII.
     */
    nonBasicASCII?: boolean | InUntrustedWorkspace;
    /**
     * Controls whether characters that just reserve space or have no width at all are highlighted.
     */
    invisibleCharacters?: boolean;
    /**
     * Controls whether characters are highlighted that can be confused with basic ASCII characters, except those that are common in the current user locale.
     */
    ambiguousCharacters?: boolean;
    /**
     * Controls whether characters in comments should also be subject to unicode highlighting.
     */
    includeComments?: boolean | InUntrustedWorkspace;
    /**
     * Controls whether characters in strings should also be subject to unicode highlighting.
     */
    includeStrings?: boolean | InUntrustedWorkspace;
    /**
     * Defines allowed characters that are not being highlighted.
     */
    allowedCharacters?: Record<string, true>;
    /**
     * Unicode characters that are common in allowed locales are not being highlighted.
     */
    allowedLocales?: Record<string | '_os' | '_vscode', true>;
}
interface IInlineSuggestOptions {
    /**
     * Enable or disable the rendering of automatic inline completions.
    */
    enabled?: boolean;
    /**
     * Configures the mode.
     * Use `prefix` to only show ghost text if the text to replace is a prefix of the suggestion text.
     * Use `subword` to only show ghost text if the replace text is a subword of the suggestion text.
     * Use `subwordSmart` to only show ghost text if the replace text is a subword of the suggestion text, but the subword must start after the cursor position.
     * Defaults to `prefix`.
    */
    mode?: 'prefix' | 'subword' | 'subwordSmart';
    showToolbar?: 'always' | 'onHover';
    suppressSuggestions?: boolean;
    /**
     * Does not clear active inline suggestions when the editor loses focus.
     */
    keepOnBlur?: boolean;
}
interface IBracketPairColorizationOptions {
    /**
     * Enable or disable bracket pair colorization.
    */
    enabled?: boolean;
    /**
     * Use independent color pool per bracket type.
    */
    independentColorPoolPerBracketType?: boolean;
}
interface IGuidesOptions {
    /**
     * Enable rendering of bracket pair guides.
     * Defaults to false.
    */
    bracketPairs?: boolean | 'active';
    /**
     * Enable rendering of vertical bracket pair guides.
     * Defaults to 'active'.
     */
    bracketPairsHorizontal?: boolean | 'active';
    /**
     * Enable highlighting of the active bracket pair.
     * Defaults to true.
    */
    highlightActiveBracketPair?: boolean;
    /**
     * Enable rendering of indent guides.
     * Defaults to true.
     */
    indentation?: boolean;
    /**
     * Enable highlighting of the active indent guide.
     * Defaults to true.
     */
    highlightActiveIndentation?: boolean | 'always';
}
/**
 * Configuration options for editor suggest widget
 */
interface ISuggestOptions {
    /**
     * Overwrite word ends on accept. Default to false.
     */
    insertMode?: 'insert' | 'replace';
    /**
     * Enable graceful matching. Defaults to true.
     */
    filterGraceful?: boolean;
    /**
     * Prevent quick suggestions when a snippet is active. Defaults to true.
     */
    snippetsPreventQuickSuggestions?: boolean;
    /**
     * Favors words that appear close to the cursor.
     */
    localityBonus?: boolean;
    /**
     * Enable using global storage for remembering suggestions.
     */
    shareSuggestSelections?: boolean;
    /**
     * Select suggestions when triggered via quick suggest or trigger characters
     */
    selectionMode?: 'always' | 'never' | 'whenTriggerCharacter' | 'whenQuickSuggestion';
    /**
     * Enable or disable icons in suggestions. Defaults to true.
     */
    showIcons?: boolean;
    /**
     * Enable or disable the suggest status bar.
     */
    showStatusBar?: boolean;
    /**
     * Enable or disable the rendering of the suggestion preview.
     */
    preview?: boolean;
    /**
     * Configures the mode of the preview.
    */
    previewMode?: 'prefix' | 'subword' | 'subwordSmart';
    /**
     * Show details inline with the label. Defaults to true.
     */
    showInlineDetails?: boolean;
    /**
     * Show method-suggestions.
     */
    showMethods?: boolean;
    /**
     * Show function-suggestions.
     */
    showFunctions?: boolean;
    /**
     * Show constructor-suggestions.
     */
    showConstructors?: boolean;
    /**
     * Show deprecated-suggestions.
     */
    showDeprecated?: boolean;
    /**
     * Controls whether suggestions allow matches in the middle of the word instead of only at the beginning
     */
    matchOnWordStartOnly?: boolean;
    /**
     * Show field-suggestions.
     */
    showFields?: boolean;
    /**
     * Show variable-suggestions.
     */
    showVariables?: boolean;
    /**
     * Show class-suggestions.
     */
    showClasses?: boolean;
    /**
     * Show struct-suggestions.
     */
    showStructs?: boolean;
    /**
     * Show interface-suggestions.
     */
    showInterfaces?: boolean;
    /**
     * Show module-suggestions.
     */
    showModules?: boolean;
    /**
     * Show property-suggestions.
     */
    showProperties?: boolean;
    /**
     * Show event-suggestions.
     */
    showEvents?: boolean;
    /**
     * Show operator-suggestions.
     */
    showOperators?: boolean;
    /**
     * Show unit-suggestions.
     */
    showUnits?: boolean;
    /**
     * Show value-suggestions.
     */
    showValues?: boolean;
    /**
     * Show constant-suggestions.
     */
    showConstants?: boolean;
    /**
     * Show enum-suggestions.
     */
    showEnums?: boolean;
    /**
     * Show enumMember-suggestions.
     */
    showEnumMembers?: boolean;
    /**
     * Show keyword-suggestions.
     */
    showKeywords?: boolean;
    /**
     * Show text-suggestions.
     */
    showWords?: boolean;
    /**
     * Show color-suggestions.
     */
    showColors?: boolean;
    /**
     * Show file-suggestions.
     */
    showFiles?: boolean;
    /**
     * Show reference-suggestions.
     */
    showReferences?: boolean;
    /**
     * Show folder-suggestions.
     */
    showFolders?: boolean;
    /**
     * Show typeParameter-suggestions.
     */
    showTypeParameters?: boolean;
    /**
     * Show issue-suggestions.
     */
    showIssues?: boolean;
    /**
     * Show user-suggestions.
     */
    showUsers?: boolean;
    /**
     * Show snippet-suggestions.
     */
    showSnippets?: boolean;
}
interface ISmartSelectOptions {
    selectLeadingAndTrailingWhitespace?: boolean;
    selectSubwords?: boolean;
}
/**
 * Configuration options for editor drop into behavior
 */
interface IDropIntoEditorOptions {
    /**
     * Enable dropping into editor.
     * Defaults to true.
     */
    enabled?: boolean;
    /**
     * Controls if a widget is shown after a drop.
     * Defaults to 'afterDrop'.
     */
    showDropSelector?: 'afterDrop' | 'never';
}
/**
 * Configuration options for editor pasting as into behavior
 */
interface IPasteAsOptions {
    /**
     * Enable paste as functionality in editors.
     * Defaults to true.
     */
    enabled?: boolean;
    /**
     * Controls if a widget is shown after a drop.
     * Defaults to 'afterPaste'.
     */
    showPasteSelector?: 'afterPaste' | 'never';
}

export { EditorAutoClosingEditStrategy, EditorAutoClosingStrategy, EditorAutoIndentStrategy, EditorAutoSurroundStrategy, GoToLocationValues, IBracketPairColorizationOptions, IDiffEditorBaseOptions, IDiffEditorOptions, IDropIntoEditorOptions, IEditorCommentsOptions, IEditorFindOptions, IEditorHoverOptions, IEditorInlayHintsOptions, IEditorLightbulbOptions, IEditorMinimapOptions, IEditorOptions, IEditorPaddingOptions, IEditorParameterHintOptions, IEditorScrollbarOptions, IEditorStickyScrollOptions, IGotoLocationOptions, IGuidesOptions, IInlineSuggestOptions, IPasteAsOptions, IQuickSuggestionsOptions, IRulerOption, ISmartSelectOptions, ISuggestOptions, IUnicodeHighlightOptions, InUntrustedWorkspace, LineNumbersType, QuickSuggestionsValue };
