import { create, createDiffEditor } from './vscode/vs/editor/standalone/browser/standaloneEditor.js';
export { errorHandler } from './vscode/vs/base/common/errors.js';
export { FoldingModel, setCollapseStateForMatchingLines } from './vscode/vs/editor/contrib/folding/browser/foldingModel.js';
export { FoldingController } from './vscode/vs/editor/contrib/folding/browser/folding.js';
import { IReference, IDisposable } from './vscode/vs/base/common/lifecycle.js';
export { DisposableStore } from './vscode/vs/base/common/lifecycle.js';
export { Registry } from './vscode/vs/platform/registry/common/platform.js';
export { IJSONContributionRegistry } from './vscode/vs/platform/jsonschemas/common/jsonContributionRegistry.js';
export { CommandsRegistry } from './vscode/vs/platform/commands/common/commands.js';
export { MenuId, MenuRegistry } from './vscode/vs/platform/actions/common/actions.js';
export { KeybindingsRegistry } from './vscode/vs/platform/keybinding/common/keybindingsRegistry.js';
export { IJSONSchema } from './vscode/vs/base/common/jsonSchema.js';
export { registerColor } from './vscode/vs/platform/theme/common/colorRegistry.js';
import { URI } from './vscode/vs/base/common/uri.js';
import { IFileDeleteOptions } from './vscode/vs/platform/files/common/files.js';
import { ITextFileEditorModel } from './vscode/vs/workbench/services/textfile/common/textfiles.js';
export { ContextKeyExpr, RawContextKey } from './vscode/vs/platform/contextkey/common/contextkey.js';
import { IKeybindingService } from './vscode/vs/platform/keybinding/common/keybinding.js';
import { KeybindingResolver } from './vscode/vs/platform/keybinding/common/keybindingResolver.js';
import { ResolvedKeybindingItem } from './vscode/vs/platform/keybinding/common/resolvedKeybindingItem.js';

declare function writeFile(uri: URI, content: string): Promise<void>;
declare function deleteFile(uri: URI, options?: Partial<IFileDeleteOptions>): Promise<void>;
declare function createModelReference(resource: URI, content?: string): Promise<IReference<ITextFileEditorModel>>;
interface DynamicKeybindingService extends IKeybindingService {
    registerKeybindingProvider(provider: () => ResolvedKeybindingItem[]): IDisposable;
    _getResolver(): KeybindingResolver;
}
declare const createConfiguredEditor: typeof create;
declare const createConfiguredDiffEditor: typeof createDiffEditor;
declare const Extensions: {
    Configuration: string;
    JSONContribution: string;
};

export { DynamicKeybindingService, Extensions, IReference, ITextFileEditorModel, createConfiguredDiffEditor, createConfiguredEditor, createModelReference, deleteFile, writeFile };
