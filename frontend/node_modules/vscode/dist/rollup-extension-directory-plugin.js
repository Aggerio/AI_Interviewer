import { createFilter, dataToEsm } from '@rollup/pluginutils';
import { p as parseJson, l as localizeManifest, e as extractResourcesFromExtensionManifest } from './extension-tools.js';
import * as path from 'path';
import * as fsPromise from 'fs/promises';
import * as fs from 'fs';

function plugin({ include, exclude, transformManifest = manifest => manifest, getAdditionalResources = () => Promise.resolve([]) }) {
    const filter = createFilter(include, exclude);
    return {
        name: 'default-extensions-loader',
        resolveId(source) {
            if (filter(source)) {
                return source;
            }
            return undefined;
        },
        async load(id) {
            // load extension directory as a module that loads the extension
            if (!filter(id)) {
                return;
            }
            // Load extension resources
            const basename = path.basename(id);
            if (basename === 'package.json') {
                const content = await fsPromise.readFile(id);
                let parsed = parseJson(id, content.toString('utf-8'));
                const nlsFile = path.resolve(path.dirname(id), 'package.nls.json');
                if (fs.existsSync(nlsFile)) {
                    parsed = localizeManifest(parsed, parseJson(id, (await fsPromise.readFile(nlsFile)).toString()));
                }
                return {
                    code: dataToEsm(transformManifest(parsed), {
                        compact: true,
                        namedExports: false,
                        preferConst: false
                    })
                };
            }
            // load extension directory as a module that loads the extension
            const stat = await fsPromise.stat(id);
            if (stat.isDirectory()) {
                // Load the extension directory as a module importing the required files and registering the extension
                const manifestPath = path.resolve(id, 'package.json');
                const manifest = transformManifest(parseJson(id, (await fsPromise.readFile(manifestPath)).toString('utf8')));
                try {
                    const extensionResources = await extractResourcesFromExtensionManifest(manifest, async (resourcePath) => {
                        return (await fsPromise.readFile(path.join(id, resourcePath)));
                    });
                    const resources = Array.from(new Set([
                        ...extensionResources,
                        ...await getAdditionalResources(manifest, id)
                    ]));
                    return `
import manifest from '${manifestPath}'
import { registerExtension } from 'vscode/extensions'

const { registerFileUrl } = registerExtension(manifest)
${resources.map(resource => (`
registerFileUrl('${resource.path}', new URL('${path.resolve(id, resource.path)}', import.meta.url).toString()${resource.mimeType != null ? `, '${resource.mimeType}'` : ''})`)).join('\n')}
        `;
                }
                catch (err) {
                    console.error(err, err.stack);
                    throw err;
                }
            }
            return undefined;
        }
    };
}

export { plugin as default };
