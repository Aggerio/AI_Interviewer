"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResizeContent = exports.ResizeHandleLeft = exports.ResizeHandleRight = exports.ResizePanel = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
/* eslint-disable react/display-name */
const react_1 = require("react");
const react_draggable_1 = require("react-draggable");
const ReactContextResizePanel = (0, react_1.createContext)(undefined);
function ResizePanel({ children, initialWidth, minWidth = 0, maxWidth = Infinity, }) {
    const [width, setWidth] = (0, react_1.useState)(initialWidth);
    return ((0, jsx_runtime_1.jsx)(ReactContextResizePanel.Provider, Object.assign({ value: { width, setWidth, minWidth, maxWidth } }, { children: children })));
}
exports.ResizePanel = ResizePanel;
// https://github.com/react-grid-layout/react-draggable/blob/v4.4.2/lib/DraggableCore.js#L159-L171
const Handle = (0, react_1.forwardRef)((props, ref) => ((0, jsx_runtime_1.jsx)("div", Object.assign({ ref: ref }, props))));
function handleOverflow({ ui, currentWidth, nextWidth }) {
    const { clientWidth, scrollWidth } = ui.node.parentElement;
    const difference = currentWidth - nextWidth;
    const nextScrollWidth = scrollWidth + difference;
    const overflow = nextScrollWidth - clientWidth;
    if (clientWidth - nextScrollWidth < 0)
        return currentWidth - overflow;
    return nextWidth;
}
function ResizeHandleRight(props) {
    const { setWidth, minWidth, maxWidth } = (0, react_1.useContext)(ReactContextResizePanel);
    const nodeRef = (0, react_1.useRef)(null);
    return ((0, jsx_runtime_1.jsx)(react_draggable_1.DraggableCore, Object.assign({ nodeRef: nodeRef, onDrag: (_, ui) => {
            var _a;
            (_a = window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();
            const { deltaX } = ui;
            if (deltaX < 0) {
                setWidth((currentWidth) => Math.max(currentWidth + deltaX, minWidth));
            }
            else {
                setWidth((currentWidth) => {
                    const nextWidth = Math.min(currentWidth + deltaX, maxWidth);
                    return handleOverflow({ ui, currentWidth, nextWidth });
                });
            }
        } }, { children: (0, jsx_runtime_1.jsx)(Handle, Object.assign({ ref: nodeRef }, props)) })));
}
exports.ResizeHandleRight = ResizeHandleRight;
function ResizeHandleLeft(props) {
    const { setWidth, minWidth, maxWidth } = (0, react_1.useContext)(ReactContextResizePanel);
    const nodeRef = (0, react_1.useRef)(null);
    return ((0, jsx_runtime_1.jsx)(react_draggable_1.DraggableCore, Object.assign({ nodeRef: nodeRef, onDrag: (_, ui) => {
            var _a;
            (_a = window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();
            const { deltaX } = ui;
            if (deltaX < 0) {
                setWidth((currentWidth) => {
                    const nextWidth = Math.min(currentWidth - deltaX, maxWidth);
                    return handleOverflow({ ui, currentWidth, nextWidth });
                });
            }
            else {
                setWidth((currentWidth) => Math.max(currentWidth - deltaX, minWidth));
            }
        } }, { children: (0, jsx_runtime_1.jsx)(Handle, Object.assign({ ref: nodeRef }, props)) })));
}
exports.ResizeHandleLeft = ResizeHandleLeft;
function ResizeContent(_a) {
    var { style } = _a, props = __rest(_a, ["style"]);
    const { width } = (0, react_1.useContext)(ReactContextResizePanel);
    return ((0, jsx_runtime_1.jsx)("div", Object.assign({ style: Object.assign(Object.assign({}, style), { width, maxWidth: width, minWidth: width }) }, props)));
}
exports.ResizeContent = ResizeContent;
