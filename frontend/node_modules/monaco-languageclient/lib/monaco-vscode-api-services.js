/* --------------------------------------------------------------------------------------------
 * Copyright (c) 2018-2022 TypeFox GmbH (http://www.typefox.io). All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
import { Uri } from 'monaco-editor';
import { ILogService, initialize as initializeMonacoService, StandaloneServices } from 'vscode/services';
import { initialize as initializeVscodeExtensions } from 'vscode/extensions';
export const wasVscodeApiInitialized = () => {
    return window.MonacoEnvironment?.vscodeApiInitialised === true;
};
export const initServices = async (config) => {
    await importAllServices(config);
    if (config?.debugLogging === true) {
        console.log('initializeMonacoService completed successfully');
    }
    await initializeVscodeExtensions();
    if (config?.debugLogging === true) {
        console.log('initializeVscodeExtensions completed successfully');
    }
    if (!window.MonacoEnvironment) {
        window.MonacoEnvironment = {
            createTrustedTypesPolicy: (_policyName) => {
                return undefined;
            }
        };
    }
    window.MonacoEnvironment.vscodeApiInitialised = true;
};
/**
 * monaco-vscode-api automatically loads the following services:
 * - layout
 * - environment
 * - extension
 * - files
 * - quickAccess
 */
export const importAllServices = async (config) => {
    const serviceNames = [];
    const promises = [];
    const lc = config ?? {};
    const userServices = lc.userServices ?? {};
    const addService = (name, promise) => {
        serviceNames.push(name);
        promises.push(promise);
    };
    if (lc.enableModelService === true) {
        addService('model', import('vscode/service-override/model'));
    }
    if (lc.configureEditorOrViewsService !== undefined) {
        if (lc.configureEditorOrViewsService.enableViewsService === true) {
            addService('views', import('vscode/service-override/views'));
        }
        else {
            addService('editor', import('vscode/service-override/editor'));
        }
    }
    if (lc.configureConfigurationService !== undefined) {
        addService('configuration', import('vscode/service-override/configuration'));
    }
    if (lc.enableDialogService === true) {
        addService('dialogs', import('vscode/service-override/dialogs'));
    }
    if (lc.enableNotificationService === true) {
        addService('notifications', import('vscode/service-override/notifications'));
    }
    if (lc.enableThemeService === true) {
        addService('theme', import('vscode/service-override/theme'));
    }
    if (lc.enableTextmateService === true) {
        addService('textmate', import('vscode/service-override/textmate'));
    }
    if (lc.enableKeybindingsService === true) {
        addService('keybindings', import('vscode/service-override/keybindings'));
    }
    if (lc.enableLanguagesService === true) {
        addService('languages', import('vscode/service-override/languages'));
    }
    if (lc.enableAudioCueService === true) {
        addService('audioCue', import('vscode/service-override/audioCue'));
    }
    if (lc.enableDebugService === true) {
        addService('debug', import('vscode/service-override/debug'));
    }
    if (lc.enablePreferencesService === true) {
        addService('preferences', import('vscode/service-override/preferences'));
    }
    if (lc.enableSnippetsService === true) {
        addService('snippets', import('vscode/service-override/snippets'));
    }
    if (lc.enableOutputService === true) {
        addService('output', import('vscode/service-override/output'));
    }
    if (lc.configureTerminalService !== undefined) {
        addService('terminal', import('vscode/service-override/terminal'));
    }
    if (lc.enableSearchService === true) {
        addService('search', import('vscode/service-override/search'));
    }
    if (lc.enableMarkersService === true) {
        addService('markers', import('vscode/service-override/markers'));
    }
    if (lc.enableAccessibilityService === true) {
        addService('accessibility', import('vscode/service-override/accessibility'));
    }
    if (lc.enableLanguageDetectionWorkerService === true) {
        addService('languageDetectionWorker', import('vscode/service-override/languageDetectionWorker'));
    }
    if (lc.enableLanguageDetectionWorkerService === true) {
        addService('languageDetectionWorker', import('vscode/service-override/languageDetectionWorker'));
    }
    const reportServiceLoading = (services, debugLogging, origin) => {
        for (const serviceName of Object.keys(services)) {
            if (debugLogging) {
                if (origin) {
                    console.log(`Loading ${origin} service: ${serviceName}`);
                }
                else {
                    console.log(`Loading service: ${serviceName}`);
                }
            }
        }
    };
    const mergeServices = (services, overrideServices) => {
        for (const [name, service] of Object.entries(services)) {
            overrideServices[name] = service;
        }
    };
    let count = 0;
    const loadedImports = await Promise.all(Object.values(promises));
    const overrideServices = {};
    if (userServices) {
        mergeServices(userServices, overrideServices);
        reportServiceLoading(userServices, lc.debugLogging === true, 'user');
    }
    const haveThemeService = serviceNames.includes('theme') || Object.keys(overrideServices).includes('themeService');
    const haveTextmateService = serviceNames.includes('textmate') || Object.keys(overrideServices).includes('textMateTokenizationFeature');
    const haveMarkersService = serviceNames.includes('markers');
    const haveViewsService = serviceNames.includes('views') || Object.keys(overrideServices).includes('viewsService');
    // theme requires textmate
    if (haveThemeService && !haveTextmateService) {
        throw new Error('"theme" requires "textmate" service. Please add it to the "initServices" config.');
    }
    // markers service requires views service
    if (haveMarkersService && !haveViewsService) {
        throw new Error('"markers" requires "views" service. Please add it to the "initServices" config.');
    }
    for (const loadedImport of loadedImports) {
        const serviceName = serviceNames[count];
        if (lc.debugLogging === true) {
            console.log(`Initialising provided service: ${serviceName}`);
        }
        let services = {};
        if (serviceName === 'editor' || serviceName === 'views') {
            if (lc.configureEditorOrViewsService?.openEditorFunc) {
                services = loadedImport.default(lc.configureEditorOrViewsService.openEditorFunc);
            }
            else {
                const defaultOpenEditorFunc = async (model, options, sideBySide) => {
                    console.log('Trying to open a model', model, options, sideBySide);
                    return undefined;
                };
                services = loadedImport.default(defaultOpenEditorFunc);
            }
        }
        else if (serviceName === 'configuration') {
            if (lc.configureConfigurationService?.defaultWorkspaceUri) {
                const uri = Uri.file(lc.configureConfigurationService.defaultWorkspaceUri);
                services = loadedImport.default(uri);
            }
        }
        else if (serviceName === 'terminal') {
            if (lc.configureTerminalService?.backendImpl) {
                services = loadedImport.default(lc.configureTerminalService.backendImpl);
            }
        }
        else if (serviceName === 'storage') {
            services = loadedImport.default(lc.configureStorageService?.provider);
        }
        else {
            services = loadedImport.default();
        }
        mergeServices(services, overrideServices);
        reportServiceLoading(services, lc.debugLogging === true);
        count++;
    }
    await initializeMonacoService(overrideServices);
    if (lc.logLevel) {
        StandaloneServices.get(ILogService).setLevel(lc.logLevel);
    }
};
//# sourceMappingURL=monaco-vscode-api-services.js.map